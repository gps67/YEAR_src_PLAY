2020-05-01 May Fri 14:12 2020-05-01_PATTERNS.txt

	PATTERN

	 [s]
	 "%s"
	 " ... %s ... "
	 " ... %s ... " PARAMETER == NAMED_PARAMETER

	PATTERN [s]

	const char * GET_item_name( buffer1 & item_name ) ; // dialect

	// per ITEM field "item_name()" // gets THUS CTXT // gets_THIS_HERE

	PATTERN [s]

	Item_t & item = EA_EXPR { idx == { "%d" EXPR } }

	PATTERN [s]

	EXPR = ZERO + OFFS
	EXPR = EXPR + OFFS

	PATTERN

	.PSG. // gen yacc from PSG layouts
	.PSG. // gen code for MATCH ...
	.PSG. // gen data for MATCH ... for_FROM 
	// GEN for GEN_C_PLUS // or a wide DIALECT of SCRIPT 

PSG_of_bitfield_decoder_phrases

	PATTERN [u2]

	[0] ITEM_ZERO
	[1] ITEM_ONE
	[2] ITEM_TWO
	[3] ITEM_PLUS

to gen above

	LHS == "ITEM"
	RHS == [idx] of { [0], [1], [2], [3] } // PRELOAD_CACHE_fetch_each

	foreach idx N_in_ARY PRELOAD( ARY[idx] )

PSG_of_ARGV_SCRIPT

	ARGV_ITEM_TYPE_t ARGV[]
	ARGV_ITEM_TYPE_t { 
		u32_liho u32_PAIR[2]; // _lo _hi

		// EG ARGV[0] == "invoked/as/cmdname"
		// EG ARGV[i] == " { SCRIPT } "
		// EG ARGV[i] == " SCRIPT_csr "
		// EG ARGV[i] == " STEP_cmd "
		// EG ARGV[i] == " STEP_arg PSG "
		// EG ARGV[N] == NULL

		// PSG of DATA // edited LISTS of LISTS of ITEMS with FIELDS
		// SPEC meets PSG
	}
	OBJV_ITEM_TYPE_t += { // SUBLEX joins _t DIALECT += .

		// EG ARGV[i] == "%s" // { pascal comment } // 
		// EG ARGV[i] == "%s" // { tcl 'word_quote' } // 
	}

PSG_QUOTING

	{ CURLIES }
	'literal_const'
	"expandable_fmt_with_args" // _FMT_ // choose plain C %s
	`call( argv )" => 
	 `func = lookup( argv[0] ) ; CALL func ( argv )"
	EXACT INDENTAION
	+= STRANGE_SPACE_PAD_PLUS
	 INDENTED
	  ZONE

libSTR0_LOGIC

	An unknown and complex remote object
	can be resolved into a clunky PSG_PHRASE
	
	" Q2 SP WORDS SP Q2 "
	 This creates an OBJECT whose name is ANY_STR or PARSED_STR
	 MATCH "SP WORDS SP"
	 MATCH "WORDS" // FLAG == WARN == MISSING_SP // expected SP got HEX(%s)
	 // REQUOTE HEX

	 LIST = new_LIST
	 LIST += add_ITEM Q2
	 LIST += add_ITEM SP
	 LIST += add_ITEM WORDS
	 LIST += add_ITEM SP
	 LIST += add_ITEM Q2

	 WORDS: WORD {STAR SP WORD} )



COMPILER add FILTER

	AIM for FADE same SUBLEX for NAME-t Name
	so gen the VARNAME as the simples VARTYPE
	 VARTYPE = u32_lohi_t // lohi !!
	 VARNAME = "u32_lohi_OFFS"
	 VARNAME = "u32_lohi_IDX"
	 VARNAME = "u32_lohi_EXPR" // EXPR cast into OFFS || IDX // CT PICK

	 VARTYPE = u32_OFFS_t

	 	META_INFO
		 SEGMENT = N_BYTES N_ZERO but flag_NOT_EMPTY # u32_FULL
		  N clipped u32 in u32 except ZERO means
		  # ZERO means FULL_u32
		  # ZERO means FULL_PAGES // eg MMU_4K elf_segment
		  # ZERO means EMPLT_after_checking_flag
		  # ZERO means FLAG_flag_NOT_EMPTY # CALL_on_ZERO( var_t & var )
		  # SCRIPT VECTOR wans to INLINE but also EVAL_SCRIPT _able

	VAR_TYPE == "u32_cpu" == "u32_lohi" // ON_THIS_MACHINE == "u32"
	

