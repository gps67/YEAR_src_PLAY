
DEST = LHS OPCODE RHS // OP1 OP2
DEST = Rd // u4 // 15=PC 14=LINK 13=STACK
DEST = one of { 0 1 2 3 4 5 6 7   8 9 10 11  12  { 13 14 15 } }
DEST = one of { 0 1 2 3 4 5 6 7   8 9 10 11  12  { 13=STACK 14=LINK 15=PC } }
DEST = one of { 0 1 2 3 4 5 6 7   8 9 10 11  12  { {13 14 15} { STACK LINK PC } }}
DEST = one of { 0 1 2 3 4 5 6 7   8 9 10 11  12  { 13 14 15 } { STACK LINK PC } }
// INFER uses specific tokens within filtered usage

SYMBOL TOKEN EA DATA SPEC

	u64_t SOMETIMES MEANS u64 // int // unsigned int // uns //
	u64_t SOMETIMES MEANS u64_t // u64_payload_in_cpu_var_ // DECODER u64

	u64_t has itself or a group shared CTXT
	u64_t has extra fields VTBLS CT_ RT_ EDIT_ 

DEST = u4_t u4_idx_register
	u4_idx_register : u4_t idx = lookup(" idx ")
	// CODE on first use fill CACHE when lookup { SP %s SP } PARAMETER

u4_idx_register DEST OP1 OP2 SHIFT_WHEN_REG

	DEST = OPCODE OP1 OP2 
	DEST += OPTIONAL OP3 = SHIFT = register = u4_OP3

	Rd = DEST
	Rn = OP1
	Rm = OP2
	Rs = R_SHIFT

	OPCODE( Rd, Rn, Rm, Rs )
	 R_DEST = Rd
	 R_LHS  = Rn
	 R_RHS  = Rm

	 	LHS = R_LHS = u4_R

	 RHS_EXPR = R_RHS | [u4_R2] 
	 RHS_EXPR.SHIFT(SHIFT_EXPR_BYTE)
	 RHS_EXPR.SHIFT(SHIFT_EXPR_BYTE,R_SHIFT))

	 	RHS << 3
		RHS << CT_u5_32 || RHS << R_SHIFT // and direction variations
		RHS >> also_available_using_u3_of_u8_LR_bit_iu_bit_32_or_RT
		// CT_u5 or USES_RT_u4_R_SHIFT bit 
		// u5 is CT_SHIFT or RT_R_SHIFT // u4 on ARM_32
	
	cpu_var_TEMP
		shift left  u5_left_crop
	// -BREAK- STEP - need ACTUAL SIDE EFFECT TOP_DROP
		shift right u5_left_crop // TOP_FILL_ZERO
		shift right u5_right_crop // TOP_FILL_ZERO
	// -BREAK- STEP - need ACTUAL SIDE EFFECT CLIP_CLICK
	// NOW BITFIELD is in it's ZERO position, clipped both sides with SIGN
	// NOW BITFIELD is in it's ONE position, byte_align jumble
		shift left 1 2 4 8 or n // LOW FILL ZERO keep CLICK
	// NOW BITFIELD is in it's TWO position, click aligned
	// 


	 R_SHIFT = Rs = u8_SHIFT_EXPR.R_SHIFT // u4_idx out of u8

	 SHIFT = u4_REG | u5_32_shift_i2_LR_iu



	OP1 = R_OP1 // u4_idx

	OP2 = R_OP2 // u4_idx

	OP2 = R_OP2 >><< u8_shift_expr // u3 (DIRECTION_SIGNED)
	OP2 = R_OP2 >><< u5_shift // u3 (DIRECTION_SIGNED)
	OP2 = R_OP2 >><< R_shift // u3 (DIRECTION_SIGNED)
	OP2 = u8_val << u4_rotate // u8 << 15 is u23
	OP2 = R_OP2 || Rm << u8_shift_expr Rs=OP3_R_SHIFT  // DECODE TOO

NOTE 
	00 LEFT SHIFT LOGICAL = fill zeros
	01 RIGHT SHIFT LOGICAL = fill zeros
	10 RIGHT SHIFT SIGNED = fill sign bit # 0 means 32 means 0XFFFF or ZERO
	11 RIGHT ROTATE # <--- COULD BE FILL 1, to get u23 FF mask # 0 means 33

u8_shift_expr

	u5 V_SHIFT
	u1 to_LEFT
	u1 as_SIGNED
	u1 0 == CONST shift

		shift opcode2 by V_shift [0[32

	u4 Rs = R_SHIFT
	u1 0 = filler
	u1 to_LEFT
	u1 as_SIGNED
	u1 1 == Rs shift

		shift OPCODE2 by R_SHIFT



