2020-03-31 Mar Tue 23:37 2020-03-31_api_ALLOC8_Module.txt

 choosing nearest of 2 choices // some #define ITEM_IDX 0xabcd

  LOHI
  	CPU's like to be LOHI
	temp var copies
	save cpu_var_name.u64_value to mem_addr_expr
  HILO
  	VIEW likes to be HILO
	needs to know WORDSIZE( WORD_u64_t ) == 8 byte // 64 bit // 1 cpu_var
  ABCD
  	byte order is letters left to right _a _b _c _d
	// option BYTE_AT( P+0 ) HERE WORD // THIS WORD // new auto-correct
	// option BYTE_AT( P+0 ) _abcd_
	// option BYTE_AT( Q+4 ) _efgh_ // poss == P+0
	// option BYTE_AT( P+0 ) _a // AB.A // EF.E // dialect GH.A == "G"
	// option BYTE_AT( P+1 ) _b // AB.B // EF.F // dialect GH.B == "H"
	// option BYTE_AT( P+2 ) _c // AB.C // GH.G // dialect GH.A == "H"
	// option BYTE_AT( P+3 ) _d // AB.D // GH.H // dialect GH.B == "G"
	// option BYTE_AT( P+4 ) _efgh_
	// option BYTE_AT( P+8 ) NEXT WORD // P2 == _i == ABSENT_i // exists
  EFGH
  	math overlay ABCD
	math resolve deeper x0000abcd "z0000abcd" 0==NUL byte z=UDEF
	match resolve deeper ZZabcdef "z00abcdef" Z==NUL byte z=same
  HL_H_L
  	GH  _swapped_  is HL u16_HL u16_AB u16_hilo
	HG _unswapped_ is LH u16_LH i16_BA i16_lohi

	GH comes from LOAD_and_SWAP SWAP_and_SAVE
	HG comes from LOAD_and_no_SWAP no_SWAP_and_SAVE
	HG comes from LOAD_lohi_directly  SAVE_lohi_directly 
  CPU_VAR
  	this is all union over WORD_64 // in a cpu_var // in_mmx // in_mem
	FAST access lo byte
	FAST access hi byte of u16
	FAST shift right u16 // get u48_payload at own bitzero // in own
	FAST_NB no left shift required to drop top, as at top, allow overfit
  NEAR
  	ROTATE one_off reusable udef_hint CT_track // unknowable sofar

  u32_u32
  	u48 is almost always u32_u16 u16_EXPR
	u32 is our coding reach

  u32_z16_u8_u8 LOHI

  	u8_lo		LO
  	u8_hi		HI
  	u16_lohi	-unused- u48 on 32 bit machine
  	u32_lohi	OFFS or u32_payload

	this is how 32 bits avoids u48 shifting, and back
	wasting 16 bits is a small cost, wasting half decode space tho

  u16_u8_u8 HILO

  	u8_lo		LO
  	u8_hi		HI
  	u16_lohi	u16_payload OFFS or more to decode

  	
  	


		GH is u16_AB // == "gh" 
		HG is u16_BA

 ea_ VAR_NAME = STR0 "VAR_NAME"

 // cpu_var_Name_t // custom on cpu_var_base // no inherit required
 // because u48_DATA_u16_OPCODE
 // DIALECT decode("u16_OPCODE") // SUBLEX complains if not "..."
 // VTBL CPU_VAR_base_t // asif inherit API_baseclass_t
 // STEP_BYTE_STEP DECODE("u16_HL")
 // opcode_tables pre_built
 // vm OFFS_t
 //	WORD = u48_u16
 //	WORD = cpu_var( u48_u16 ) // tcl array is func( str_name ) // no Q2
 //	WORD = cpu_var( "u48_u16" ) // SCRIPT is LINE [s] // LINE is ARGV plus
 //	WORD.BIT_FIELD("u48") // is_2_bytes_above_bitzero 
 //	u48_OFFS // when ROTATE.is_at_own_bitzero // ie of the u48 as value
 //	u48_offs is _ABCD_CD_EF // u16_GH shifted out
 //	u48_offs is _ABCD_CD_EF
 EFGH_EF_GH_HL_H_L
 //	u48_offs is xFFFF_ABCD_CDEF_EFGH_EF_GH_HL_H_L
 //	u48_offs is xFFFF_ABCD_CDEF_EFGH_EF_GH_HL_H_L
 //	u64 u48_OFFS = (u64)WORD >> 16; // where_does_WORD_come_from
 //	u64 u48_OFFS = u64_WORD >> 16; // zero fill top
 //	u16 u16_ITEM = (u16)WORD ; // C++ knows for us // CAST_item // HL
 //	P0 = u48_OFFS_t // PRE-BUILD writes KNOW_CODE FAST_WORD
 //	P2 = P0 + N
 //	N = P2 - P0
 BIT_FIELDS {
  u64_WORD // ...
  u48_u16
  u48_u8_u8 //
   u48_PTR
   u8 OPCODE_A
   u8 OPCODE_B
   // HL as H and L
   // AB of ABCD of EFGH of _ABCD_EFGH_
   // CD of ABCD of EFGH of _ABCD_EFGH_ // GH
   // ABCD of ABCD of EFGH of _ABCD_EFGH_
 }
 u16_as_u8_u8
 u8 lhs // PARAMETER // VAR // BIT_FIELD_BYTES U32_DECODER U64_DECODER
 u8_u8 OPCODE
 u48_u16_PTR_OPCODE _AB
