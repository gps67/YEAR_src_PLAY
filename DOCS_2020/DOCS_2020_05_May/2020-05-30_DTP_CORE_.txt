2020-05-30 May Sat 18:14 2020-05-30_FTP_CORE_.txt

	DTP_CORE
	_over_
	u48_u16
	// using u8_u8

DTP CORE

	CORE == PRINT_HEAD + Layout

PRINT_HEAD_2D
	XY_t XY = XY_EXPR; // COMMENT
	.GOTO XY
	.DX dx [ --UNITS==TOKEN ]
	.DY dy [ --UNITS=="TOKEN" ]
	LINES XY_POS FGBG MINI_machine_X11_graphics_context PEN_n_INK

Layout : DTP_CORE_Layout
	// Module // INST Layout = CTXT.Layout
	// MINI machine of TAB_STOPS CSR PAGE_Layout FGBG FONTS kerning CSET
	// uses utf8 but not when sorting, BYTE - BYTE

	// TAB_STOP[ margin.left ] // see diag ... Cached link by "margin.left"
	// OPTION have Bench do plurals on a VIEW by VIEW basis, also -ies

	// TAB_STOP[ margin.right ] // see diag ... Cached link by ".X2"
	// VAR link X0X2.x0 // (u32) U64; // CC uses R2 = R1.as_u32() //
	// VAR link X0X2.x2 // U64 >> 32;

	// PICK_UP_ITEM_OF_TYPE glyph = letter of TEXT in WORD
	// dx_glyph = get_from_free_type_cached_MINI
	// dx_word = computed by MACRO_function // lambdas if you want them


	// DIALECT // most things get abbreviated full_item_type item_type_
	// item_type_ _item_type; // LHS is { typename _t } RHS is "varname"
	// in above typename is var_link var_name var_alias_data("typename")


	MINI machine

		nroff machine


	MINI machine

		latex machine


	MINI machine

		X11 graphics context plus a few vars


	MINI machine

		API true_type glyphs machine

		IT IS ONLY A MATTER OF TIME UNTIL I FIND true_type_GL
		it splines curves over 3D vec3 
		it splines curves over 2D vec2  // VIEW = 2D from 3D 
		// PLUS u8[] list of zones where CSR is (first 2 ? + STACK_N)
		draw layout onto original FLAT or 3D Layout ORIENTATION MATRIX
		reduce MATX = obtain_2d_from_3D
		APPLY MATX VECT_of_N_points

		vec2 VECT_of_N_points [N] ; // declare VECT
		MATX VECT_of_N_points [idx] = EXPR_idx

Layout CORE

	BLOCK paragraphs
	SPLIT paragraphs // to NEXT_PAGE

	MULTI_ZONE += margin_notes += footnotes

	HTML B I U FGBG fgbg_css_basic // RGBA

	PRE TTY indented blocks of ASCII code with utf8 

	pre_type_set WORD
	# store kerning as dx
	# step gluph as dx // verticals laters
	# keep xpos glyph_bitmap
	# larger_bitmap .XY. baseline glyph 
	// MINI sees "glyph1 adj_kerning glyph2"  

