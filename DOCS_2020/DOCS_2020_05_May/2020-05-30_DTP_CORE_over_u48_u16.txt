2020-05-30 May Sat 18:14 2020-05-30_FTP_CORE_over_u48_u16.txt

	DTP_CORE
	_over_
	u48_u16
	// using u8_u8


 typedef u64_DECODER u64_DECODER_t ; // DIALECT shift here omit _t
 typedef u64_DECODER u64_DECODER_t ; // DIALECT shift know 
 u64_DECODER

 cpu_var_t // AMD64 anyway, add BYTE_B // u48_u8_u8 U48_HI_LO

 u48_u8_u8_t
 	u64_t u64_WORD; // = CTOR_WORD // 
 	u64_t u64_WORD = CTOR_WORD // also register allocated VALUE in place

	i64 get_i48( u64_WORD ) // GEN inline C++ for EXPR = get_u48 item
	{
		// this is VERY FAST and guarantees SIGN in TOP16 bits
		return ((i64) ) u64_WORD) >> 16; 
	}

	typedef  u64  u48_t ; // u48 in u64 exact
	typedef  i64  i48_t ; // i48 in i64 exact

	u48_t get_u48( u64_WORD ) // GEN inline C++ for EXPR = get_u48 item
	{
		// this is VERY FAST and guarantees ZERO in TOP16 bits
		return (auto) u64_WORD >> 16;
	}

	u8 get_hi( u64_WORD_t u64_WORD ) {
		u64_WORD <<= 48; // 64 - 8 - 8
		u64_WORD >>= 56; // 64 - 8 // leaves OUR 8 bits unisgned
		return u64_WORD;

		-or-
		u64_WORD .cpu_var_byte_B

		-or-
		u64_WORD >> 8 ; // DROP RHS
		return (u8) u64_WORD; // C compiler casts away all above byte
		return (i8) i64_WORD; // C compiler casts SIGN from BYTE
	}

	u8 get_lo( u64_WORD_t u64_WORD ) {
		return (u8) u64_WORD; // C++ also knows set R2 R1.
		u64_WORD <<= 56;
		u64_WORD >>= 56;
		return u64_WORD;
	}

	Object_t * get_Obj( u64_WORD ) // GEN C++ // GEN ABBREV // _tree_
	{
		// this is VERY FAST and guarantees ZERO in TOP16 bits
		return (auto) u64_WORD >> 16;
	}

	u8 get_LO( u64_WORD_t u64_WORD 
 	u48_PTR_t  u48_PTR  = u64_WORD >> 16;
