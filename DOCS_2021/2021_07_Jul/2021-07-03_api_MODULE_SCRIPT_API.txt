	2021-07-03

	2021_07_Jul
	2021-07-03_api_MODULE_SCRIPT_API.txt

	MODULE_API_t api; // _TYPE_t define api_t MODULE_API_t

	MODULE SCRIPT C++ SUBSET VIEW_as_DIAG 
	 PHRASE decl macro_name ...
	 PHRASE decl var DECL STO IDX EXPR // DECL_STO_IDX_EXPR.dll_segment
	 PHRASE function name A R G V ...
	 SCRIPT SYMBOL "..." used to mean ARGV_TAIL // WITH NULL STOP NULL
	 DATA ARGV = { argc argv } // argc_t == int // argv_t == "char ** %s" "argv"
	 SCRIPT DETECT MATCH "%s" varname // more ...
	 SYMBOL "..." also used in different DIALECT LOCAL VARS VOCAB
	 LANGUAGE += VOCAB += 'Item_t & item = lookup("anystr");'
	 GUESS rewrite all placeholders using TABLE DATA_in_SEGMENT_nbytes
	 API grow world {
	 	add feature to SESS_t
		use api namespace
		add own namespace "{ SCRIPT }" // NAME is view_as_NBYTES_SCRIPT
		// ie MIME_TYPE == STRIPT_t // nbytes supply == malloc
		// nbytes_t supply; // compile time EXPR // OBJ = EXPR nbytes
		// MATCH "{ %s }" 'MIME_TYPE=="SCRIPT"'
		// DIALECT LEXPR ' ... ' // single arg word inside Q1 text Q1
		// SCRIPT ALIAS text == EXPR_as_TEXT
		// SCRIPT PRINT EXPR %s == "%s" // STR0 SYMBOL "SCRIPT"
		// SYMBOL %s_t typename_from_varname "varname" // api feature
		// api feature // SYMBOL NAME DATA // eg #define LHS RHS
		// MATCH function name argv expr vars macros functions decls
		// MATCH CODE_LINE // STREAM FILTER == "{ ... }"
		// MATCH DIAG of CODE LINE PLUS
		// MATCH DIAG += collection of stray objects called "idx"
		//
		// API = DIALECT RUNTIME LIBR COMPILE_TIME_TOKENISATIONS
		//
		 api is a bench workspace single_stepping_a_machine STO SESS
		 api is a DIALECT VOCAB GRAMMA USAGE EXPRS TEMPLATES RUNTIME
		 api is SESS_api registered SYMBOL = TOKEN // LIST[idx]
		 api gets code for VAR_POOL "anystr" idx_t idx = lookup("anystr");
		 PARSER calls MATCH which accumulates PHRASE_BOOK
		 PARSER triggers on "anystr"
		  // that runs PARSE_MATCH_FILTER_DETECT 
		  // EMIT DETECT MATCH action name ... // ... argv ... CMNT ...
		  // EMIT DEDUCE 
		  // EMIT NOTICE 
		  // EMIT USAGE action args ... // CT BODY = nbytes_t P0P2_BODY
		  // PARSE_MATCH '%s_t 
		  // idx & * OFFS = lookup("%s") // "anystr" // name = "%s" 
		  // name = "%s" // ALIAS "Q2 EXPR=="%s" RETVAR /*unset*/
		  // PSG generates BISON CODE_LINES used in FILTER
		  // CHATTY DIALECT uses VIEW("FILTER _t"); // VAR of same name
		  // STR2 get_TYPENAME_t() // get_typename_of_item("NAME")
		  // VAR_POOL_technology_used_in_STREAM_PARSER_MACHINE
		  // MACHINE SESS.stream_parser == CT("STREAM_PARSER")
		  // DIALECT SESS += feature SESS == get("SESS", "STREAM_PARSER")

		 TEMPLATE += CTOR of CODE_LINES + LIST_TEXT_LINES
		 // TEXT_t & nbytes_STRUCT_PLUS // get SPEC from somewheres
		 // SPEC SPEC_STRUCT SPEC_STRUCT_PLUS // base view //

		 SUBLEX += STREAM_PARSER += PRINT_VIEW_OF_SCRIPT_LINE_EXPR

		 SUBLEX has to be built upon BISON + FLEX as well as CODE
		 generate handcrafted LEX fragments PSG FRAGMENTS
		 print PSG TREE as BISON file compile into DLL call in FILTER
		 STREAM_PARSER produces a PSG_LAYOUT_of_CODE as DATA
		 stream_FILTER_output + accumulated TREE of EXPRS
		 // CT RT run FILTER_SCRIPT to build cached_value SESS_DATA
		 collect tricks
	 }
	 MODULE
	  SCRIPT 
	   API

	 SESS is an available variable in thread_local
	 cpu_var_CTXT is in CT_vocabulary as name of register var // fixed global
	 The SCRIPT is a list of CTOR phrases that build a RT_MACHINE CT_
	 The STO of VARNAME might be ... {
	 ITEM SESS.VAR_POOL("VARNAME").lookup("anystr")
	 VAR_POOL_t & VAR_POOL = get_VAR_POOL("VARNAME")
	 EXPR OBJ_t * obj = VAR_POOL.lookup("Name")
	 //
	 // or CTXT holds VAR_POOL //  CTXT.get_obj(ref_obj, "VARNAME","Name");
	 //
	 }

	MODULE
	SCRIPT
	API

		API is a header, just like a Module, SPEC, VARS, FUNCS,

		it might have features like:
		 client_data -is- TYPE * INST; // symmetry SAVE LOAD // SAME

		SCRIPT can build API piece by piece
		 MODULE.add_decl( DECL )
		 SESS.add_vars_to_pool( ... )
		 CODE.add_module( ... entire ... )
		 compile SCRIPT_FRAGMENT into api
	
	Accumulate C++ needed 
	 so have vocab to do it itself
	  bootstrap
	
	CT RT JIT

