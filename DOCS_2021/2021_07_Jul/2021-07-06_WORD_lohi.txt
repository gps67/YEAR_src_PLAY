	2021-07-06

	2021_07_Jul
	2021-07-06_WORD_lohi.txt

MEM
	a b c d e f g

CPU

	gfed dc b a  # ba dcba # ab abcd abcdefgh # u8 u16 u32 u64 # byte_B

	The first names repeat the order of the bytes in registers
	The second names repeat the order of the bytes in memory
	The second names are more familiar, but a tad misleading
	The third names (u16) are simpler, but require lohi mentioned somewhere

	The 8 bytes in memory are decoded left to right
	The 8 bytes in register are decoded using AL and AH (AL AX EAX REAX)

	The CPU works with any word size, from left to right a .. b ... c 
	But BYTE_B allows us to look at B as if it was hilo or lohi

bswap
	a b c d e f g = MEM
	a b c d e f g = CPU
	    c d e f g a b = CPU ROT16

lohi
	get_b()
	get_a()
	get_ab() // lohi
	get_abcd() // lohi
	get_abcd_efgh() // lohi
	get_cdefgh() // shifted 16 down u48 // i48
	get_efgh() // shifted 32 down u32 // i32
	get_cd() // shifted 16 down, as u16 // i16

	get_byte_b()
	get_u8()
	get_u16()
	get_u32()
	get_u64()
	get_u48_high_bits()
	get_u32_high_bits()
	get_u16_high_bits()
	get_u16_ab_cd_ef_gh() [0 1 2 3]

	set_* all of the above

 PSG
 LEX
 	the way C++ is type sensitive to each parameter's type
	make it APPEAR to be sensitive to the parameters NAME or ATTR
	cant make sense of that, but VIEW_AS can
	provided there is an unambiguous layer

	varname is a magnet to the ATTR(INTO_NAME)
	parameter has matching magnet INTO_NAME(NAME)
	clues appear in source comments HINT_JOIN(Name1,Name2)



WHY - WHAT ?

	lohi comes from incrementally reading lo hi bytes, add, carry upwards

	hilo disadvantage is the need to KNOW word size before starting
	     we want to DECODE_u16_ab


