	2021-07-16

	2021_07_Jul
	2021-07-16_bench_STEP.txt

	bench is a SHED's work bench NEAR ... TOOLS ... MESSAGES DIARY
	STEP is an FSM_LOCN see FSM_MATCH FSM_RUN CLOCK TICK TOCK
	SCRIPT is a wild NLP language, welll not quite, TOKENISE, 

	RUN SCRIPT STEP

		create snapshot of vars
		 PREV HERE NEXT
		 LEFT MID RIGHT
		 # THIS == MID # SESS.HERE_NOW #
		 # all these items get STO in SESS.HERE.STO or .str(ctxt)

	VARS += VAR "name" # "type" ... SCRIPT ...

	 CTOR gets called by C++ engine # clang api ROM from C++ in SESS CTXT
	 CTOR(&item,CTOR_DATA,...)
	 fn CTOR ARGV SESS_id
	 # PROVIDE a C++ compiled u8_TOKEN when used in EA_SCOPE

	g++ and clang c++ 
	g++ and clang c++ # convey enum item in group maybe usage

	 The life cycle of an object in memory via malloc()
	 We have added some ref_count system, or GC_LISP
	 So get accurate calls of CTOR and DTOR also LIBR
	 CTOR Item_t item = { INIT_SCRIPT }
	 CTOR Item_t BENCH_ITEM_OBJ_CTOR = { INIT_SCRIPT } += INIT_DATA
	 # LANG SCRIPT # INIT_DATA is valid in SCRIPTS streams segments
	 # SEGMENT # REQ_STO( ARGS ) # // DATA is SCRIPT DATA // ctxt
	 # CTXT # SESS # QUOTA += anthing # range of SESS PRE_BUILD
	 # SPLIT PRE_BUILT PRE_BUILD # CODE_POINT HERE += prepped VAR_NAME

	 CTXT(ctxt)
	 CTOR(ctxt)
	 ITEM(sess) # CTOR new ITEM in SESS(sess) # CAPS is TOKENISED CONST
	 CODE(code) # most parameters are PAIR{SPEC,DATA} with INTERP_THIS
	 THIS(data) # running lines of SCRIPT builds the SESS(ctxt)
	 SELF(data) # UDEF DIALECT # mk_VAR name type ctor exprs near
	 ADDR(this) # use_method_var "this" # ALIAS -HERE- _LIST_HERE_

	 FSM 
	  ADDR_t LOCN[u8 u8_idx]
	  ADDR_t ITEM[u8 u8_idx]
	  ADDR_t CALL[u8 u8_idx]
	  ADDR_t EXPR[u8 u8_idx] { DECODE } // from FRAMEWORK == UDEF
	  TOKEN = TOKENISE["THIS(data)"] // with added CTXT SESS ARGV MODULE
	  EXPR[lookup("THIS(data)")] // repeat TOKEN use is not DECL_CONFLICT
	  EXPR[u8_idx_t idx]
	  EXPR[idx]		// from [byte] to u48_u16_expr u64_idx_for_DECODER
	  DECODER("EXPR[idx]") bind to the api's GETTER // docking strategy
	  PRECOMPILED DECODER("anystr") within SCRIPT within SESSION

	  VAR_POOL += { MATCH_PATTERN_%d } // u8 = DECODER( u64_bitmap )
	  DECODE( u48_u16_t u64_WORD )

	 BENCH
	  editing USER ROM
	  editing USER SESS PRESET
	  drawing TYPE_DIAG [uncompiled VECTOR can step_up_to u24_idx i8_heap]
	  Often entire module uses u4_idx TOKEN, allowing idx in opcode
	  streamed opcode is malice sess EA machine u4_addr
	  low numbers can be registers, or sparse lookup tables
	  create error handler dgb.err
	  # PASS INFO WARN FAIL OTHER # OTHER == "show_var" "val=='%s'"
	  # VIEW CODE "..." # DROP_Q2 # DIALECT_USES_Q1 # val == '%s'
	  # VIEW CODE "..." # INTO_Q2 # DIALECT_USES_Q2 # val == "%s"
	  # VIEW CODE "..." # INTO_Q2 # DIALECT_USES_Q2 # val == "%s(%s) # %s"

PHRASES LIKE:

	 CTXT(ctxt)
	 CTOR(ctxt)
	 ITEM(sess) # CTOR new ITEM in SESS(sess) # CAPS is TOKENISED CONST
	 CODE(code) # most parameters are PAIR{SPEC,DATA} with INTERP_THIS
	 THIS(data) # running lines of SCRIPT builds the SESS(ctxt)
	 SELF(data) # UDEF DIALECT # mk_VAR name type ctor exprs near
	 ADDR(this) # use_method_var "this" # ALIAS -HERE- _LIST_HERE_
	 COPY(item) # from this to new item, in same memory space, or move
	 MOVE(item) # auto RESOLVE where to is CPU_MACHINE_MMAP_QUOTA_B

	EA( EXPR )
	EA_EXPR DECODE_STEP( u48_u16 ) # mini world in u16 # "var_type"

	DECODE( u8, u8, u48_OFFS )
	_t _u48_offs i32_offs u32_offs u32_offs_expr(ctxt) 
	u8_idx idx_item = DECODED.var_name.field_name.expr(ctxt)
	array[ N++ ] of VAR_NAME_idx 
	u8_idx idx = N++ // LOCK ALLOC HERE // N++ // MATCH "N++"

	operator %s ( ARGS ) // cpp rules, or avoid other then VANILLA
	%s is the operator, we can redefine them all, I think
	== != < > CMP CMP_OPTIMISE_LOOKUP
	+= *= <<= + - 
	operator = # COPY_CTOR {{ZAPS oldval} {CTOR newval}}
	ref_holder VAR = NEWVAL // release OLDVAL // copy outof NEWVAL_to_VAR
	MODULE says list of MODULE.NAME[idx_already_looked_up] # u64 WORD PAIR
	# WORD_PAIR u32_u32 in u64 # often split as u48_u16
	# u32 ARM uses PAIR of WORDS for u32_u32 SPLIT
	# u32_u32_SPLIT defines loads of access macros
	# these will be available for BENCH accessing ZONE.STBL.item #  expr
	# GETTER of EA( obj ) { return this; }
	# GETTER of EA( & obj ) { return * this; }
	# WRAPPER adds CHECK_NULL(this) # COMPILER KNOWS STUFF #
	# on NULL invoke dgb sess on MACHINE SESS CODE DATA # MODULE

 DECODE u48_u16

 	opcode_AB // the u16 of the DECODE_u48_u16 //
REM	mentioning { u16 } { DECODE_u48_u16 } { opcode_AB }
REM	DECODE(u48) as u32_u16_u16 // need SPLICEWORK
REM	SPLICE shift left to top
REM	SPLICE shift right to bottom SIGNED UNSIGNED
REM	SPLICE detect ZERO SIGN CARRY_LAST_DROP_ PARITY
REM	SPLICE usage CMP IS_SAME IS_LESS IS_MORE 
REM	ALIAS IS_NEGATIVE IS_ZERO IS_POSITIVE ...

 SCRIPT STEP += DATA such as { here }

	A B "u16==u16_liho_within_u64_WORD"
	A B "u16==filter(64_WORD)"
	u8_idx_A
	u8_idx_B
	u8_hi
	u8_lo

	u64_from_u64 DECODE_TRANSLATE(u64_TOKENISED_EXPR)
	bit]0]
	bits = {
		n_left == 
		n_mid ==
		n_right == "n_right" "n==field_nbits"
		# EG # u4u4 u4u4
	}

	ADAPT_ABLA

	 SPLICE FILTER over bit_fields # or let cland do it for us
	 nbits_lhs = 64 - (nbits_mid + nbits_rhs) // CHECK [0[64
	 // INTERP 64]0] // BONUS BYTE_B BYTE_A // which is why we are lohi

	 // INTERP 64]0] // 
	 nbits_lhs nbits_mid  nbits_rhs // CHECK [0[64 64]0]
	 // INTERP 64]16]8]0] // INTEL SUBFIELD RULES but adjusted // DIALECT
	
	// nbits_%s { "lhs", "mid", "rhs" } // check add up to 64
	// shift left (nbits_lhs)
	// shift_right_unsigned( nbits_lhs + nbits_rhs )
	// shift_right_signed( nbits_lhs + nbits_rhs )
	// detect IS_ZERO IS_NEGATIVE
	// NULL MEANS mid == NULL_as_ZERO

	// only use IS_NEGATIVE with i64 i5_idx
	// TEST APPLY i5 from i5 alloc all PTR[u5] = INIT_NULL
	// ARRAY[idx] permitting -16 .. -1 0 1..15 i5 u5
	// LEX finds words in DIAG's explains
	// BENCH builds EXPR ... LEX ITEM STREAM ... ARGV
	// 
	// GET( u8 ) GET( u64 ) get( bitfield }
	// INTO u8, INTO u16_lohi, INTO_BITFIELD
	// KNOW_INTEL_TWISTS zapping other bitfields or ROTATE

	lhs_mid_rhs
	nbits_rhs = N_so_far
	nbits_mid = 5 // u5
	nbits_pos == 0 // init _pos==_used == 0
	nbits_pos += nbits_rhs // AUTO conv from const to var("nbits_pos")
	nbits_pos += rbits_mid // explain BITFIELD from pos upwards left
	nbits_used == rbits_pos // DEEP LINK SAME { _pos _used }
	// HIGH_LEFT_BIT 64]hi]lo]0]
	// if lo == 0
	// lhs == "64]hi]"
	// mid == "hi]lo]"
	// rhs == "lo]0]"

	nbits_lhs = 64 - nbits_used

	// OPTIMISE // CT checl nbits_pos <=64
	// OPTIMISE // look for VALUE == IS_ZERO

	FIXED lookup tables (with NULL means call fallback script)
	
 fn get_INTO_u8
 fn get_INTO_u16
 fn get_INTO_u32
 fn get_INTO_u24 // => _INTO_u32
 fn get_INTO_u48 // => _INTO_u64
 fn get_INTO_u64 // <== FROM_u32 // simply use strange semantic less tags
  // and the actual semantic tags are allocated in a modest table range

  ARRAY AT

   V2 = N;
   VAR = IDX # from GETTER # that has finite windows of TABLE_ROWS[u5]
   VAR -= V2
   if IS_ZERO am at EOT
   if IS_NEGATIVE is good but needs original IDX
   if IS_POSATIVE is overshoot # ACTION = PLUMBING HERE
   VAR += V2
   if IS_ZERO "N==0" is_empty
   if IS_NEGATIVE was -ve IDX // VAL == "-val" // val = TOKEN++
   if IS_NEGATIVE STOP, you have gone off the rails
   if IS_NEGATIVE WARN, you are off the rails
   HANDLER recomputes END-val # END+val already -ve
   AT behaviour ? 
   if IS_POSATIVE hopefully normal VAL==N

  build ARRAY

   add ITEM to LIST
   allocate IDX = N++
   renumber each time, except stabilises to ROM

	check nbits_mid KNOWN ZERO so skip this GEN "skip_empty_bitfield"
	check nbits_mid RT_ZERO so behave as empty GEN "asap_empty_bitfield"
	# failed to optimise out # clang can try tho

   	V2 = N
	lo = N // _pos is _N
	check lo <= 64
	N += nbits_mid
	hi = N // _pos is _N

	check hi <= 64
	IS_SAME # means exactly full, pointing over top
	IS_LESS # means have space for more
	IS_MORE # FAIL WORD OVER ALLOC
	# 64]hi]0]

   DETECT NOTHING ADDED
   DETECT SYSTEM ERROR


 






