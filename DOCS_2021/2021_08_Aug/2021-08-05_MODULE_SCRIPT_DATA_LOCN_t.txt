	2021-08-05

	2021_08_Aug
	2021-08-05_MODULE_SCRIPT_DATA_LOCN_t.txt

	2021-08-05
	MODULE_SCRIPT DATA LOCN SCRIPT
		SELF_t & SELF = INIT_OBTAIN_VAR
		DATA_t & DATA = INIT ONTAIN_VAR
		LOCN_t & LOCN = INIT OBTAIN_VAR ## this -> PTR_to_STRUCT
		SCRIPT_t & SCRIPT = INIT OBTAIN_VAR ## this -> PTR_to_STRUCT
	
	_t.txt


	somehow get SCRIPT to be a Module with a LOADER EXPR_POOL SCRIPTS;

	Our role here is to be the C++ STRUCT that is this SCRIPT initialises
	Around this Module is an API
	Module creates API EXPRS maybe even JIT

	For now SCRIPT loads itself as a Module called SCRIPT
	The PARSER found SCRIPT as PSG // we are also a compiler

	The LOADER found SCRIPT as _init( ARGS ) 
	SPEC of ARGS in SCRIPT, brings own ROM extension with it
	prototype style usage self upgrades to cached MMAP
	ARGV is { char * argv[ int argc ]; } // argc limit 1024 ? TOP5 ?
	TOP5 is A_R_G_V_ any number, ususally a handful
	CTXT SELF OPCODE DATA XPOS # maybe machine ARGC has 20 opcodes
	single paragraph all in 20 WORDS # 20 PAIRS Name Value

	OPCODE_u8_u8 u48_payload
	OPCODE_u8_u8 u16_payload
	OPCODE_u8_u8 u32_payload
	OPCODE_u8_u8 u48_payload_b // CPU32 u8_u8_u16_u32 // u48 = NEED u16_ZERO

	NEED u16_ZERO, then it is a small dataset in a large ADDR space
	on CPU32 if_u16_ZERO AUTO_SKIP_TO_u32_is_OK

	our code is compiled with

		idx_u32 = WORD.u32
		we require that this code works only with u32 arrays
		we expect to be 150 or so symbols in API # EACH SUB_EXPR

		ASSOC IDX_t == u32_t // a complex behavioural obj, in an int
		IDX_t IDX = idx_u32
		OBJ_t & OBJ = ITEM[ idx_u32 ]
		OBJ_t & OBJ = ITEM[ IDX ]

		Module created a SEGMENT of TABLES // group of items in Module
		SPEC written out for all ITEMS in DATA 
		ROM provides SPEC, CODE_POINT, CTOR_INIT_DATA, ALLOC themes
		ROM provides pre compiled ITEMs, for NEW_SPEC to use tokenised

		ON_LOAD {
			C_CALL Module_init( ARGS ) // ARGS is subset for ARGV 
			// ARGS.A = ... tokenised ROM,PLUS.CODEPOINT
			// ARGS.R = ... tokenised ROM,CODEPOINT // ORIG TOKEN
			// ARGS.G = ...ARGV LEXER PSG is our new model
			// ARGS.V = ...
		}

	DECODE ARGV

		--OPCODE-extra TEXT_VAL --opcode-exptr TEXT_VAL
		--OPCODE-extra TEXT_VAL --TOKEN-fmt TEXT_VAL fmt // fmt = "%s"
		--OPCODE-extra TEXT_VAL --TOKENISED "TOKEN"
		// VAL == anystr // utf8_ascii_chains // range of types

 Module_api

 	a Module is a standard list of declarations and code
	it has a namespace (but see also exported lists)
	it is processed by a LOADER // CT build code tree
	SCRIPT {
	 ARGV = ARGV // where did this come from
	 CALL RETVAL = CALL_SCRIPT_LOADER ARGV # then callbacks already setup
	 // bool ok = CALL( FUNC, ARGV, CTXT, SESS ) // auto reword as SESS_VARS
	 // SESS == CTXT_SESS == CTXT.SESS
	 // CTXT == SESS_CTXT // :-) AUTO CODE
	 # maybe add local on_event filters, interpreters, api
	}

	Module_init( ARGV ) { ... }

	 this is a COMPILED Module
	 ## runtime interpreter is added CALL_STEP EDIT_DATA MOVE_DATA BIND_DATA
	 ## LINK_DATA ## SCRIPT == nbytes as P0P2 loaded pos in MMAP

 Module_api

	is a Module,
	it's loading
	it's available items

 Module_api
 
 	HEADERS
	CONST
	TYPE 
	VAR
	INLINE
	FUNC
	MACRO

	DOCS
	TESTS
	SOURCE

	regen SOURCE from DATA
	provide DATA as { LOADABLE SCRIPT } += { LOADED_SCRIPT_DATA } 
	provide SEGMENTS

 loadable_elf_api
 loadable_dll_api

 	parent program exports everything
	/etc/ld.so builds elf at prog start
	dlopen - resolves internal links, build import table





