	2021-08-06

	2021_08_Aug
	2021-08-06_MODULE_SCRIPT_DATA_LOCN_CPU_DIALECT_ARM_32.txt
	2021-08-06_MODULE_SCRIPT_DATA_LOCN_CPU
	_CPU_
	 _DIALECT_
	  _ARM_32_
	  "ARM_32" # ALIAS ARM32 # DIALECT ACCENT dash_out_sublex_PARSE

	 _DIALECT_ACCENT_SUBLEX_fields_ %s_%s ASM 64 %s%s ARM 32 # CPU OPCODES

	
	_OPCODES_
	One u64 words used as a CALL ARRGS ADDRS ITEMS CTXT

		u64_t ITEM_is_a_TOKENISED_ITEM # u8_u8_u16_u32
		# STO = SESS.CTXT.STO,VAR_POOL[idx]
		# u8_OPCODE_B == "SESS.CTXT.%s STO_name ".POOL_NAME[idx_name]"
		# u8_OPCODE_B == "SESS.CTXT.%s STO_name ".POOL[idx]" # ACCENT
	# ACCENT 
		# # POOL=="POOL" idx=="idx" #
		# # CODE # DATA_VIEW # Name_Of_VAR_POOL 'POOL_NAME' "
		# # CODE # DATA_VIEW # Name_Of_idx_name 'idx' "
		# # CODE # DATA_VIEW # EXPR_Of_VAR_POOL_idx 'POOL_NAME' "idx"
		# # CODE DRIFT # expand %s_%s POOL NAME
		# # CODE_HEURISTIC PARSE %s_%s lhs rhs 
		# # CODE_HEURISTIC PARSE %s%s lhs rhs # # exact as (default)
		# # DRIFT default == " expanded "
		# # PARSER
		# # MATCH { lhs rhs } += { OPCODE lhs rhs COMMENT CODE_POINT }
		# # CODE_POINT #
		# # # GEN can put code here 
		# # # RUN handles all eval requests and hinted_actions 
		# # # CACHE provides MMAP HEAPS VARS SESSIONS
		# # # CACHE can be opaque under a locked_out API
		# # # CACHE_API provides viable API
		# # PARSER
	
	MMAP

	 SESS
	  USER
	   VERSIONED_FILES
	    VAR_FILE # elf SEGMENT use a C compiler to generate ROM elf.o
	     ELF_FILE
	     VAR_POOL
	     MMAP_FILE
	     MEM_SEGMENT
	     ELF_DATA_LOADER # FILTER = KNOW SEGMENT = STO_NBYTES 
	     ELF_CODE_LOADER # FILTER = provide_API_for CODE_LOADER -via- FILTER


	ELF

	 C
	  C++

	  	ELF_DATA_LOADER is actually an API SUBSET
		 SUBSET SECURITY_DATA_ONLY_IR_OK # _IR_DIALECT_ARM32_STO_CPU

		  LANG is going to generate a VIABLE_IR_CPU_DIALECT_MODULE

		  MODULE is MODULE # _to_  MODULE_to_RUN_EXPRS_ADDED


		   SAFE_CODE # PERMITTED_CODE # NOT_TRUSTED_IR_SCRIPT_DIALECT
		   SESS += { CODE DATA } # { DATA_INIT }
		   RO
		   RW
		   	the UDEF ZONE is RW but not X
			the UDEF_CODE is RW and only X as SCRIPTED_DATA
			# chmod += SCRIPT RUNNER on these SCRIPTS in SESS

		 MMAP file is itself am elf SEGMENT with multiple segments

		  SEGMENT == " SAFE_LOAD_a_SCRIPT_as_elf_SEGMENTS "
		  .SEGMENT{"UDEF_ONE"} == "UDEF_SCRIPT"
		  .SEGMENT{"%s %d"} == "UDEF" "N++" 
		  .SEGMENT.NAME == "UDEF_SCRIPT"
		  .SEGMENT.STO == "UDEF_DATA_ROM" # import ROM #
	ITEM 
	 ROM_VAL
	  # ELF_DATA_LOADER init_module load PRESET ROM_DATA load SESSION_DATA
	  # SESS_DATA == "SESS_VARS" # SESS_DATA_SESS_VARS_t # arg == "SESS_VARS"
	  # u64_WORD uses TOKENISED("SESS_VARS") 
	  # u8_u8_u16_u32
	  # u8_u8_u16_u32 u8_A u8_B u16_CD u32_EFGH # lohi byte order
	  # u16_CD_ZERO # means use TOKEN("u32_EFGH")
	  # u16_CD_NONZERO # OPTION # u48_payload # but_it_always_fits_in_u32
	  # eg_u24 # always_fits_in_u32 #
	  # so expect CD_ZERO #
	  # OPTION u8_u24 # where u8 == "ZERO" # "NON_ZERO" #
	 RAM_VAR
	 # ELF_DATA_LOADER # no real CPU access but uses UDEF as a CPU
	 # UDEF_SCRIPT # permitted for user to run on own RAM data
	 # USER WANTS ask_check EDIT ACCESS PERM # ACTIVE USE #
	 # PERMIT # ACTIVE_USE # ROM but editable # RW_MMAP_STO 

	MMAP

	 MMAP permits us to run a MINI machines 
	 MMAP + CACHE VARS SEGMENT MMAP_SEGMENT

	 MMAP permits a pick + MIX, a VFS layout
	 CACHE loads PAGES from ROM SESS_STO 
	 CACHE saves PAGES onto RAM SESS_STO 
	 VERSION SNAPSHOT_of_PAGES at date_edge
	 "EDGE" PREV CURR NEXT

	 let SESS run riot over its PAGES
	 write as many updates in the wrong order
	 sync upto the latest actual STATE == "CURR"
	 fork edge END {sync EDGE} {edge_END START_edge} {here} { ALIAS CURR }

	 for sanity, MMAP builds the SEGMENT
	 for SEGMENT it may simply call
	  _init0()
	  _init_UDEF({ C }) // C can do complex init loader
	  _init_UDEF({ SCRIPT }) // UDEF can ask for SYSTEM_JIT_SCRIPT_RUNNER
	  # SCRIPT_RUNNER # in a SAFE_BOX # via a limited API # onto own data
	  # KDB += KNOW_DB += INFER += DATA_STO += UDEF_LIBS
	  # CHECK = STEP for KDB to RUN_STEP # ARGS CTXT SESS ETC #
	  # KNOW that a new term can easily be added to ARGS #
	  # eg CPU_VAR = TEMP from EXPR 
	  # eg VAR = EXPR("RN_of_virtual_cpu_ARM32")
	  # eg VAR_NAME == "SESS.CTXT" # ALIAS SESS_CTXT # ALIAS "CTXT" #
	  # eg ELF_EXPR == "VERTION_KEPT_SNAPSHOT" # elf_SEGMENT_GROUP
	  # ie GROUP is a common FILE each has "anystr" name
	  # name_ALIAS_ASCII_name
	  # name_ALIAS_ANYSTR_VIA_idx
	  # name_ALIAS_ANYSTR_VIA_idx_name # ALIAS += detect DIALECT ALIAS
	  # name 



	 ROM_VAR


