2021-09-22 Sep Wed 20:38 # 46 # 

	YEAR/src/hidden/
	 SCRATCH_JS/
	  JS_%s

	   %s == "MP3" // JS_MP3 MODULE{''JS_%s'}

	    // GEN // modules_name = %s ; VFS_DIR "%s" ;
	    // ARG // VAR str0 module_name // "%s_%s" {

	     /*
	     	First %s parameter [0]
	     */
	     /*
	     	Second %s parameter [1]
	     */
	     /*
	     	PTR_r argv[argc] // argv of Object_t * PTR
	     */
// above is INIT_VAL document text[ node ] 
// below is MODULE DOCUMENT = LIST of LINES // LIST[ line_idx ] // 
// BENCH DOC[idx] // CODE "FILENAME{"DOC[%d] idx"} // DECL FILNAME FILE
// lookup( idx ) // Item_t & EA_Item_EXPR_DATA // SESS EA STO //
// lookup( PTR ) // Item_t & EA ; EXPR(LOCN,DATA) // Item_t & LOCN[idx]
// lookup( PTR ) // VAR LOCN += DATA
// decode PTR_u24_u8_and_u48_u16
// decode u48_u16_subset_u32_word
// Item_t & EA
// EXPR(LOCN,DATA) // Item_t & LOCN[idx] // DATA = u32 // SUBSET
// SUBSET // eg u32 SUBSET of u64
// BUILD_WORLD // first use is SUBSET // Item_t DOC; // LIST_of_LINES
// LIST_of_LINES // PARSER // TEXT = `FILE` // GETTER or API
// ARGV_DECODER argc == 2 ; argv = [ %s %s ] // ARGV[argc] //
// SCRIPT = HERE{ CODE_POINT PC } DATA{ int argc = PRESET }
// PRESET = { ... } INDENTED BLOCK // CODE_POINT_HERE //
// EA_EXPR { PC=CODE_POINT ; 
// NAME %s ASCII // LINK SELF ITEM NAME SPEC // STO = NAME = %s
// PTR = lookup( NAME ) // in CTXT in SESS // MACHINE.SESS.CTXT // MODULE %s
// EG %s == JS // SPELLING %s == "JS" // %s retains its own LEX magic // LANG
// LANG %s means '%s' means EXPLAIN // MODULE_NAME == %s // PARSER no Q2


     /*
	First %s parameter [0]
     */
     		argv[0] = "JS"; // COMMENT is CODE_POINT // VIEW_as_VIEW
     /*
	Second %s parameter [1]
     */
     		argv[0] = "MP3"; // VIEW as "%s == NAME ; NAME == STR0 "

		// note %s str0 // VAR STR0 = "MP3" // from ROM CONST STR0
		// note str0 MODULE_NAME_t // OBJ = lookup( STR0 )
		// ROM MP3 = "MP3" // VIEW of MP3 is as STR0 or str 
		// BASE_CLASS of MP3 is { STR0 NAME }
		// BASE_CLASS of MP3_t is OBJ{ STR0 & NAME; OBJ_t * OBJ }
		// MP3_t is a complex Object from SCRIPT // simple Item_t * PTR;
		// MP3 is STR0 MP3_VARNAME_VAL_t OBJ_t & OBJ = lookup( STR0 ) // GETTER
		// GETTER is a caching MEM VAR PTR API
		// GETTER SET uses STR0 == lookup( NAME ) //
		// GETTER COMPILED SET == KNOWN_VALUE // MACRO CONST varname SCRIPT
		// SCRIPT_as_DATA // %s_%s ARGV[2] // ARGV = [ "JS" "MP3" ]
		// LANG [ L I S T ] //
		// COMMA OPTIONAL LHS SEP RHS "[ " CRLF_INDENT " ,%s " " ]"
		// MERGE SP SP overlap without hesitation // PLUS
		// PLUS SP_LEX_EDGE // OVERLAPPING_GAPS
     /*
	PTR_r argv[argc] // argv of Object_t * PTR
     */

     		argc == 2 // triggers LANG MATCH OPCODE == // IMPORT OPERATORS
		// MATCH ROM_CONST int argc = 2; // WORD from BYTE or DECODE
		// DECODE KNOW { FRAGMENT } 
		// SERVER LEARNS COMPILE FRAGMENT CACHE BUILTIN OPCODE
		// PARSER LEARNS SCRIPT += well_known_phrase CODE DATA
		// SEGMENT = NEW_SEGMENT( CODE, DATA )
		// CODE = SEGMENT.CODE // AUTOGEN // BENCH += SEGMENT( idx )
		// DATA = SEGMENT.DATA // AUTOGEN // SESS += DATA for SCRIPT
		// CODE = SCRIPT // BENCH LEXICON PHRASE_BOOK
		// MODULE = GETTER.lookup( "MP3" ) // VIEW SP Q2 %s Q2 SP // 
		// SCRIPT_GEN += VIEW lookup "( " %s " %s)" 
		// SCRIPT_GEN //  VIEW LPAR SP Q2 %s Q2 ENDLEX SP RPAR ENDLEX
		// LEXEDGE // slides to next %s // 
		// MACRO EXPAND // PARSE matches MACRO // -for-
		// PARSE MATCH SP to skip_blanks() to KNOW lex_edge
		// KNOW varname("MP3") is well known VALUE "MP3" SUBLEX TOKEN
		// KNOW SUBLEX TOKEN // EA_EXPR TOKEN = ROM_TOKEN.lookup(STR0)
		// know PTR = STR0 
		// know PTR = OBJ_t & OBJ // API GETTER 
// ALTERNATIVE

		// CODE for ITEM // ARGV[argc] // MATCH argc==2 GETTER
		// MATCH ARGV "JS" "%s" // EG GETTER "%s_%s" // lookup:w


		static const // compiler PRESET STR0 PTR
		int argc = 2;
		char * argv[argc]; //
	
		// DATA for ITEM
		// argv[0] == "JS"
		// argv[1] == "%s"
		// argc == 2 // %s_%s // PTR = CODE_POINT + DATA
		// CODE_POINT STR0 ARGV[2]
		// STR0 is const char * STR0 == "VAR_NAME_SUBLEX"
		// MATCH STR0 as a very lightly wrapped const char * STR0_t
		// MATCH STR0_t as CODE{ module_name } // GETTER
		// MERGE CODE_POINT INDEXED_DATA_EXPR // FILE_LIST_of_LINES


		argv[0] == JS
		argv[1] == %s

		EXPR[idx_expr = lookup("%s_%s",ARGV) ] // DATA STR MACRO
		// MACRO NAME is a SUBLEX DECL %s { STR0_t ARGV }
		// MACRO_MAGIC NAME = "ARGV"; VALUE = EXPR{ CODE_POINT SESS_DATA ARGS }
		// REDUCE ARGS += FORGOTTEN
		// COMPILER KNOWS // lhs == "JS" // PRESET // STR0 // _t
		// RUNTIME NEEDS // rhs == rhs // %s //

		DECL TECH_NAME == "JS" // PRESET from compile SCRIPT
		// TECH is a sub_group MIXIN // MACRO WORLD
		// TECH JS_%s
		// TECH CXX_%s // ditto but with added group = sub_group
		// TECH_PARSER_%s // 
		// TECH_GEN %s // %s == module_name // compiler does
		// compiler knows fixed VALUE = TOKEN // VAR_NAME // OTHER
		// BENCH adds PSG += RULE // activated as ARGV 
		DECL MODULE_NAME == "MP3" // PRESET from compile SCRIPT

SUBSET u32 of u64
 SUBSET u32 SWITCH API == "u32_cpu" // _cpu = SWAPB( hilo ) _cpu = lohi
 ZZ
