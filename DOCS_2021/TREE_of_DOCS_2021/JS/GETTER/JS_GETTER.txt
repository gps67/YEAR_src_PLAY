TODO rewrite as prototype

toString()

	inst.toString = () => {
		return "computed string"
	}

get()

	inst = some_object_instance
	inst.field // get() // calls function

	Object.defineProperty(obj_inst, "field", {
	  get: () => { 
		return 'SOME_COMPUTED_field';
	}});

set(val)

	Object.defineProperty(obj_inst, "field", {

	  set: function(val) => { 
	  	// code
		// no return 
	}});


SYNTAX object initialiser

	myinst is the object
	its creation includes JSON initialiasers

	TODO: lookup "this" is run later or not ...

  const myinst = {
  	// HERE
  };

  const myinst = {
	tree_list:[],

	get N() { return tree_list.length } //,

	// note commas between JSON parts
	// set N(val) { error }
	// push // pop
  };

SYNTAX

	const myinst = {

	  set fieldname( value ) {
	   //
	  },

	  get fieldname() {
	    return "computed fieldname"
	  },

	  alistfield: []	// empty list

	} ;// myinst


	delete myinst.fieldname ;// deletes SETTER ?


SYNTAX arrow options

      get: function() { return "val" }
      get: () => { return "val" }

SYNTAX

	__defineGetter__("fieldname",func) // deprecated

JIT of static classes

	V8
	SM
	no jit

	JIT engines do like static classes, and their fields access,
	JIT wants the fields declared in the same order, to match

	so prototype can set all fields to NULL or [] or default

	derived classes have a secret-double-step over prototype logic
	at each obj.field lookup switch on obj.sorageclassorprototype


