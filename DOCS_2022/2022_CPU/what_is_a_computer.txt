what_is_a_computer.txt

	spreadsheet
	database
	networking
	audio video 
	drawing
	robotics

	stuff built from fragments of the above

	AI
	vision

what is a computer

	memory	// hold data data=MEM[ADDR] 
	DATA	// bytes ASCII float sound pixel_RGBA opcode symbols
	CPU	// read opcode run opcode repeat
	IO	// kbd screen disk network usb

	CHIPS	// it is all chips (except the motors speakers lenses ...)

A computer is dumb

	really mechanically stupid
	the CPU "brain" simply runs long list of really simple instruction

BIT STORE (part of a chip)

	Think of two NOT gates

		output of A is opposite of input of A
		output of B is opposite of input of B

		connect them in a circle
		double NOT NOT is a fixed pattern
		add a "force override" to switch it to the other state

		That is the basis, clever people have refined the best
		chip circuits, for massive memory storage on 1 chip, or
		or 8 chips, giving 64 bit memory modules, you can buy.

BYTE STORE
	
	8 memory bits in a row is a byte

	64 memory bits in a row is a long word

	just 1 bit repeated, with N wires

NAND - everything is built from nand circuits

	Except NOR-based chips. That technology is different,
	and prefers NOR logic. You can invert one to make the other.

	NAND(A,B) means NOT( AND(A,B) )

	AND(A,B) is TRUE when BOTH A AND B are true
	AND(A,B) is FALSE when EITHER A OR B is true

	The two above statements are intended to be exact opposites

	AND(A,B) is FALSE when EITHER A os true OR B is true
	AND(A,B) is TRUE when NOT( OR(A,B) )
	AND(A,B) is NOR( A, B )

	OR(A,B) is NAND(A,B) // go on prove it

	NOT( AND(A,B) ) is NOT( NOR(A,B) )
	# NOT NOT # is self cancelling
	NAND(A,B) is OR(A,B)

	NOT(A) is NOT( OR(A,A) )
	NOT(A) is NOR(A,A)
	NOT(A) is NOT( AND(A,A) )
	NOT(A) is NAND(A,A)

DECODE 1 bit ADDR

	This is a bit plain, OUTPUT = INPUT, a simple wire

	If you need to amplify or to protect, put a gate, possibly a NOT

	It is worth remembering that any signal can be inverted (NOT)
	and that many signals are already usable in their inverted form.
	EG SELECT_WHEN_LOW is common, SELECT_WHEN_HIGH is human
	There are logic computers that can build inverted circuits
	using the minimum number of transistors, by making the
	mirror image work correctly, and seeing what the output feeds,
	and making that accept the inverted signal, or NOT it.

	Each transistor GATE is a drain on delays, on heat and energy

DECODE 2 bit ADDR

	2 wires in { A B }
	4 wires out { P Q R S }

	A B | P Q R S
	----+--------
	0 0 | 0 1 1 1
	0 1 | 1 0 1 1
	1 0 | 1 1 0 1
	1 1 | 1 1 1 0

DECODE 3 bit ADDR to 8 select lines

	Only 1 line is selected

DECODE 4 bit ADDR

	Simply wire a pair of 2-to-4 as a grid 4x4

	every cell waits of ROW-AND_COL both SET // or inverted opposite


	providing the correct address, (eg 4 bit)
	Selects a single memory cell (1-of-16)

	All the other cells, and their outer wrappers, go quiet

RD and WR - read and write

	We need an extra pin, to tell memory to RD or WR

	RD = read data from
	WR = write data to

DELAY and SELECT

	electronic switches take time to take effect
	whilst changing all sorts of nonsense can happen

	So we apply the correct ADDR, and DATA, and RD/WR
	give the DECODER time to work,
	then pulse the SEL pin

	The individual BYTE of memory then activates,
	It takes the new DATA or gives it's old DATA

	That also takes a fraction of a moment,
	so the outside SAMPLES the result,
	then releases the SEL, then the other lines

RAM bit 
ROM bit
FLASH bit

	The above describes a RAM bit (as part of a BYTE or WORD).

	A flash bit, is much the same, but it "burns" the data,
	to memorise it, even when the power is off.

	That is clever technology, and probably uses an ERASE method,
	where a long cycle time (still V-fast), clears any 1 bit,
	and a WRITE_1 cycle, a fraction faster, that stores a 1
	permanently. It is all built-in to your USB stick's chips.

	A ROM bit is probably a FLASH, as noone can afford the entire
	factory, to save a buggy program, that needs to be updated anyway,
	but small fixed decoders, can be built from ROM memory. They are simply
	wired HIGH or LOW, with no WR capability, no back-to-back NOR loop,
	just address decoders, and SEL.

MEMORY

	16GB as 2Gx64bit
	probably a pair of DIMMS - dual inline memory modules

	Most older laptops only go to 4GB, some 8 some 16.
	They all have pairs of DIMMS, with specific clock speeds

	I usually think of memory as BYTES. The machine does too.

	I also think of memory as aligned 8-byte words.

	I often think of 4-byte words, which was true for 32 bit machines.
	but these days there are 2 words in a word.

	Occasionally thinking about how memory is aligned,
	and using words not bytes, makes a big performance gain.

	When you use an opcode to write a byte,
	the CPU reads 8 bytes, modifies one, and write all 8 back.

	Dont worry about this, the cache does this ultra quickly,
	and defers all writes, combining multiple writes into one.

	Even when your CPU uses 64 bit memory words, it still computes
	addresses as if 8 bit bytes. All modern computers are doing this.

	Massive long line of bytes 

		u8 memory[u64_ADDR]

	A small secret, is that Intel uses a few addressing modes,
	and the most common look like this:

		 EIGHT_t ARRAY_BASE[idx] 

		 u64_register ARRAY_BASE = u64_register address of array
		 u64_register i64_idx = u64 register of index of array item
		 u8_idx u16_idx u32_idx i8_udx i16_idx i32_idx = also avail

		 EIGHT_t is any 8 byte struct or 8 byte word
		 FOUR_t is also directly supported
		 PAIR_t also
		 BYTE_t is also good

		 OFFS_pre /* const */ is good for when ARRAY starts after offs
		 OFFS_adj /* const */ is good for u6 within EIGHT
		 OFFS = OFFS_pre + OFFS_adj /* const */ 

		 OFFS_adj is also good for when EIGHT_t is really several
		 The allocated IDX is then kludged, but the OFFS_adj
		 can pick out fields within that larger_than_EIGHT

		 This is good for when you want to store u3 in u8

SUPER MAD TRICK u64 = 48 + u16

	Apart from a few, ultra enormous chips, all modern chips
	only support 48 bit addresses. They even publish this!

	ARM_64 only uses 48 bits. INTEL_64 only uses 48 bit addresses.
	NB this is ADDR not DATA. That is still 64-bit (if not 32bit).

	That leaves 16 bits for whatever you want.
	Those 2 bytes might tell you the TYPE of the u48_PTR
	Maybe even PTR = EXTRA_CALC( u48, u8_A, u8_B ) # ASM of course

	Actually the docs say those 16 must be all-zero or all-one,
	but the trick clears them, as part of the trick.

	If you use the 2 bytes or 16 bits, eg as class-decoders,
	or as bounds checkers, it makes sense to have them in the 
	LOW bits, where they are AL AH AX

	To get the u48 siply shift the word 16 bits to the right.
	That will fill with zeros, to fill with 1's RTFM ASM

	That shift takes 1 clock cycle


SYMBOLS

	This can be stuplidly simple or unfathomably magic.

	Basically the power of naming something.

	Suppose someone thinks of a complex concept,
	so advanced, it is even wrong. You can convey that entirely,
	simply by giving it a name "MY_MAD_THEORY_v7"

	You can store that in a computer by giving that symbol
	a number. You do have to plan out how many symbols you will have.

	You can also store that as a string "name". Some systems use quotes,
	some use hash-tag #name for symbols

	Not you can hold it, pass it around, pick it from a list, 
	add annotations to it, add it to other things.

enum symbols

	enum direction_token {
		e_North,
		e_East,
		e_South,
		e_West,
	};



