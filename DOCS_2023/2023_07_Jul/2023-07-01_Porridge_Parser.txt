	2023-07-01

	2023_07_Jul
	2023-07-01_Porridge_Parser.txt

CXX is a reasanable scope
but CMNT and CXX in CMNT isn't

every SPELLING is NOT a reserved word,

	not at CT
	yes at RT

LEXER and SUBLEX need to be different

	I dont want YACC, but I need YACC

	PSG may be good enough,
	but require a YACC fix for everything

	STR0 SPELLING = lookup STR

	PTR OBJECT = lookup SPELLING in SCOPE
	PTR OBJECT = tokenise SPELLING in SCRIPT 

	stray_word = could_also_be_cident

DECODE u32 is the real target
GEN_TEXT to
PARSE_STREAM to
GEN_OPCODE to
DECODE OPCODE_u32

	RPC via BATCH SCRIPT PARSER
	PRE_GEN
	API invoke MACROS

	also uses
		PTR on_event_set_to = NULL;
		if( PTR on_event_set_to ) {
			CALL PTR maybe with PTR->CALL_ME_WHEN( want_API )
			// WHEN = CALL on_EVENT // NOW with CURR data
			// WHEN = EDIT_get_SPEC //
			// WHEN = CALL_get_SPEC //
		}

 TREE of ARGS 
  each LEAF || NODE || TREE || LEAF_that_returns_TREE // invoke_MACRO

 CALL_SCRIPT
  uses TREE of NODE and TWIG and LEAF

  define a load of AVAR
  call various USE_GET_SET_EA angles

  CT_RT NAME=="VAR_NAME" SPEC=="VAR_SPEC" DATA="VAR_DATA"
  CT_RT VAR_NAME == "NAME var_SPEC_NAME == "SPEC" var_DATA_name == "VAR_DATA"
  CT_RT ways of having consistent API, then GEN from setting

  	FIELD.GET_VAL( &RET_VAL )
  	FIELD.GET_VAR( &RET_VAR )
  	FIELD.SET_VAL( &RET_VAL, &NEW_VAL_in_temp_VAR )
  	FIELD.GET_SPEC( &RET_SPEC )
	FIELD.CALL_EXPR( ARGS )
	FIELD.CALL_EXPR( ARGV ) // CMNT CTXT SESS ...

 DECL SPEC

 	item types
	function prototypes
	module DECL
	CODE from basics up

 EVAL_EXPR

 CALL_CODE

 SAVE_DATA

 SEND_DATA

 READ_DATA ... PARSE_PHRASE

TEXT_WORD = might_be_cident99 in MODULE.SPELLING_POOL 
TEXT_WORD = PUNCT_WORD_PUNCT "abc stop." (etc) 
TEXT_WORD += PUNCT -> . [] { } ( ) ; ; Q1 Q2 QB 

Promote LEXER to PSG layer

	%s_%s

MATCH SPELLING = lookup("STR") // HINT in SPELLING of MODULE of LOADED MOD PLUS

	MATCH SUB_LEX_FRAGMENTS_BETWEEN_CAP1_and_DASHES_switching_LOWER
	MATCH cident_from_phrase // possibly via CT_TOKEN_x1234
	SPLIT_SUBLEX_on_UNDERLINE

BUILD MODULE
PARSE MODULE

	CXX is modula2 but { TYPE NAME } = INIT_EXPR
	MODULE is list of DECL
	STEP is DECL_STEP in FUNC_DECL
	OPCODE is tokenised MINI_MACHINE
	OPCODE is tokenised MAXI_MACHINE

DRAW_SUBSET

	STRUCT
	UNION
	ARRAY
	FLAGS
	REF_PTR
	ALIAS // CT // RT //
	REGISTER
	STEP
	SEMI_STEP_in_ACTION

	DRAW_STMT
		REPLAY STEP with ADJUST
	
	BENCH DIAG = debug zone
	BENCH TEST += TEST_DATA
	BENCH GEN -out-> PDF, SVG, ES5, ESX, PY_LINE, TCL_STEP, ARGS, CXX, JS

	BENCH GEN ARM32 from "{ DECODE u32_u32 }"
	NB align u64 meants pair of u32, often NULL
	OPCODE u8_x00 is NOOP32
	OPCODE u8_x00 is NOOP64 when doubled up all 00

	u3_group
	u5_item

		group[ REGISTER_group ] item[ REGISTER_in_group ]

DRAW_STREAM BYTES_of_vary_SEQS

	u8
	u8_u8
	u8_u8_u8
	u8_u8_u8_u8

AW_STREAM WORDS of u32

	u32
	u32_u32 pair od two steps
	u32_u32 step_and_data
	u32_u32 u32_u32 step_and_data // aligned 64

AW_STREAM WORDS of u32_u32
AW_STREAM WORDS of u16_u48
AW_STREAM WORDS of u16_u16_u32 // lose u16 for ARM32 FUTURE if not u16_ZERO
AW_STREAM WORDS of u8_u8_u16_u32 // PREOPER DECODER with CT hooks OPTIMS
AW_STREAM WORDS of u16_u32 // lose u16 for ARM32 FUTURE if not u16_ZERO

	if( u16_BITFIELD_u16 ) // avoid i16 because u32 in u64
	// might not be so easy // ignore_i16 for now // ignore u16 // must 0x00



