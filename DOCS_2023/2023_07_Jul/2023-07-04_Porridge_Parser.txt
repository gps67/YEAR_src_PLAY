	2023-07-04

	2023_07_Jul
	2023-07-04_Porridge_Parser.txt

TODO (competes adjusts mergers )

	Tcl needs libs_apps to do DIR (so does libs_apps)
	Py needs SPIN SPOUT

Tcl uses libs_apps

	get_DIR
		return serialised STRUCT as serialised { NAME VALUE } pairs
		optimise to a flattened list, that only needs 2 WORDS 
	
	flat_list { N1 V1 N2 V2 NAME VALUE N4 V4 }

	flat_list <--> struct { set V { L I S T } } 
	flat_list <--> var_pool { ... VAR_NAME VAR_VALUE ... }

	ARRAY_LIST 
	 SPELLING_POOL { NAME == VALUE }
	 TEXT_HELD 
	  CIDENT99
	  ANYSTR # but needs to be PARSED out of STREAM
	  MULTI_PART_WORD
	  PUNCT_WORD { Q1 Q2 BQ BACKSLASH L_SQUARE_BRACKET_R L_ROUND_BRACKET }
	  PUNCT PUNCT(")") // "str0" so that UTF8 chars, and multi-char "<<"
	  PUNCT PHRASE( Q1 %s ! SP )
	   notice SP is LEX_EDGE SP_OUTSIDE_WORD_sort_of_inferred
	   parse SP in list of fragments

	Tcl provides WATCH_VAR on_READ on_WRITE on_EA_USE

Py uses C++

	OPTIMISED so that converting OBJECT_PY OBJECT_CXX means add_offset

		Py_Object is a field of CXX_Object

		C++ pokes a VTBL ahead of first field,
		shifting that to OFSS == second field

		Optimiser still has to add an offset +8
		Optimiser tested to always use CODE_VECTOR
	
	CODE_VECTOR convert PY from CXX
	CODE_VECTOR convert CXX from PY

		Optimiser task is to remove function call to inline
		GXX demonstrates it with HTON(u32_liho)

	CODE_VECTOR

		ideal for single stepping well crafted example data

		on_READ
		on_WRITE # into var_CACHE_sto
		on_EA

		UDEF_Py_from_CXX( CXX ) {
			
			CALL INLINE_Py_from_CXX( CXX )
		}

		UDEF_CXX_from_Py( Py ) {
			
			CALL INLINE_CXX_from_Py( Py ) {
		}

 !
  SCRIPT knowingly does not declare RET_TYPE RET_VAR and RET_VALS

  	this is a HINT that there is more than one RET VAL

		RET_VAL of AUTO RET_TYPE
		THROW means FAIL
		ERR_STRUCT from THROW or FAIL or maybe WARN
		in maybe_WARN the ERROR_STRUCT says might mean simple NO

 RET_VAL += ERROR_STRUCT

 	assembler might use SI_DI text direction as a UDER exception flag

		needs to know when ARITH triggers eg OVERFLOW flag
		needs to know when LIBR expects eg TEXT_DIRECTION flag
		needs to know how CPU leaves C_FLAG Z_FLAG V_FLAG DIR_FLAG
	
	simulator might give in and simply have a CPU_STRUCT_field

		CPU.is_THROW # am in a THROW state # in an exception

			ASM "{ CPU_SIMUL.flags_word_2 flag_state ' DIR ' }"
	
	FUNCTION_RETURN

		is_OK

			RET_VAR == "A"
			RET_TYPE == "WORD_SPEC_FROM_COMPILER"

		is_RECALL

			RET_VAR == "CALL_RECALL_WHICH_SETS_RET_VAR"
			RECALL == "E_EINTR" call syscall again
			RECALL == "E_WOULD_BLOCK" call again later ...
			RECALL == "SIMUL" call is_SIMUL

		is_SIMUL

			folded inside above to reduce inline complexity
			but after is_OK CALL a function (usually)

		is_THROW

			REALLY_is_THROW

				if is_THROW is from a called function
				 expect do_THROW already first reported it

				presume first THROW reported itself

				on_FAIL_FAILED

					PUSH BACK_TRACK_STACK CURR 
						filename
						functname
						linenumber
						byte_in_line

					MENTION 
						VAR2 == VALUE2
					INTERPRET
						file_not_found
						nonstarter
						 FAIL is NONSTARTED ACTION

			REALLY_is_FIXABLE

				file permission mod += USER

			REALLY_is_IGNORABLE

				absent OPTIONAL file





	
	ERROR_STRUCT

		NOT_is_THROW return is_OK
		is_OK
		is_THROW

		ARG1 == "filename_that_failed"
		CODE_POINT == "{ CXX CODE_POINT XPOS }" // half list half STRUCT
		CODE_POINT == "{ LANG CXX SCRIPTFILE filename LINE %d XPOS %s }"

		PARSE_MATCH half_list_half_STRUCT

			has ... ARGX ... in TUPLO
			has ... NAME ARGX ... in TUPLO

			ARGX == idx_of_ARG_in_LIST

			NAME == CT_KNOWS_SPEC("NAME") // CT functions called

		is_REPORTED
			has USER holding CANCEL button
		is_RECOVERING
			has AUTO skipping failed transaction
			keeps LOG
			redoes TRANSACTION later or NOW with attempt FIXES
			PICK best FIX
			RUN crafty SAMPLE DATA == PRE_GEN cache NULL || VALUE
		is_TRANSPARENT
			is_THROW is being used for nefarious DGB TRACK stepping
			eg VIRTUAL VARS in remote DB 
			so after some CODE fixes the un_THROWN DATA
			is_OK returns from function with correct STACK
			is_THROW needs to accept being used like that
 LEARNING CODE ROUTES

 	Crafted data, pushes MACROS through all paths

		EARLY detect ( P22 == NULL ) meaning SKIP OPTIONAL CALL_P22

		WEIGHT 
		 eg COST of 4 CPU cycles
		 eg COST of 4 MEM words
		 eg RARE event
		 eg MOST have [1[N few have 0 few 80 < N // long line
		 eg u4 u7 u8 u12 u15 u16 u23 u24 u31 u32 u47 u48 u63 u64

		COUNT
		 WEIGHT
		  eg DECODE i48 from i64_is_LOHI_u16_i48
		  so shift i64_WORD >> 16 to get i48 and FLAGS
		  if FLAGS_ZERO
		  if FLAGS_MINUS
		  SO FLAGS_PLUS // and_non_zero

		  	POSITIVE means ZERO or PLUS
			PLUS means ONE_or_MORE
			MINUS means MINUS
			MINUS_ONE means M1
			 M1 M2 M3 M4 // limited test M4
			 M1 M2 M3 ... M7 ... M15 ...M8 M128 M32K 

	MACRO ASM TEST M4 // KNOWING not is_ZERO not is_PLUS is_MINUS

		TEMP // AUTO_DROP // FADE FORGET_and_FADE //
		ADD 4
		is is_MINUS { was_MINUS }
			# was not M1
		if not_MINUS { was M1 M2 M3 M4 } 
			# was_M1_or_M2 or_M3 or ...
			# DEBUG # was not really is_MINUS before
		if is_ZERO { was_M4 }
			# OPTIONAL optimisation
			# no cost is unsed
			# cost JUMP_if_ZERO_to_DEST # options PICK
			# cost MEM and CLOCKS

	WRAP ASM

		AUTO reword JUMP if NOT FLAGS
		AUTO route BRANCHES
		AUTO weigh cost of PICK FAST_TRACK else KLUDGE
		KLUDE UNDO_previous PRE_DONE and GOTO_as_you_might_exect+it

			JUMP_if_FLAGS _to_KLUDE
			... STAY ...

			END

			_KLUDGE
			 added_UNDO_CODE_HERE
			 	because OPTIMISER thought it was easier this PICK
				decr P1++ or POP P1 from _P1_KEPT

			 CODE_you_expected

			 	CODE_you_WROTE

				then RETURN or GOTO_NEXT


