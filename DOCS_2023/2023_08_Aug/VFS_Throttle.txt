VFS_Throttle.txt

	Whilst BATCH sending MEDIA over NET into VFS_ITEM_LIST

		measure the throughput
		detect other users of LAN
		reduce KPS whilst expensive // 

		DELAY to RATE // WAIT_HERE for SCRIPT SCHEDULER //
		BOTH_ENDS use DELAY_DETECT use ROUD_TRIP_DELAYS 
		EG when RTT is HZ_10 // tolerable to type to
		EG when RTT is SEC_ONE // slow_coach_response_time once
		MONITOR ROUND_TRIP_TIMES _response_times _RTT_API
		API says REQUEST ALLOCATED RUNTIME // PRE_BOOKED_PACKETS
		API get "VAR_NAME" // BENCH puts VAR on WALL or PANEL
		API VAR on PANEL

	API

		SLEEP_for_10HZ 

			send next PACKET
	API

		SLEEP_for_10HZ 

			calc T2 = SEND_NEXT_PACKET_AT_T2

				RTT_operator measures KPS
				RTT computes KPS T2 of next packet

				delay = 1/HZ
				T2 = T1 + delay

				delay = T2 - T1
				delay = T2 - T_NOW
				RATE_sleep( delay )
	
	API

		PKT_IN and mid print via FILTER which is a QUEUE
	
	API

		FLOW += PKT_IN

			prepare request
			sleep upto send
			check_world_again
				RTT_EVENT += "TIME_of_XMIT_is_NOW"
				RTT_ENV += "TIME_of_XMIT"
				RTT_EXPR += "NOW" // recognise and GET nearest
				RTT_EXPR += "CODE_POINT"
			send_now += RTT_EVENT


	API

		API PRE_SEND_PACKET

			already have it at both ends of NET link API

			ROM provides SCRIPT XPOS FD NET_API_of_a_LINK
			LINK provides a REMOTE via FD == "LINK"
			LINK provides a REMOTE via LINK == "FD"
			// SCRIPT PARSER // DETECTS MACRO DECL_PAIR
			LINK.NET.FD "LINK" // DECL_PAIR // AI guesses here
			LINK.NET.FD SCRIPTED_REMOTE_STATE 

			OUTPUT += STR0 // FILTER prettyprint to SCRIPT //
			-----
			 above is MACRO_CALL 
			 below_is_MACRO_OUTPUT
			 // MATCH "STR0" // MATCH STR0
			 // MATCH STR0 // MATCH VAR_TWO // _or_EXPR
			-----
			STREAM += OUTPUT 
			OUTPUT += STR0 // FILTER prettyprint to SCRIPT //

		API FORK PKT DATA through CRC // SHA1 BITS_180 BYTES_20 WORDS_5

			Every XPOS has a SHA1_so_FAR

				but not CALLED for

			Every SCRIPT_LINE has an XPOS

				SHA1_here not needed
				if necessary CALC SHA1 of TEXT_UPTO_XPOS
				if exported CALC SHA1 of TEXT_UPTO_XPOS

					XPOS = lookup( SHA1 ) of script so far
					XPOS = { FILE LINE XPOS PLUS }

					PLUS += MK_from_BENCH even unmentioned

			Every CSR has an XPOS

				{ FILE LINE XPOS ... }

				TREE_where_CSR_is

					TREE_ROOT
					TREE_LOCN
					TREE_CSR
					ALSO_VARS

				TREE of CODE

					LIBR in MODULE 

					MODULE can have any layout of VAR_POOLS
					DECLARED as AUTO_AVAIL
					FIELDNAME is sensitive TOKEN

				TREE of DATA

					OBJ_t == "VAR_NAME_t"
					OBJ = "VAR_NAME"

					strange lang where complex objects
					reduce to simply any unique ASCII name

					specific_extension_for_UTF8

					 AUTO_HELP_HEURISTIC

						SWITCH OFF - FILTER DOES
						SWITCH OFF - OPCODE_OFF
						SWITCH NOW - FILTER EDGE

				LEX_EDGE
				PSG_EDGE

				Phrase

					SCRIPT += PHRASE
					// tells API to GEN code for VARNAME
					// tells API to USE code for VARNAME

					PHRASE += XPOS ARGV CMNT 
					PHRASE += PARSER XPOS ARGV CMNT ...

					XPOS += PARSER_XPOS // FILE LINE BYTE_POS
					// limit 255 then share limit // M1 M2


				PSG  
				 STMT
				  S1 == "Phrase"

				  	BENCH replaces STR0 with BIND

					BENCH BIND STR0 fieldname

					Phrase == "EXPR" // EXPR == STR0 // THIS

					Phrase == "P0P2" // STR0 = fetch_ ...

COMPLEX object replaced by STR0

	can use TYPE_NAME as VAR_NAME
	can AUTO_GEN("%s_t") NAME // NAME == "CIDENT" 

SCRIPT often refers to COMPLEX object by STR0

	FILTER CHECK a1_a2_star looks ASCII

	STR0 == "IDENT"
	STR0 == "VAR_NAME"
	STR0 == "ANYSTR"
	STR0 == "STR0"
	STR0 == "%s"
	STR0 == "CAP1"
	STR0 == "lex_chain"
	STR0 == "camelCase"
	STR0 == "DIALECT %s" // KNOW "{ DIALECT %s }" and recognise similar

BIND "{ ITEM_t ITEM }" to "REMOTE ITEM"

	VAR will be "VAR" will be cident99 _OR

		CVAR	cident99
		CVAR	cident99 // VAR("cident99_or_CLOSE") // CSET AUTO_DETCT

		CVAR	cident99_PLUS // almost any utf8 goes // is_GLYPH //
			// is_GLYPH is_CTRL is GAP is_a1_a2_star _which //
			// ROM CODE introduces CODE_POINT XPOS is_a1_a2_star
			// _which introduces DATA and CODE for a1 for a2_star
			// PARSER // TRAIL a1_a2_star // following GAP //

		shell_script_var cident99_MOST

		file_name cident99 // even though filesystem can use CSET_API
		// we limit our VFS usage to ASCII_PLUS_LATIN_UTF8 
		// AUTO_FILTER if cident_strict gen "TOKEN" as ALIAS {...}





current situation is an axample
this disk is freezing full, on the bleeding edge of disk_full_chaos
code fail is bizarre - somehow it got through the RET_VAL == OK else errno
adding media to media store to release from Laptop
sha1_processing them_for_luck


LOGS - FIRST_FAIL RET_VAL_FAILE // VAL +== "FAILED" // UDEF_OPCODE "+=="
FAIL - errno from Linux Kernel 
FAIL - errno_net from TCP_provider // SSL // optional UDP // here rejoined
WAIT - errno-net_from_KPS_provider // UNIT += KPS EXPR == "KPS" // attach_here

FIND MATCH EXACT // invoke MACRO proocessor_for_MINI_MACHINE // FILTER_ACTION //

	FILTER_MATCH
		remove ORIGINAL
		replace with FILTERED
	
	EXACT_MATCH
		input Phrase 
		local CTXT SESS
		API_avail 
	
	FILTER_RENAME
		"local" "local_xFF" // add suffix++ until TOKEN_CLAIMABLE 
	
	CLAIM TOKEN "local_xDF"
		MENTION NEW_VAR "%s" cident99_proper_a1_a2_star
		NEW_VAR "cident99_proper_a1_a2_star" // STR0 is NAME
		NEW_VAR cident99_proper_a1_a2_star // "{ STR0 IDENT VAR_NAME }"


	INFER - BENCH glues RULE_FOUND to the WALL 

	Wiring on the Wall

		Mention CAP1 as VAR_NAME AUTO_MK_VAR

			"Wiring"

				NEW LOCAL var_name "%s"
				Q2 SETTINGS CAP1_CODE_POINT
					CSET == "utf8"
					LANG == "ACCESS_VIA_SESS"
					
				LEXPECT a1_a2_star // LEXPECT base_name
					PLAINER_NAME CAP1 usually

				THIS is a VAR_NAME
				"THIS" is a VAR_NAME
				"STR0" is a VAR_NAME
				"ANYSTR" is a VAR_NAME
	# ENCODE SCRIPT as repeat DECL for varyong ATTR
	# repeat using ALIAS
	# repeat using ALIAS PLUS # RGV

		BENCH create a LIST of ITEMS under heading "%s"
		NEW ITEM "ALIAS" 
		ADD ITEM INIT_SCRIPT
		ADD ITEM CMD
		ADD ITEM ARGV // NEWS: ARGV now means SCRIPT // also STR0_TOKENISABLE
		ADD ITEM ALIAS // then connect to EXPR _RHS
		// MENTION "EXPR" causes MK_VAR "%{cident99}s" { EXPR_t EXPR }
		// OPTIMISE MERGE new_EXPR with outer wrapper_providing_EXPR
		// OPTIMISE "EXPR" used so often, merge with a provided one
		// CODE omit _t because DIALECT "MY_TEXT_ARGV_TEXT_SCRIPT"
		// CODE omit _t because DIALECT "MY_VARNAME_EXPR"
		MENTION "STR0" and it probably is AUTO_VAR of ITEM_in_VAR_POOL
		"STR0" is "ANYSTR" // SOMETIMES // WHEN // HERE and_HERE
		MENTION "HERE" and AUTO_MK_VAR "HERE" 
		VALIDATED_CSET_cident99 // utf8_latin utf8_ceryllic


					_FROM_SESS"

FAIL - errno_ssl from TLS_provider
WARN
PASS - grain_is_MAIN_TASK_DONE 
