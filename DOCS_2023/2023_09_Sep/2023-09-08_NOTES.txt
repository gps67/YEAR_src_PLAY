	2023-09-08

	2023_09_Sep
	2023-09-08_NOTES.txt

PARK
BENCH 

 Name

 	2023-09-04_DrumCamp_Pandeiro.txt

 LOCN

 	/home/gps/YEAR/src/GITS/hidden/DRUM_GIT/DrumCamp_2023


 	not_online_t PRIV = "/home/gps/YEAR/src/GITS/hidden/DRUM_GIT/DrumCamp_2023/" // IS_A_DIR // CONTENTS += { TEMPLATE ARGS }
	// CONTENTS += { TEMPLATE ARGS } // STR0_line_t line_as_STR0 == INIT_VAL
	// USAGE using operator== as lookup in DIALECT //

 DIAG

 	TEMPLATE += Layout layout == SCRIPT
	USAGE GEN.phrase.variant.adjusted 
	USAGE GEN.RT.SPEC_ITEM_PAIR CODE ARGS 
	RETRO REPEAT LEX = "{USAGE}" // use of str0 val src // COMPILER ...

 DIAG += COMPONENT("{USE}") ALIAS("{LEX}") 
 DECL += STR0_name

 /* first found adds "OWN_WORLD" concept ; goes a bit far */
 /* TITLE is EA is CT not RT */ // except by CODE_HERE_is_HERE //
 /* first line is ASIF TEXT */
 /*
 	SCRIPT GIZZARDS

 
		/* first line is ASIF TEXT */
	
		/* OPTIONAL_NECK_OF_LINES */

			LIST += " { DECL LHS RHS PLUS } "
			AUTO += " /* LIST */ ITEM_TYPE "
			AUTO += " /* VAR_NAME */ "
			AUTO += " /* VAR_NAME VAR_VALUE */ "

		DIALECT { ... HERE ... }

			DECL += "{ SPEC NAME EA_EXPR CACHE ACCESS PERMIT LOCK }"

			AUTO obtain VAR_NAME == "LOCK"
			AUTO obtain VAR_SPEC == "SPEC_xFFFF""
			AUTO obtain VAR_VALUE == "LOCK"

			CODE does lookup of "SPEC_xFFFF"
			and seriously consideres rewriting it as

			printf LOCK_x%04X IDX_of_LOCK // LOCK_1234

			Enact a series of SCRIPT steps
			COMPILE SCRIPT to CXX to C_LIB 

				FORMAL ATTRS for DIALECT
				ITEM += HINT ATTR

				YOUR { C LIB } is better
				BUILD API

				 API += FEATURE
				 API += VAR("NAME")
				 CODE += API_of_VARS
				 API_of_VARS += SESS_HERE += RW_STO
				 API_of_VARS += SESS_HERE += RO_ROM // ROM_STO
				 API_of_ASPECT // C++ multiple inherit //
				 API_of_ASPECT // CXX repeat multiple inherit //
				 API += GEN_C_for_API // API += CXX_over_C

		DIALECT OBJECT_MODEL

			ASM_C 
				BENCH.VAR = EXPR_OBJ // OBJ_EXPR // VIEW_TONE

			ASM_C_CXX

				GEN ASM_C
				GEN gcc_ASM_C

			COMPILE

				CXX -> ASM_C -> GEN_GCC -> RT_CT

			LOGIC

				RT_CT += CT_KNOW KNOW ...
				RT_CT += CODE DATA LOCN CSR
				DIALECT += "AUTO MK_VAR on mention at XPOS"
				XPOS += "{ FILE LINE CPOS }"
				TABLES += SEEK_of_LINE_HERE
				PARSE VAR_NAME AUTO_SPLIT ARGS TEMPLATE VARS
				RT VAR_POOL is fast enough for CT_VAR_with_EA
				RT EA == "EA_XPOS"

			LOGIC CPOS

				CPOS is offset from BOLN in bytes

				Hopefully that parses well into UTF8 or UDEF

				SEEK = SEEK_BOLN + CPOS_bytes_offs

					CPOS invoked without PEER
					_bytes_offs is ALIAS XPOS_NAME

				GEN CODE ; CODE += CODE ;

			DIALEXT NAME is VARNAME and SPECNAME

				"{ CODE_t CODE }"
				EA_THIS == EA("%s") // UNIVERSAL RULE
				EA_THIS == EA("THIS") // UNIVERSAL RULE
				EA_THIS == EA("HERE") // UNIVERSAL RULE
				EA_THIS == EA("ALIAS") // UNIVERSAL RULE

	In general we assume ALIAS is a unique distinct item
	In general we assume ALIAS can vary between LIST with CODE and VARS
	In general we assume ALIAS is "STR0"

	COMPILER sees that as a trigger word. 
	COMPILER knows that USAGE as word INVOKES USAGE("WORD")
	COMPILER knows that USAGE is per item sub_zone

		was LOCK
		now "LOCK_%02X"
	
	AUTO_PARSE printf_fmt_command_line

		allow missing parameter // particularly IDX_ITEM
		"%s_xFF"
		"%s_x%02X"
		"%02X" // expects idx_t LOCK_21 // BENCH i16 for u12 || M1
	
	u16_M1
	u12_M1
	u12_M1_as_u16 // DEFAULT uns KNOWN PLUS or POSS_ZERO // DIALECT ON_ZERO
	i12_M1_as_i16 // DEFAULT we want to quickly detect M1 so SIGNED
	i12_M1_as_u16_BITFIELD // unused not implemented // PARK here NOOP

	DECODE MODEL of i12_M1

		OBTAIN_TEST_of_i16 // specifically SIGNED from there
		OBTAIN_FULL_of_i16 // i12 to i16 to i64 FULL REGISTER WORD
		TEST SAYS 
		 is_zero {
		 	GEN GOTO IS_ZERO
		 }
		 is_plus_plus {
		 	exec is_plus
		 }
		 is_plus = SCRIPT_PROVIDES {
		 	GEN GOTO IS_PLUS
		 }
		 DECODE(" M5 M4 M3 M2 M1 ZERO PLUS ") {
		 	CALL CT PARSE LINE of CIDENT // TOKEN LIST
			EACH TOKEN in TOKEN_LIST {
				MENTION %s // STR0 // TOKEN // AUTO_KNOW_THAT 
				VALUE -5
				NAME M5 // GEN "VAL" as VAL so actually VAR("VAL"
				NAME M5 // PARSE ANYSTR as PARSE cident99
				NAME M5 ALL_CAPS "M%d" // DECIMAL single digit
				SPEC is_a_TOKEN bound to MINI_MACHINE _idx

				BIND NAME TOKEN SPELLING EXPR UDEF
	
	MINI_MACHINE is a fixed thing that can do anything and nothing
	SAND_BOXED CODE uses CPU and MEM within QUOTA // on_a_good_day //
	API_CALLABLE - we require it to FAKE CACHED over REMOTE
	API_VECTOR VIRTUAL CXX_FUNCTION PROTOTYPE

		PROTOTYPE re- aquires pre- aquires FUNC_NAME RET_VAL_SPEC

	SCRIPT ALIAS "RETVAL" "RET_VAL"
	SCRIPT ALIAS "RET_VAL" "RET_VAL_SPEC" // SPEC_and_DATA // "PAIR"
	CT uses "RT { SPEC DATA }"
	CT uses RT "{ SPEC DATA }"

		PARSER can take out ARGV_ZERO
		PARSER DOES produce "{ LHS RHS }"
		PAIR += DATA_POINT
		PAIR += SPEC_POINT
		PAIR += CODE_POINT
		PAIR += UDEF_POINT
		// so now not a PAIR //
		// never really was // as TUPLO ITEM PAIR TRIP QUAD PENT STREAM
		// now really is a_PAIR // filtered_api maps through // MOSTLY
		// now really is a_PAIR // BASE CLASS // += ASPECT // MULTI_PLUS
		// MULTI_PLUS += ASPECT_as_CLASS // MODULE_CLASS APECT_CLASS
		// MODULE.ASPECT.as_SPEC -> get_SPEC // get_EA //
		// MODULE.ASPECT.get_SPEC

		 //                ZERO_is_PLUS // ie ZERO is most likely SELF
		 //                ZERO_PLUS // ZERO_is_NULL // ZERO_is_IDX //
		 //             M1 ZERO_PLUS // ZERO_is_NULL // PLUS_is_NOT_ZERO //
		 //             M1 ZERO PLUS // plage GEN code here // stream to
		 // M1 == "M1 _CODE"
		 // ZERO == "ON_ZERO _CODE"
		 // PLUS == "ON_PLUS _CODE"
		 // on_ZERO { ASIF PLUS } // possible merge node // or CT_MERGE
		 // on_PLUS(VALUE) { IDX == "VALUE" } // VARNAME == "VALUE"
		 // CACHE_CALL_PRE_EVAL("CMP(TOKEN,VALUE)")
		 // VALUE_RANGE EDGE_TOKEN == "TOKEN" //
		 // VALUE_RANGE EDGE_TOKEN == "VALUE" //
		 // on_MINUS_FIRST(VALUE) { if M5 <= VALUE GOTO state_name }
		 // on_MINUS_FIRST(VALUE) { if M5 <= VALUE GOTO is_M5_m4_or }
		 // on_MINUS_FIRST(VALUE) { if VALUE < M4 GOTO is_M5_m4_or }
		 // M5 M4 M3 M2 M1 ZERO PLUS //
		 }
		 is_minus (
		 	M_lim == "5"
			M5 M4 M3 M2 M1 ZERO PLUS
		 }


				RT_CT += ASM_C

 */


" DECL += STR0_name_SPEC_ADDR CT_KNOWS"
                             "CT_KNOWS"

M5 is usually limited to M9 // eg RETURN CONTINUE BREAK THROW LOCK_GEAR

CT allocates a negate VALUE for TOKEN

	LIST_ZERO == M9-1
	ITEM_ZERO == LIST_ZERO
	ITEM_ONE == LIST_ZERO_minus_ONE
	ITEM_TWO ==  LIST_ZERO_minus_TWO

CT allocates above arbitrary ZERO // DATA is written into ZERO
CT allocates above arbitrary ZERO // DATA is written after ZERO

	use standard " idx = N ++ "
	registered STR0_TOKEN.looked_up.STR0
	registered STR0_TOKEN.looked_up.CODE_POINT // here //
	registered STR0_TOKEN.looked_up.UDEF_LIST // STREAM FRAGMENT //
	// PARSED //



