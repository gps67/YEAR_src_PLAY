	2023-11-29

	2023_11_Nov
	2023-11-29_PARSER_SCRIPT_ARGV_MINI_MACHINE.txt

	PARSER_SCRIPT_ARGV_MINI_MACHINE
	.txt

	EA
	PARSER
	SCRIPT
	ARGV
	NBYTES STO = entire_packet_in _writable_MEM_RW STO + SPEC // u8 * STO = PTR
	SPEC_DECL SPEC = nearby SCRIPTS in MODULES with SESS fd_sess 
	SESS RUNS CODE SPEC DATA 
	DATA nbytes
	SPEC UDEF_t ITEM ; %s ; LAYER_ALIAS == "ITEM_t * ITEM = EXPR %s
	EXPR LIBR_INCLUDES_TREE_of_COMPILED_SCRIPTS
	EXPR LIBR_NEEDS API CALL ARGS CTXT GLOBALS
	CALL CALL with ARGS CODE = { CODE } ; // AUTO_DETECT VAR("CODE") HERE EVAL
	MINI_MACHINE("%s") "MINI" // TEMPLATE FOR // PARAMETER WITH DEFULT
	CTXT += VAR_NAME_LOOKUP_API
	CTXT += LEX_POOL // builtins and RT MK_IDENT // eg SPEC _as_STR0() "%s"
	CTXT += VAR_POOL // builtins and RT MK_VAR // CT_MK_VAR GEN_DECL_VAR //
	CTXT += VAL_POOL // every CODE_POINT XPOS is a PARSABLE_as_CIDENT
	CTXT += PSG_EXPR // VAL == EXPR == PSG_PHRASE_and_ARGS // CODE_POINT
	POS_ZERO == 0 || POS_ZERO ==  FEATURE of ROM as EA_ADDR_EXPR 
	XPOS = POS_ZERO + OFFS_bytes_in_FILE // FILE is u8_IDX_FILE
	IDX = u8_IDX_FILE
		the IDX_POS of ITEM in LIST or TABLE
		// -- you RUN this initial draft to get a loaded SCRIPT
		// -- GEN SCRIPT from loaded modules in SESS
		// PRELOAD is using this CT_RT PLAYER _STREAM_FILTER_PLAYER
		// passes each TEXT_LINE through STREAM FILTER
		// detect COMPLEX PREPARED DATA or USAGE a bit like USAGE
		// 256 files are available to MINI_MACHINE from this OPCODE
		// it is a good page size, first page index
		// on_DETECT RET_VAL NULL when CURR_SESS u32_WORD_u8_u24
		// ie lookup u8_i24 
		// i24 is a beautiful world 
		// i24 is often limited to u23_IDX // is_PLUS
		// i24 is not every OBJECT it is SESSION_ZERO
		// as SESSION_ZERO i24 can reserve u23 as i24 == u23 ASIS
		// as SESSION_ZERO i24 can reserve u24 as u24 == lookup u32
		// as SESSION_ZERO i24 can reserve u48 as u48 == lookup u32
		// as SESSION_ZERO i24 can reserve u32 as u32 == lookup u32
		// CPU expected to be 32 bit LOHI // MACROS provided //
		// ie a 24 bit i24 is a fragment of code that gets RET_VAL
		// CT_RT // KNOWN VAR_DIRECT_RETVAL //

		ITEM_t "LOADED_FILE_idx_u8"

			SESSION had preloaded 256 MODULES or FILES
			SESSION is loading each of 256 MODULES // CTOR INIT //

		[256]
			A module suite will compltely exceed [u8] range
			RUNTIME uses SEGMENT = get_EA_SEGMENT u8_IDX_of_SEGMENT
			TABLE is a full table "{ BYTE * PTR = TABLE[ IDX ] }"
			N == TABLE_N { DECL ALLOC IDX_t IDX = TABLE_N ++ }
			N == TABLE_N { DECL ALLOC ITEM_t ITEM = TABLE[IDX] }"
			"{ ITEM == TABLE[IDX] }" // dialect MATCH
			"{ ITEM = TABLE[IDX] }" // dialect STEP // DECL //

			A loadable module suite to fixed RT addresses
			We use RT alloc lookup STR0 lookup XPOS lookup CODE_POINT
		eg RET_VAL is "{ ITEM_t * ITEM }" // u64_PTR 

			C++ does have the ability to override the builtins
			de-referencing ITEM = EA_ITEM_from_STREAM // PARSED EA

				ITEM_t * ITEM = RET_VAL

				RET_VAL = EVAL_EXPR CODE ARGS

				DECL ITEM_t * ITEM[N] // N is outside [0[N
				DECL ITEM_t * ITEM[]; // KNOWN as N by CT_RT

				DECL ALIAS "ITEM" into "TABLE_of_ITEMS"

			 ALIAS "ITEM[ expr ] " into "TABLE_of_ITEMS[ expr ] "

			 	COMPILE u5_expr_id = N ++ // table is TANLE

				COMPILE TABLE_of_ITEMS[ N ] // dynamic N //

					we allocate the full table
					every SLOT NULL

					we append compiled ROM segments PTRS
					we append compiled RT HEAP PTRS
					we append compiled RT EA_EXPR == UDEF

					decode EA32

						u8 PAGE
						u24 ITEM

					decode EA64

						EA32 DECODED OPCODE_OBJECT
						EA32 DECODED PARAMETER OBJECT

						ie can run 64 bit code on u32

						also option of truncate u48
						limit RANGE to u32_WORD _PTR

					decode EA64

						u16_i48 _as_EA64
						 "{ return u32_WORD_B }"
						 // CT resolves "u32_WORD"
						 // RT might also "%s"
						 // CIDENT or VALUE or PARSABLE

						u16_i48 _as_EA64
						 "{ return u32_WORD_A }"
						 "{ return u24_WORD_A = WORD_A >> 8 }"
						 "u24_PAYLOAD GET {
						 	u24_t UNS = WORD >> 8
						 	i24_t INT = WORD >> 8

						// VIEW sees auto TEMPLATE
						// UNS_INT //
						// OFFS_IDX //
						// u8_u8_u16_u32 // limit u32
						// u16 is unused on ARM32 ZERO
						// u8_u8 is CPU_BITFIELDS
						// BYTE_A //
						// BYTE_B //
						// LOHI_AB //
						// LOHI_ABCD //
						// LOHI_BCD //
						// LOHI_CD //
						// LOHI_BITFIELD //

						  u24_PAYLOAD = u32_WORD >> 8
						  WORD.u24_SHIFTED_PAYLOAD
	// not here //				  WORD.u24_UNSHIFTED_PAYLOAD
						   GET() { RETVAL = WORD >> 8 }
						   SET() { MIDVAL = VAL << 8 }
						   SET OBJECT.FIELD = VAL
						   // let plain C do BITFIELDS
						   // declare them carefully
						   // to match expectations
						   // UNSHIFTED opens INT_WIDEN
						 }
						 // CT resolves "u32_WORD_A"
						 // RT asis "u32_WORD" is_WORD_A
						 // CIDENT or VALUE or PARSABLE


				CODE {
					// there is not CODE // parses to RUN_ASIF_NULL
				}
				ARGS { // an ARGV script that generates argv[i]
				 int argc = 0; // ATOMIC INT // used as UNS_IDX
				 // OPTION -ve arg_i means EVAL_int_idx_MINUX
				 // so return what idx would have returned
				 // so teach CACHE but presume PRELOADED anyway
				 // CACHE needs to run some LOAD_PAGE_ON_DEMAND
				 // we implements as LOAD_ALL_TABLE_NOW
				 // not just the NULL slot that triggered BUILD

				 STR0 argv[argc] // actually that is NULL EOT

				}

			de-referencing FIELD = ITEM.field




		// ie lookup u8_u24 
	IDX = N ++


	 provides VAR_NAME
	 provides VAR NAME SPEC DATA FUNC CURR_MODULE MODULE IDENT LEX VAR_NAME

	 SCRIPT gets a VAR_POOL with AUTO_TOC_API
	 SCRIPT gets a VAR_POOL with ITEM_EXPR # CODE_POINT # CMNT # PLUS # EXR
	 SCRIPT gets a VAR_POOL ITEM_EXPR # CODE_POINT # CMNT # PLUS # EXR
	 SCRIPT gets a LEX_POOL ITEM_EXPR # CODE_POINT # CMNT # PLUS # EXR
	 # lex_pool is usually ciden99 cident_t # SCRIPT BENCH AUTO _t # MATCH _t ~
	 # lex_suffix "_t" # AUTO_PARSE SUFFIX_t # LEX IRONICALLY as without _t #
	 # BENCH # AUTO # _t # 
	 # BENCH # AUTO # this_type_name "{ %s }" _t # 
	 # BENCH # AUTO # this_type_name "{ %s_t }" _t # 

	 	// MATCH "%s_t" // LEX_EDGE "%s_t" ARGV[i] // AS_VAL // AS_VAR //
	
	GEN AS VAR_dialect // MK_VAR %s // ARG1 VAR_NAME VAR_SPEC ALIAS_LIBR

		ALIAS_LIBR is all nearby CODE SEGMENT and DATA_STREAM
		ALIAS_LIBR is all nearby CODE SEGMENT DATA_STREAM ENQ_ACK
		ENQ_ACK "%s" // PARSED_into_PSG_TREE SEGMENT_DATA
		LANG_DIALECT // AT_RUNTIME is added to GEN 
		EVAL_SCRIPT LIST_of_ARGV // then LIST_of_LINE SCRIPT_TEXT TEXT
		TEXT VAR_NAME
	
	VAR_NAME

		DECL of SCENE // SCENE += VAR // SESS += on_START code 
		SESS += VAR_POOL // SEGMENT as VAR_POOL
	
	VAR_POOL

		{ NAME DATA } // SPEC // SPEC is AUTO MATCHED // AUTO_MATCH //

		{ NAME SPEC DATA CODE GLOBAL_PROVISION VAR_POOL }
		"ITEM = THIS.lookup( VAR_NAME argv[i] )"

		FILTER SEARCH for MATCH

		"ITEM = THIS.lookup( VAR_NAME argv[i] )"
		ITEM 
		THIS
		lookup
		VAR_NAME argv[i]"
		i i // VAR_VAL_EXPR_i_type int_i // int_i_t ANINT("%s") // %s //
		u8_idx_t u8_idx_CIDENT99 "{ u8_idx_t u8_idx_%s }"
		u8_idx_t u8_idx_%s 
		u8_idx_t u8_idx_CIDENT99 "{ u8_idx_t u8_idx_%s }"
		u8_idx_t u8_idx_%s 

		u8_idx_t u64_idx_CIDENT99 "{ u8_idx_t u8_idx_%s }"
		u8_idx_t u64_idx_%s 

		u8_idx_t u32_idx_CIDENT99 "{ u8_idx_t u8_idx_%s }"
		u8_idx_t u32_idx_%s // u24 actually in_u32 // WIDEN_BITWIDTH

			u32 is a common case and it needs to handle u64 vie u32

			via_u32

			ACTUAL WORD_SIZE_of_CPU_and_MEM 32bit 
			ACTUAL WORD_SIZE_of_CPU_and_MEM 24bit 
			ACTUAL WORD_SIZE_of_CPU_and_MEM 16bit 
			ACTUAL WORD_SIZE_of_CPU_and_MEM 8bit 

			ACTUAL WORD_SIZE_of_CPU_and_MEM 64bit 

			 u32 WORD_A
			 u32 WORD_B 

			 	u32_WORD_t is a CPU_WORD and CPU_REGISTER
				We need OLD_TIME ARM32 as a CPU_ceiling
				We are API_ASIF ABCD_EFGH

			 u32 ABCD
			 u32 EFGH

		-eg-
			 u8_u24 POOL_ITEM
			 u8_u24 POOL_ITEM
			  u8 POOL == u8_idx_POOL
			  u24 ITEM == u24_idx_ITEM

		-usage-
			u8_u24 
			u8_u24 == u8_u24 // ALIAS // MINI_MACHINE_COMPONENT
			u8 POOL == THIS_VAL // MACRO print as VAR_NAME "VAL"
			u24_ITEM == THIS_ITEM // "THIS" // "this" CXX // "self" PY //

			ITEM_t * ITEM = EXPR ARGS

				SCRIPT { HERE } // CODE_POINT 

				CODE_POINT is magic UNIQ pointer
				
					brings anything that a MODULE might bring
					CODE_POINT HERE CSR PARSED_XPOS

					 MODULE
					 FILE
					 OFFS
					 OFFS of XPOS
					 LINE
					 LINE of XPOS // PARSE counting y TEXT lines
					 PARSE of INDENTED TEXT BRACES PSG VARS
					 PARSE of SCRIPT
					 DIALECT MODULE "dialect" { SCRIPT }
					 DIALECT VAR "ITEM_NAME" CIDENT99 VAR_NAME "VAR"
					 BPOS is BYTE_POS -wrt- P0P2 { FILE TEXT }
					 BPOS is BYTE_POS -wrt- BOLN
					 BPOS is BYTE_POS -wrt- P0P2 { FILE TEXT }
					  P0P2 is ZERO_OFFS // or_OTHER
				P0 = SEGMENT_ZERO_then_BASE_ADDR_on_LOAD
				P2 = P0 + N
				N = u8_u24_N // self answering create on demand
				N = u8_u24_N // now exists // CT_RT //
				CT_ALIAS ITEM = POOL_ITEM u8_POOL u24_ITEM
				CT_TYPE u8_%s
					BYTE_A // here is why LOHI
					BYTE_B // maybe unused here AVAIL

					 expect a predictable CPU behaviour
					 accept MACRO BYTE_B GETTER_SCRIPT

					 EA u8_u24

					 BYTE * PTR = GETTER.ask_Q
					 	GET
						SET
						GET_EA
						VIA_EA
						ENQ

					 // ANSWER to QUERY // VIA SCRIPTS //

					 	RET_VAL = EVAL SCRIPT ARGS

						SCRIPT += XPOS_to_EOF
						SCRIPT += XPOS_to_EOLN
						SCRIPT += XPOS_after_BOLN
						SCRIPT += XPOS_after_TEXT_P0
						SCRIPT += "P2" 

							u32 WORD_A_aka_VAR_NAME
								"P2"

							CODE_POINT += HERE
								// CT_RT //

	The mention of P2 created it
	Turns out P2 is "{ BYTES * PTR }" an available DECL // MATCH PTR 
	Turns out P2 is u8_u24_PTR_t; // CODED u32_WORD //
	Turns out P2 is u8_u24_PTR_t; // ENCODED u32_WORD //
	Turns out P2 is u8_u24_PTR_t; // DECODED u32_WORD //
	Turns out P2 is u8_u24_PTR_t; // DECODED u8_u32_WORD //
	Turns out P2 is SCRIPT_WORD u32;
	Turns out P2 is SCRIPT_WORD u32; "{ u32 WORD_A }"
	Turns out P2 is SCRIPT_WORD u32; "{ u32 WORD_B }"
	Turns out P2 is SCRIPT_WORD u32; "{ u32_WORD }"
	Turns out P2 is SCRIPT_WORD u32; "{ u32_WORD u8_u24_POOL_ITEM }"
	EA_t -is- u8_u24_POOL_"{ ITEM_t ITEM }" // "{ %s_t %s }" "ITEM" "ITEM" 
	LEX in ARGV is STR0 in LOADED MODULE
	LEX in ARGV is STR0 in LOADED MODULE
	VAR in SESS is STR0 in LOADED MODULE // VAR_NAME as PARSED code_point
	VAL us u8_u24 FILE_OFFS
	 u8_FILE
	 	u8_idx = BYTE_A // INSITU CPU_BITFIELD or CT_RT_MACRO GET_BYTE
		SCRIPT {
			POOL_t * POOL = lookup u8_idx() {
				CT_RT BYTE_A 
				CT_RT BYTE_B_UNUSED // because used as u24_PAYLOAD
			}
		}
	 u24_OFFS
	 	limit 16 MB CACHE // SPACE is idx_i64 REACHABLE is i24 or u24
		DECODE OFFS = PAYLOAD = u24_PAYLOAD // WORD >> 8
	 i24_OFFS
	 	it is up to DECODER what to do but the API would use .. OPTIONS
	 u24_IDX 
	 	OFFS = lookup(u24_IDX) 
	 	OFFS = lookup(u8_VIA_u24_IDX) 
		VIA = API(" NAME = API.lookup( IDX ) ")

		 TOKEN = COMPILED TOKEN for PARSED TEXTS
		 That might have a different normalised SPELLING
		 That might have an exactly matched SPELLING
		 // the normalised one
			STR0 = " NAME = API.lookup( IDX ) "
			API = KEEP_EA_EXPR( STR0 )
			VIA = API(" API ")
				AUTO create VAR "API"
				AUTO create TOKEN "API"
				AUTO create ALIAS TOKEN " API " // LEX_EDGES //


	u8_u24_PTR_t; // DECODED GET_EA u8_u32_WORD // GET_EA //

					 BYTE * PTR = GETTER.ask("%s")

				CT_TYPE u24_%s

					 BPOS is BYTE_POS -wrt- P0P2 { FILE TEXT }
					 CPOS is BPOS

					SCRIPT 

		u8_idx_t u16_idx_CIDENT99 "{ u8_idx_t u8_idx_%s }"
		u8_idx_t u16_idx_%s 

		u8_idx_t u24_idx_CIDENT99 "{ u8_idx_t u8_idx_%s }"
		u8_idx_t u24_idx_%s 

		u8_idx_t u8_idx_CIDENT99 "{ u8_idx_t u8_idx_%s }"
		u8_idx_t u8_idx_%s 

	Need to load CXX SCRIPTS as ARGV styles

		some ARGV["by_name"] // or by cached EXPR

			"name" 
			SPELLING
			TOKENISED
			COMPILED_INVOCATION

		GET ARGS["P2"]

			RET_VAL is the VAR_NAME looked up as a STR2
			RET_VAL is the VAR_DATA as a "{ BYTE * PTR }"

		MINI_MACINE_VAR P2

			local variable using STACK local CXX rules work
			STACK vars auto moved to VAR_POOL_CT_VAR_stack_local

		MODULE

			new_name = MACRO that returns RET_VAL

			if RET_VAL_DIRECT_VAL

				"{ KNOW ALIAS LHS == RHS "}

					RET_VAL = ARG

				"{ KNOW EXPR LHS = EVAL RHS "}


 SCRIPT as PARAMETER "{ SCRIPT }"

 	TEXT == PARSED SCRIPT from P0 of P0P2 LIMIT P2 to SEGMENT
 	TEXT == PARSED SCRIPT from PTR 
	CSR == PTR == PTR_BOLN

	SCRIPT_is_KNOWN_PARSED
	SCRIPT_is_HOPED_PARSE_ABLE
	XPOS is OFFS into FILE

		only [256] files in use near MODULE
		via LOAD TABLE
		INFO_STREAM_t & INFO_STREAM =
		INFO_STREAM[ idx ] // idx == idx_u8 == u8_idx == BYTE_A
		INFO_STREAM[ idx ] // idx == idx_u8 == u8_idx == BYTE_B

		BASE = PAGE0 of INFO_STREAM
		OFFS = u24_payload // or i24_payload interpreted as u64 PTR

		EXPR = u32_in_CPU_BITFIELDS

			BYTE_A == OPCODE
			BYTE_B == u32_WORD // PICK activated ROM //
			EMIT
			 u16_IDX = u16_PAYLOAD =  u32_WORD >> 16

		MATCH 

			BYTE_B

		MATCH 

			u16_IDX = u32_WORD >> 16



	INDENTED_TEXT is PARSABLE





