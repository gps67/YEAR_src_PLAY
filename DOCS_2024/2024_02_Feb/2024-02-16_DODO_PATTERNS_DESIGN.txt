	2024-02-16

	2024_02_Feb
	2024-02-16_DODO_PATTERNS_DESIGN.txt

 LOHI

 	WHY LOHI ?

		CPU picks one BYTE of u32_CPU_REGISTER

			it always is the LOW byte_A
			it never is the HIGH BYTE_H of 8 bytes of i64

		DECODING A then B // then CD then EFGH

			means that A is effectively the HIGH VALUE byte

			at that LO pos it is first and ironically MOST signif

		PARSER can stop on 1 letter // KNOWN_BINARY_OPCODE

			A
			A B
			AB as BA_from_LOHI
			A B C D as DBCA_from_LOHI
			CD as DC from ABCD or DBCA SIGNED shift 

			BYTE PARSER NUMERIC TOKEN_READER

			u8 u16 u32 u64
			i8 i16 i32 i64 SIGNED
			i4_i4_u24 i4_i4 i8_OPCODE i8_EXPR i9_CODE_POINT

		CHOICE

			get A from EIGHT in MEM_BYTES
			get A from EIGHT in MEM_WORD
			get A from EIGHT in CPU_WORD
			get A from PREGOT in CPU_WORD
			get B
			get B from 

			COMPILER has to explore avenues 

				NONE - backtrack
				ONE - this way
				TWO - explore choice
				MORE - explore choice

			COMPILER CALC

				CYCLES per OPCODE
				LOOPS per LOOP
				BYTES per OPCODE

			COMPILER may also pick which it does first

				my compile is a bit simpleer than that
				option to build these proposed structures
				for now use some TEST DATA to prepare ...
				well explored options

				my compiler can pick first working result
				might depend on C picking how to implement that
				just so it works, for now
	
		A B

			We are decoding i8_i8 as BYTE_A BYTE_B

			OBTAIN CD
			OBTAIN ABCD
			SHIFT_BITFIELD

			WRITE i32_FOUR.BITFIELD_i16_DC

	WHEN LOHI

		allow use of "BA" 
		allow use of "AB" 

		allow use of "DC" 
		allow use of "CD" 

		allow use of "DCBA" 
		allow use of "ABCD" 

		both mean BYTEFIELD loaded from LOHI

			saying ABCD reminds programmer of SEQ in MEM
			saying DCBA reminds programmer of SEQ in WORD

			avoiding DCBA means programmer knows it is reversed
	
	WHEN LOHI

		PAIR "{ LHS RHS }" // PAIR_LHS is WORD_LO _ONE _TWO
		PAIR "{ ONE TWO }" // human names not [0] [1] // prefer lhs rhs
		PAIR "{ LO_ _HI }" // splice out of i64 CPU_WORD

	WHY LOHI MOST CPUS

		most CPU's have a load WORD from LOHI

			STEP
			MODE

		most CPU's have a SWAP_BYTES_in_WORD 

			NEED WORD_FOUR aligned to load word from memory

		most CPU's have ACCESS to low BYTE 

			even if via 2 shift steps

		most cpu's have ACCES VECTOR_of_i32[ idx * 2 + 0 ]
		most cpu's have ACCES VECTOR_of_i32[ idx * 2 + 1 ]

		most cpu's have ACCES VECTOR_of_i32[ idx * 2 + 0 ] + 0 byte
		most cpu's have ACCES VECTOR_of_i32[ idx * 2 + 0 ] + 1 byte

 EIGHT
 EIGHT_LOHI
 FOUR_LOHI_PAIR
 FOUR_LOHI
 FOUR

	If you dont want LOHI dont use the name EIGHT, it always is

		i64_WORD = INT_from_LOHI_64

		i32_WORD = INT_from_LOHI_PAIR_i32_i32

 	matches i64 but intentionally BITFIELD edges i32_i32

 OTHER
	OTHER

		CODE_POINT 

			EA_CODE_POINT "{ idx = N ++ }" " EA(idx) // CTOR_MAGIC

			EA("0xFF") ALIAS "0xFF" idx // or "idx" // EXTRA //

			IMPORT ALIAS idx

				declare something quite fundamental
				useful so export to GLOBAL-ify it
				CT_RT ALIAS through the MENTION
				// must be CIDENT97 // here ASCII_CORE

			DIALECT ALIAS CODE_POINT = idx

				PARSE " = " within ARGV ACCEPT "=" or OMIT

				BIND "idx" to SPELLING 

				GEN "if( idx == SPELLING ) ..."

				GEN "parses this TEXT" MATCH TEMPLATE ...

			CODE_POINT = "{ FILE OFFS }"

			FILE = "{ VAR_is_VFS_FILE }" // "%s // AVAT // TEXT
			FILE = VFS FILENAME FILEDATA MMAP_XPOS"
			XPOS = "{ FILE OFFS }"
			XPOS = "{ FILE LINE_NUMBER }"
			XPOS = "{ FILE LINE_NUMBER CPOS }"
			// CPOS is not BPOS becomes XPOS is N_GLYPHS 
			// CPOS is parse UTF9 // for now // Latin1 soon // PLUS
			// BPOS is byte_offs within line // Latin1 == CPOS
			// XPOS uses CPOS
			// OFFS is only one extra WORD //
			XPOS { u8_u8_u16 u8_FILE u8_CPOD u16_lno } // PICK lno
			XPOS { u8_u24 u8_FILE u24_OFFS } // PICK lno
			XPOS { u8_u24 u8_FILE i24_EXPR } // PICK " PLUS is IDX"
			XPOS { u32_ADDR } // MINI_MACHINE // u32_IDX // i32_IDX
		//	MATCH( ZERO ) // DECODE( NULL ) // GOOD OPTION M1 
			MATCH( ZERO ) // DECODE( PLUS ) // 
			MATCH( PLUS ) // DECODE( PLUS ) // 
			MATCH( MINUS ) // DECODE( MINUS ) // 
			MATCH( MINUS M1 M2 EOF CTRL ) // DECODE( CTRL ) // 
			MATCH M1 == "0xFF" // i32_from_i8 // i32_CPU_WORD 

			EXPR MATCH("XPOS u8_u24 XPOS") // CODE TYPE WORD
			TYPE BITFIELDS u8 u24_PAYLOAD 
			MACRO " i32_WORD >> 8 " // NOTE SP as ASM shorthand
			DIALECT " SP %s SP " "{ u24_PAYLOAD = i32_WORD >> 8 ; }"
			TYPE BITFIELDS u8 u24_PAYLOAD "u24_PAYLOAD = i32_WORD >> 8"

			STREAM = https://youtu.be/5ab7tIZNplM

			XPOS {
				FILE_in_VFS u8
					OPTION u8 EA_ITEM in MINI_MACHINE
					 EA_ITEM == "u8_lo"
					 EA_ITEM == "u8_A" 
					 EA_ITEM == "lo" 
					 EA_ITEM == "A" 

				// SEE	 EA_ITEM == "u8_hi" 
					 EA_ITEM == "u8_B" 
					 EA_ITEM == "hi" 
				// SEE	 EA_ITEM == "B" 

				FILE_in_VFS u8_u8

					OPTION u8_u8 EA_ITEM in MINI_MACHINE
					EA_ITEM is ROM_ITEM // SCRIPT
					ITEM_t item = GETTER_VECT[ u8_u8_idx ]

					DECODE(" u8_A u8_B ") // i16_LOHI //

				LINE_NUMBER u16

					i16_PAYLOAD = i32_WORD >> 16

					CREATE MACRO  " i32_WORD >> 16 "

						the excess SP pre_match GAP

				CPOS_in_LINE u8

					u8_CPOS = u32_CPU_WORD_BYTE_B // u8_hi
			}"

 LOHI

 	Any sensible CPU has excellent BITFIELD access and BYTEFIELD

	u32_LOHI
	u32_u32_PAIR LHS RHS // SAMPLE invoke line provides VAR_NAME == VALUE
	u32_LHS_lo
	u32_RHS_hi

		_lo appears at BYTE[0]
		_hi appears ar BYTE[4] BYTE_4567_as_i32 _as_u32 _u8_u24

			WORD_hi
			BYTE u8_lo
			i24 i24_
	
	BYTES are read like ASCII letters ABCD EFGH TEXT PARSE MATCH FILTER

 MINI_MACHINE

	 i8_i8_i16_i32

	 	BYTE PAIR "{ A B }"

	 i8_i24_i32

	 	single BYTE

		a lot of MINI machines will fit
	
	NESTED

		MERGE MINI_MACHINES into shared space

			still in BYTE
			move to BYE_PAIR




 TEXT

 	ASCII left to right
	UTF8_TEXT NBYTES P0 N P2 // OBJECT present BOTH nbyeas and p0p2
	local ALIAS provides N P0 P2 // P0 Parser EOF_DETECT_API
	API_t N_P0_P0
	API_t u32_N ; u32 P0 ; u32 P2 ; ZERO "EA == P0" ALSO "CSR == P0"
	API_t u32_N ; u32 P0 ; ______ ; ZERO "EA == P0" ALSO "CSR == P0"
	API_t _____ ; u32 P0 ; u32 P2 ; ZERO "EA == P0" ALSO "CSR == P0"
	MERGE MATCH ABOVE LINES from TEXT STREAM

	TEXT compiles to BINARY using VAR_NAME into IDX

 TEXT STREAM

 	REPL or as if REPL via LIBR

	Grief Art CHERUB

 AUDIO STREAM

	STR0 URL = " url " // TEMPLTE // OPTIONS for DIALECT ALIAS SP_ONE
	https://music.youtube.com/watch?v=AgM9iv6Y0XI&si=UNxWz6i3jgdkKPRa

 REPL API

 	The MUX stream, is actually a REPL,

		two way traffic
		quiet times waiting for input
		busy time process input to output
		busy time process round trips and repeats
		busy time computing and waiting
		out of phase ENQ / ACK - not due to dropped PKT
		predictive CACHE asks questions for remote

		REMOTE sends QUERY to here, we PICK it
		enact query, understand it, obtain bits of info needed
		obtain bits of info redicted to be useful
		preemtively ENQ_ACK those details locally
		LOCAL cache mirrors REMOTE cache

 	ENQ_ACK_REPL_API

	_ ENQ_ACK

	 	This API is tighly coupled with IP4_TRANSPORT_UDP 
		LHS -CONNECT- RHS
	_ HERE LHS RHS CODE_POINT

	_ REPL_API REPL API CODE_POINT // BIND_PARAMETER("CODE_POINT") // CT_RT

	_ _CT_RT CT_ _RT CODE_POINT //  BIND_PARAMETER("CODE_POINT") // CT_RT
	_ _ { SCRIPT }

 SCRIPT can apply SET to FILTER

 	PRINT TEXT PASTE TEXT PARSE_TEXT
	// contrain to CXX joins %s_%s when printing as single CIDENT

 CIDENT user defined CSET

 	a1 += PERMITTED_GLYPHS_in_a1 // [A-z] // [ a-z ] // [0-9] // GLYPH_LIST
 	a2 += PERMITTED_GLYPHS_in_a2 // a1 // that gets us its GLYPH_LIST via FILTER
	// FILTER over running CODE // running PARSED SCRIPT // TENSE //

 PARSED("SCRIPT")

 	if entire text is a recognisable 
	as CIDENT97 { cident99_a1_s2_star }

	AVAR "SCRIPT" // NAME or `lookup NAME` // UNIQUE SPELLING
	PARSE SCRIPT // FILTER notices that "VARNAME" was not in Q2 so AVAR
	AVAR "VARNAME" // BIND finds ALIAS SHIFT to EA_SPELLING"
	AVAR "VARNAME" // BIND finds CODE in SEGMENT and API
	AVAR "VARNAME" // BIND finds TEXT and PARSER finds CODE in SEGMENT

 PARSED("filename")

 	BIND remembers PICK of used EXPR and SESS.AVAR and ROM.AVAR
	LIBR API // bins to objects CALLABLES EXPRS // CT_RT

 REPL STREAMER

 	MUX provides a converyer belt of packets, eg LINES
	LINE Parsed from with FILE_UPTO_EOF // must use P2 and not need NUL



 ITEM includes EXTRA_CTRL_OPCODE

 	ITEM += CODE_POINT // repeat TERM used as search TERM SAMPLE_TWO
	CODE_POINT += 
	



