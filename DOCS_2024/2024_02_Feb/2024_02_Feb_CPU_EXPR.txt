	2024-02-02

	.
	2024_02_Feb_CPU_EXPR.txt

	DVD to USB
	 3G of PHOTOS and MEDIA
	 2T of MEDIA and BENCH
	 16M of BENCH SEGMENT
	  16M of ALIGN_n_BYTES_1 // u8_BYTE
	  64M of ALIGN_n_BYTES_4 // u32_WORD
	 128M of ALIGN_n_BYTES_8 // u64_WORD
	 256M of ALIGN_n_BYTES_16 // u64_u64_WIDE_PAIR
	 256M of ALIGN_n_BYTES_16 // u32_u32_u32_u32_WORD_FOUR FOUR_WORD
	 256M of ALIGN_n_BYTES_16 // u64_u64_u64_u64_FOUR_WORD_POOL
	 256M of ALIGN_n_BYTES_4096 _PAGE_of_4096 OFFS = u12_OFFS // OFFS = u48

	/* multi part word "{ BEACH SEGMENT }" */

		build tree of SUBLEX as LEX

		 usage "{ SP LEX SP }"
		 usage "{ LEX }"
		 usage "{ EXPR LEX }" // CODE_POINT == "{ XPOS }"
		 usage "{ EXPR LEX }" // CODE_POINT == "{ FILE_alias XPOS {"
		 // SP %s SP //
		 // LEX_EDGE %s LEX_EDGE // // eg SP // eg GAP // eg EGDE //

		 LEX == "EDGE"; // CT_RT dialect say it in C // TOKEN_for_VAR //
		 LEX == "EDGE"; // TOKEN_for_VAR // TOKEN_for_ITEM 
		 LEX == "EDGE"; // TOKEN_for_ITEM // TOKEN_for_ITEM 
		 LEX == "VAR"; // TOKEN_for_UDEF // TOKEN_for_something
		 something == "TOKEN" // alias(" SPELLING")
		 something == "TOKEN" // alias "SPELLING"
		 something == "TOKEN" // alias "{ SP %s SP }" // MATCH EXPR
		 EXPR += parse "{ SP %s SP }" // MATCH SP to LEX_EDGE

		 CODING: /* coding: the convertion on UDEF to CT_RT via SCRIPT */
		 CODING: /* coding: the COMPILER sweeping over PSG_TEXT
		 PSG_TEXT "{ PRESUMING PHRASE_EDGE at TWIG_DATA_EDGE_ROOT
		 VAR_DATA "{ VAR_NAME VAR_SPEC ALIAS_POOL EXPR_POOL SESS }"
		 SESS_DATA "// in above list of VAR_DATA || EXPR_NAME // MATCH TEXT
		 XPOS_DATA of get_YPOS_from_line_counting_upto_OFFS 

		 u8_SPEC _of_OPCODE

		 	(1) we know it is OPCODE_POOL[idx_ITEM]
			(2) we need it to be labelled "{ bool label }" // EXPLAIN
			(3) we carry data as DECODE( OPCODE )
			(3) we carry data as DECODE( "{ OPCODE }" )
			// confirms DIALECT by using SPELLING of TOKEN

			// PICK // idx_ITEM = u8_idx
			// OPTS // idx_ITEM = u8_idx
			// OPTS // idx_ITEM = u8_idx
			// OPTS // idx_ITEM = u8_idx u8_idx_ONE _ONE _TWO
			// OPTS // idx_ITEM = u8_idx u8_idx_TWO
			// OPTS // u8_u8 LOHI = load from i64_WORD
			// i64_WORD u48_payload u8_u8_BYTE_PAIR _LHS_RHS 
			// OPCODE bitfield _from_BYTES_STREAM
			// OPCODE bitfield _BITFIELD_SPEC.get_bitfield CT_RT
			// CT_RT gives COMPILER SWEEP PHASE "UDEF" at CT
			// PARSE MODULE RUN MODULE CACHE MODULE
			// ALIAS merges FIELD_LIST onto ITEM_as_DATA

		u8_u8_DECODE 

			u64_CPU_WORD_WIDE
			u32_CPU_WORD_PAIR _PAIR = _EIGHT _aligned_u32
			u32_CPU_WORD_PAIR _PAIR = _EIGHT _aligned_u64
			u32_CPU_WORD_PAIR _PAIR = _EIGHT _aligned_WORD_BITFIELD
			u64 "{ { u32 lo } { u32 hi } }" // DIALECT SPELLING

		expect cident SPELLING

			adds the power of TOKEN _isation to DIALECT

			PARSER += MATCH SPELLING

			MATCH += OFTEN GAP from SP// OFTEN SP EXACT // EDIT //
			EDIT += load CPU register from UNALIGNED
			EDIT += load CPU register from ALIGNED_u32
			EDIT += load CPU register from ALIGNED_u64


				CPU32 using MEM_in_STREAM
				CPU32 using MEM_in_SEGMENT
				CPU32 using MEM_WORD_HALF
				CPU32 using CPU_WORD_HALF
				CPU32 using CPU_WORD_PICK u64_idx_REG_PICK
				u3 REG PICK // expect later WHIRL u5_from_u8
				u3_PICK = "CPU REGISTER A B C D E F ALIAS EXPRS"
				
	
	DVD carries 3.7 G of SEGMENT S in ISO_as_VFS SEGMENT_MAP= FILE_OFFS_EXPR

	3G LIMIT over NET, to help users of DVD archives or USB_STICK in_USE
	16M LIMIT x16 STRETCH_WORD_to_128_BITS _16_BYTES

	WORD // used for XPOS TREE_POS Y_POS UDEF_POS // inherit from import
	u32_WORD // DIALECT recognised TOKEN and USAGE via PSG in TEXT TREE_POS
	u64_WORD alias EIGHT // usage VAR_NAME is cident NUMBER _of_BYTES
	u128_WORD_PAIR // WORDS "{ LHS RHS }" // u64_LHS u64_RHS // MEM_WORD
	MEN_WORD_in_MEM // via LOHI_BYTE_STREAM_XPOS u64_XPOS from OPCODE
	u24_WORD // BITFIELD // u24_WORD = u32_WORD >> 8 // AXIOM of DIALECT
	LIBR knows "u24" arrives as u32 or WIDER // WIDER += i64 DECODE
	LIBR knows "u24" used in "u24_PAYLOAD"
	LIBR knows DECODER "%s_%s" from alias "{ BITFIELD_VARNAME }" // key attr
	LIBR knows DECODE EA_EXPR of_ITEM 
	SCRIPT does EVAL EA = EVAL_EA_EXPR( CODE_POINT XPOS TREE_POS )
	u128_BITS // ALIAS

	TOKEN_t KEY_ATTR = "BITFIELD means LIBR_BITFIELD_ITEM _or_EXPR

	// NLP _or_UDEF // an easy way to introduce yet_one_more_distraction
	// UDEF = "%s" // ALIAS "{ %s }" // USAGE TOKEN when used in CTXT









