#  MMAP_HEAP_OBJ.txt

	MMAP
	HEAP
	OBJ

	MMAP

		Cannot guarantee trailing NUL in MMAP text files
		Can guarantee own trailing NUL in own files
		But not user supplied

		CAN CHECK THAT A NUL IS THERE :-)

			a NUL or LF or even SP is not ident
			detect LF within Q2 or CMNT or ...

		option: STOP on LF
		option: stop on P2

		MAGIC + header

			is an MMAP 16
			uses 64K * 4K pages (256K)
			uses 16M * 4K pages (64G)
			uses 16M * 8 bytes (128M) EIGHT[u24]
			uses 16M * 1 bytes (16M)

		range of MINI_MACHINE sizes incl u16
		range of MINI_MACHINE sizes incl u8_idx

		SEGMENT ARRAY_ONE {

		 array[ idx ] of EIGHT_t // AWORD // x86 has builtin x8 opcode
		 array[ idx ] of <TEMPLATE_ARG_t> // item_nbytes // _aligned

		}

		HEADER_FIELDS {
		}

		META_FIELDS {
			ASSOC "{ LHS RHS }"
			ASSOC "{ META_EA ITEM_EA }" "{ SPEC ITEM }"
		}

		EA_EXPR {
			i64_EXPR_BITFIELDS_t i64_EXPR ; // 
			//note how VARNAME is SPEC_NAME
			USE OPTION u8_u8 i16 i32
			FOR API "i8_i8_i16_i32" as "UDEF_xFFFF"
			use OPTION BITFIELDS // imports lexicon + dialect
			FOR API "ITEM_t * PTR_to_ITEM" 
			ALIAS EA_ITEM
			ALIAS EA_PICK // eg ONE_of_LIST PICK_LIST EXPLAINS VARS
			ALIAS EA_PICK /* meaning "/ CHOICE_is_EA_ITEM
			// use of CMNT to add 5th parameters
			// /* add 5th parameter */ // to parent template
			// CODE_POINT beings own lexicon dialect and SENSE
			// explain SENSE of PICK // list of filters weights
			to 4 ARGV parent template
			with a ROM parent basic template
			with a RAM current self_or_cache_or_modified template
			with a RAM current self_or_cache_or_modifiable template
			// inherit modified within SCOPE // DECL MODULE plain
			with a modified template
			LIBR TEMPLATE [%s] { PARAMETER = "%s" via FILTER VAR BIND
			EA_ITEM = i16_i48 // u8_u8_i16_i32 
			 // EA_ u8_u8 i16_PAYLOAD i32_AWORD
			 // PAYLOAD from BITFIELD // CLIP_32 shift AWORD down 16
			 // BITFIELD // get_BYTE_FIELD_CD_via_SHIFT_PAIRS
			 // BITFIELD // get_BYTE_FIELD_CD_via_SHIFT_SOLO
			 // BITFIELD // get_BYTE_FIELD_CD_as_CPU_BYTE_FIELD
			 // BITFIELD // get_BYTE_FIELD_CD_as_CPU_REGISTER_BYTE_FIELD
			 // BITFIELD // DECODE_i64 // DECODE_i32_i32 _BITFIELDS
			 // _BITFIELDS += UNION_i64_BITFIELDS // local added
			 // _BITFIELDS += u32_u32
			 // _BITFIELDS += i8_i8_i16_i32 // LIMIT RANGE u15_idx
			 // https://youtu.be/U622DUytGAY // a:18:35 -ish // maid
			 // https://youtu.be/U622DUytGAY?t=4715 // -ish
			 // https://youtu.be/U622DUytGAY?t=4709 //

			EA_ITEM = EA_EXPR u8_u8_u16_u32
			// BYTE_FIELD A B AB CD EFGH // all LOHI
			// get_i8_A(i64) register AL into i32 or even i64
			// get_u8_A(i64) 
			// get_i8_B(i64) 
			// get_u8_B(i64) 
			// get_i16_AB(i64)
			// get_u16_AB(i64) 
			// get_i16_CD(i64) **
			// get_u16_CD(i64) **
			// get_i32_ABCD(i64)
			// get_u32_ABCD(i64) 
			// get_i32_EFGH(i64) *
			// get_u32_EFGH(i64) *
			// get_i64_ABCD_EFGH(i64) +
			// get_u64_ABCD_EFGH(i64) +
			// get_i48_CD_EFGH(i64)**
			// get_u48_CD_EFGH(i64) **
			// ACALL(const i64 & AWORD) // allows GCC to work direct
			// set field in BITFIELDS in word

			 // EA_ITEM = i16_i48
			 // EA_ITEM = u16_u48
			 // EA_ITEM = i16_u48
			 // EA_ITEM = u16_i48
			 // u8_u8_i16_i32
			 // DECODE_u8_u8_with_i16_i32

			 EA_EXPR
			  u8_A OPCODE_A
			  u8_B_OPCODE_B
			   u15_idx 
			   u16_idx 
			   i16_idx_MINUS
			  i8_i24_WORD_TWO
			  u8_i24_WORD_TWO
			  u8_u24_WORD_TWO
			  i8_u24_WORD_TWO

			  ZONE[u15]
			  OFFS = u31 * 8 || i32_MINUS // index(PLUS)
			  OFFS = u32 * 8 // index(PLUS)
			  // index(PLUS)
			  // index(ZERO) // single special case // slow sure
			  // decode_zero(ZERO) // single special case
			  // decode(MINUS) // maybe catch M1 first M16 xF0
			  // if(( MINUS + 16 ) >= 0 ) { -17[-16[-1[0 PLUS }
		}

	HEAP

		EA in HEAP 
		EA into HEAP
		u8_u8 OPCODE += OPCODE_u8 FILE[u4] += OPCODE_u4
		u16 FILE_HEAP selector
		u32 ITEM_in_HEAP [4G LIMIT] (2G with early libr)
	OBJ
		OBJ may also be an admin obj in HEAP skeleton
		OBJ == PAGE[u8] of OBJ
		ALL in PAGE are
		 OBJ_with_DECL
		 OBJ_without_DECL
		 in_array_of_adjacent_pages_index - so sep INFO about PAGE


