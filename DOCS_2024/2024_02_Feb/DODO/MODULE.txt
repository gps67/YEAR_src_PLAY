MODULE.txt

MODULE += MODULE

	REFLEX { MODULE } 
	+= _const _type _var _usage _SPEC _NAME _ALIAS 
	_name += ALIAS
		AUTO_LOCATE_ALIAS has already added "_name" to "ALIAS"
		AUTO_LOCATE_ALIAS now adding "ALIAS" to "_name" to "ALIAS"
		CT_RT uses this decl to reserve and export import bind
		CT_RT uses BENCH to STEP through it's SCRIPTS with QUOTAS

		QUOTA += _MEM
		QUOTA += _CPU
		QUOTA += _STO
		QUOTA += _NET
	
	XPOS of a SCRIPT in dir of MODULE

		i16_FILE_idx_pos_in_LIST
		i16_FILE_idx_pos_in_LIST // interpret repeat as EA_SELF // 

		u16_FILE_idx_pos_in_LIST
		u16_FILE_idx_pos_in_LIST // interpret repeat as EA_SELF // 

			typedef
				EIGHT_t[u16]  // N == u4_u12 // u16_idx //
				// u16_64K * u3_13 // 256K_BYTES u13_IDX // u11 
			 

			CT_RT i16 idx_of_file // STR0 FILE[idx]
			// FUTURE // STR0 is a placeholder for a varname
			// FUTURE // SELF is STR0
			// FUTURE // SELF is "" // NULL // KNOWN // OTHER

		i16_FILE_idx_pos_in_LIST
		i16_OFFS_in_FILE

			i16_i16 FILE_OFFS
			
			It is a 32K LIMIT with 32K of EA_EXPR

		i16_FILE_idx_pos_in_LIST
		i16_OFFS_in_FILE

			MODULE LIMIT 32K_PLUS 32K_MINUS 
			 DECODE_MINUS_as_LOOKUP _as_IDX _as_IDX_plus_64K
			 DECODE u16_IDX = i16_IDX_MINUS + K64
			LIMIT 32K BYTES per SCRIPT and 32K SCRIPTS


		HOOK "ALIAS" is very ASCII a DIALECT NOUN or OPTHER

			OTHER = LEX_ITEM.ALIAS_SPELLING // 2-way-bind

				ALIAS
				SPELLING
				_%s_ // TEMPLATE USED "%s_%s" LHS RHS
				DECODE LHS_RHS
				 P0P2 LHS_P0P2
				 P0P2 RHS_P0P2 OPTION as_Q2 "P0P2"
				 P0P2 RHS_P0P2 OPTION as_Q1 'P0P2'
				 P0P2 RHS_P0P2 OPTION as_ALIAS 'P0P2' 'ALIAS'
	_union_either_both	 // LHS RHS // P0P2 ALIAS //
				 // LHS RHS // ALIAS P0P2 //
	
	MODULE += MODULE
	MODULE += MODULE { SCRIPT } // BENCH places this ACTION_ARGS to LOCN
	MODULE += INVOKE { MODULE ARGS } // API can require ARGS be VAR_NAMES
	MODULE += MODULE { // _VALUE // _STREAM // _MODULE // ... }
	+= _const _type _var _usage _SPEC _NAME _ALIAS 

	+=
	_const
	_type
	_var
	_usage
	_SPEC
	_NAME
	_ALIAS 
	_EXPR

 += FEATURE_LABEL_NAME

 	FEATURE = "_%s" FEATURE ONE_OF BUILD_LIST // PRE_BUILT _RT
	eg "consts" 
	eg "var_pool_one" 
	eg "TYPE_SPEC" // LANGUAGE LEVEL LUUKUP VIA CT_RT API
	eg "EXPR" // LANGUAGE FLOODGATES CONNECT BIND NAME

	PSG += LEXICON of CXX phrases usages USED HERE STREAM
	PSG += STREAM_P0P2_CHUNK
		// buffered_chunk_packet_edge _invisible_seam
		// buffered_chunk_P0P2_EOT_SEEN // no NUL required

	PSG += MODULE components 
	// += _const _type _var _usage _SPEC _NAME _ALIAS  // DECL USED

	PHRASE _const type_name var_name
	// TOKENISATION // int idx = get_IDX("type_name")
	// TOKENISATION // int idx = get_IDX("var_name")
	// TOKEN LOGIC "var_name" is an IDENT in some var_pool_or_expr
	PHRASE _type type_name type_spec // possibly the same PTR IDX OBJ
	MERGE NAME SPEC to the same obj encoded as IDX
	MATCH "merge name spec both to obj as IDX // name spec both obj IDX"
	MATCH " -lhs-somehow- HERE LIST_of_NAME 
	HERE {
		SPEC can describe _struct _psg _diag _DIAG _ARRAY _SUBSCRIPT
		SPEC can describe _SUBSCRIPT { "%s.%s" LHS RHS }

		# during the build of ARGV
		# check each arg[i] 
		# stream over arg[i] each # in PKT_FRAGMENT
		# build local /* plenty of QUOTA ROM TEMP */
		# parse subsection # ie a complete branch of a parsed tree
		# parse tree # to obtain tree # loaded # on_EVENT
		# default is to 8K buffer in 64K CT_RT MEM_16_PAGES 
		# that gives 64K of surrounding IDX_SPACE # and OPTION LIST
		# that gives 64K of surrounding TEXT_SPACE # and OFFS _u16_OFFSo
		# if need more than 64K bytes switch to i8_i8_i16_i32
		# i16_from_u16 u16_from_i16 # in_NAME in_BIND in_DATA in_SPELLING
		# CT_RT uses FILE_OFFS as CODE_POINT of DECL or MENTION or USE
		# CT_RT uses XPOS as FILE_OFFS as _FILE _OFFS FILE OFFS
		# mention mk_var "OFFS" as CT_RT "{ as_OFFS() }"
		# MATCH Q2 { SP %s SP } Q2 -with_GAPS-EOLN-or_NOT
		# ARGV MATCH # AUTO SPLIT_JOIN WORD_LIST IDENT PUNCT PSG #
		# ARGV PSG # slightly stilted SCRIPT to decl PSG for ARGV #
		
		There is a binary tokenisation advantage,
		for ints to fit in BITFIELD
		for VARS to fit in BITFIELDS

		To do this ALSO requires
		provide SCRIPT that implements VARS_in_BITFIELDS
		SCRIPT_STEP set BITFIELD VALUE // after_FILTER // in_SCRIPT SCRIPT
		SCRIPT_STEP get BITFIELD VALUE // REQUIRE GEN BITFIELD_xFFFF_AVR
		AVAR == "VAR_NAME"
		

		# CT_RT uses XPOS as FILE_OFFS as CODE_POINT of DECL or MENTION or USE

		# MULT 
	}

	/
	
	}

# BITFIELD #
# TOKENISED_SCRIPT #
# OPCODE # ARGS # BITFIELDS # += locals += usage

	GETTER NBITS
	GETTER CURR_POS_AT_BIT_ZERO
	GETTER CURR_POS_AT_BIT_WORD_MAXPOS // bit_63 in i64 // UDEF 
	AVAR NBITS
	AVAR CT_RT_
	API_AVAR CT_RT_AVAR("AVAR")
	API_AVAR CT_RT_NBITS("NBITS") // add your vars near here //

DECODE_i64

	_underscore is to label thisname is local 
	_used by LIBR_api for CT_RT_LIBR CT_RT LIBR // or LIBR_LINK_WRAP
	
	_i64
	_i8_i8_i16_i32

	_i8_i8 _i8i8_LOHI_AB // usually aligned u16 or u64
	_i8_BYTE_A
	_i8_BYTE_B
	_i16
	_i32

	_i8_i8
	_i16
	_i32

	DECODE EACH FIELD

	_i8_i8
	_i16
	_i32

		Almost immediately replaced with "UDEF"
	
	DECODE using i8_i8_i16_i32 
	DECODE using i64




