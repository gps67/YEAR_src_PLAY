	2024-03-15

	2024_03_Mar
	
	API_C_CALL_API

	 _VARS_api
	 _C_CALL_api OBJ_api
		 IDX_api
	 .txt

	 _VARS

	 _C_CALL_api

	 	name is without prototype
	 	name with added prototype
	 	name with added prototype and RET_VAL_TYPE

	 _OBJ_api

	 	DECODE i64
	 	DECODE i32
	 	DECODE i8
	 	DECODE i8_i8
	 	DECODE i8_u8
	 	DECODE i8_u8_116_i32 // OPCODE picks i16_i32
	 	DECODE i8_u8_u16_i32 // OPCODE picks u16_i32

	 _OBJ_field_api //_expr_

	 	EXPR PSG of EVAL exprs and ...

	 _IDX_api

	 	CODE_FRAGMENT[i] = ...

	  EA_EXPR_as_RET_VAL_from_MINI_MACHINE

	  	RET_VAL = lookup STR0 in TABLE
	
	  	ITEM = lookup STR0 ins TABLE
	  	CODE_STEP = ITEM
		RET_VAL = CT_RT EVAL CODE_STEP // as_RET_VAL //


	 MACRO_STEPS

	 	a single step can be built from a ist of steps MICRO_CODE

	MACRO_CODE 

		the instruction set is created as SCRIPT of simpler steps LIST_of_LINES

		the SCRIPT can be PRE_COMPILED 
		the TABLE can be PRE_GENERATED then RUN_EDITED

			eg first RUN does a CACHE FIRST FETCH

		optimiser can look for similar exprs in tail of other INSTR
		so it gets those to leave the prepared values available
		or not
	
	LARGE SPACE

		i64 u64
		i48 u48
		i32 u32
		i24 u24
		i16 u16
		i8  u8
	
	 ALIAS SPACE for PLUS_of_INT

	 	u63 u47 u31 u15 u7
	
	 ALSO BITFIELD_EXPR 

	 	SIGN INT
		SIGN UNS

	 	BYTE_A		MINUS_ZERO_PLUS
		BYTE_B		MINUS_ZERO_PLUS
		PAIR_CD		MINUS_ZERO_PLUS
		TRIP_BCD	MINUS_ZERO_PLUS
		FOUR_ABCD 	MINUS_ZERO_PLUS

	 	BYTE_E		MINUS_ZERO_PLUS
		BYTE_F		MINUS_ZERO_PLUS
		PAIR_FG		MINUS_ZERO_PLUS
		TRIP_FGH	MINUS_ZERO_PLUS
		FOUR_EFGH 	MINUS_ZERO_PLUS

	MINUS_ZERO_PLUS {
		on_ZERO_is_on_PLUS
		PRE_on_ZERO() { if ( on_ZERO_is_on_PLUS ) CALL on_PLUS() else CALL on_ZERO() }
		on MINUS() { SCRIPT }
		on_PLUS() { SCRIPT }
		CT_RT
		 CT_FUNC_is_GETTER on_PLUS ; u7 = (u8) i8 ; already u7 ; idx = u7 ;
		 CT_FUNC_is_GETTER on_ZERO 
		 CT_FUNC_is_GETTER on_MINUS
	}
		


	


