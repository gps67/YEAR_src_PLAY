	2024-05-07

	2024_05_May
	2024-05-07_API_FEE_FI_FO_MMAP_OPCODE_API_HEAP_EA_EXPR.txt

	MMAP	- 4K 64K 2G 256T

		4K MINI_HEAP must have a minimal header, and CODE_POINT nesting

		This will never be a TEXT VIEW so go binary struct immediately

		MINI_HEAP_4K_u8_idx

			a dozen items, usually fits in u8_idx
			auto_grow_u8_u12_u16_u24_u32
			auto_sign_MINUS_ZERO_PLUS_or_UNS
			auto_origin for MINUS_AFEW_PLUS_MANY ZERO_MEANS_NULL
			auto_grow L_M_Z_N_R u8 u16 u32 u64 NBITS_UNS
 !WOW!
	L_M_Z_N_R	means full use of ARRAY[ u16 ] then expand u32 via u24
			a handful of MINUS special values in the design
			a SCRIPT full of MINUS special values in the files
			[MINUS [0[PLUS [N
	  [LEFT		[MINUS [0[PLUS [N	[RIGHT // REALLOC every DOUBLE

	  DOUBLE currently x1.3 at least +20 for MCU and ROM usage

	  DOUBLE will exactly match NBITS in IDX_t # realloc with EXTRA_NBIT

	  	KNOW M is_MINUS or is_ZERO // 
	  	KNOW M is_VALID_idx_BUT_of_MINUS

	  	N_TOTAL = N - M // EXPECT PLUS or ZERO
		GAP_REQ = N_TOTAL * 1.3 - 1 AS_UNS
		GAP_REQ = AT_LEAST( GAP_REQ, 20 ) // 0 is OK for ROM_NO_GAP
		if( GAP_REQ == M1 ) { KNOW_ROM_NO_GAP ; GAP_REQ = 0; }

		BITFIELDS

		NBITS steps up
		NBIT_FULL requires holder uses a wider WORD that NBIT_FULL+1

			ie u8_idx goes from x00 to xFF
			ie u8_N goes 0x00 to 0xFF then 0x100 // 9'th bit for 8

			This is not a problem for u7 or u15
			This is always a problem for u7 or u15
				actually you could pre-alloc NULL and M1
				then N would be below 0xFF M1

	L_M_Z_N_R
	L__M__Z_____P______N__R
	L GAP M M2 M1 Z PLUS N GAP R
	L is M // either ROM or shifted down
	M is -3 // M_allocated M2 M1 // N_of_M = Z - M // Z == 0 //
	Z is 0 // always
	N is idx_NEXT item just outside our ALLOC array
	R is idx_NEXT_RIGHT item just outside our memory

		GET( i16_idx )
		DECODE( i16_idx_t idx_P ) // here only 256 are used

			POS = idx_P - L // this is generic MATH RULE STEP N idx

		KNOW LIMIT [-256 [0 [+256  but only LIMIT[u8]
		THEN SPLIT

			MINUS_TABLES_i32	// i64 next // i65_N_t
			PLUS_TABLES_u32		// u64 next // i64_and_M1_done

		It is upto OPCODE to get IDX_t through
		It is upto OPCODE_PLUS_1 to get N needs NBITS_plus_1

			when NBITS goes from u31 to u32
			we must expand u33_N
			or we must have is_FULL is_EMPTY flags
			or switch to u64

			I think ARM32 can do u64
			It only requires a small amount of work
			and we never have idx larger than u32 just N_over_by_1

			I think we are going to limit ourselves to u24
			That can be safely stored in u32 or u31

			when NBITS goes from u32 to u33
			we must expand u33_idx_u34_N probably as i64

			we can then expand to u63 in i64
			we stop at u48 because 256T is plenty
			keeps u8_u8 

			f64 requires entire word
			f64 requires entire word and PREFIX OPCODE

	struct L_M_Z_N_R
	{
		//  L__M__Z_____P______N__R
		// LM_____Z_____P______N_R

		int_one	L;
		int_one	M;
		int_one	Z;
		int_one	N;
		int_one	R;
		int_two	N_TOTAL;

		int_one	P; // CSR POS often PLUS or MINUS 

		CHECK M <= P
		CHECK P <  N // P == N_next means STOP am past LIMIT
		CALC X = P - L // idx_P == X //

		ALLOC_PLUS P = N ++ // note return new next before step next

		ALLOC_MINUS P = --M // note decr BEFORE returning new value

		KNOW P == M
		KNOW P < 0
		CHECK L <= M else {
			NR_top_gap = R - N
			if( N_top_gap ) { // use it copy up make space in MINUS
			//	L2 = L
				M2 = M
			//	N2 = N // unchanged
			//	R2 = R // unchanged  ALLOC 
				N_low_gap_half = N_top_gap / 2;
				// that rounds down // sligh bias but valid
				SHIFT_COPY_DATA_
			}
			// re-balance 1/3 or 2/3 or 1/4 3/4 along gap
			// 3/4 means grow this side
			// if 1/4 is less than 3 { 0 1 2 } jump to 0 or ASIS
			// recalc the shift - on a clear day
			// perform the shift
			// null out for safety
			LM_left_gap = N_low_gap_half
		}

		int_one idx_Z = Z - L // (P2-P0) // or M if no gap
		int_one idx_Z =   - L // L is_MINUS flipped via (P2-P0) shift
		int_one idx_P = idx_Z + ( P - Z ) = P - L


		on_grow_TOTAL_requires_grow_BITFIELD

			see if N and idx fit within same WORD_LENGTH int_one

				simply modify recorded NBITS
				continue using int_one

				get_space is a seperate operation
				might not be needed, 
				step up in OPCODE not STORAGE

			else
				on_grow_BITFIELD_requires_GROW_WORD_LENGTH

		on_grow_BITFIELD_requires_grow_WORD_LENGTH

			because_idx_as_well_as_N
			because_not_idx_just_N

			new structure will need new headers
			maybe they dont need DATA realloc only HEAD realloc

			upgrade in-situ
			then grow_TOTAL_resume

	This gives us a TEMPLATE_API which AUTO_GROWS IDX and STO for ARRAY

		on_int_one_idx
		on_int_two_idx
		on_int_one_N
		on_int_two_N
		
			int_one i16
			int_two_i17


	u8 u16 u32 u64 NBITS_UNS

			first 256 items allocated 
			fit in OPCODE + BYTE

			GENERIC NBIT ITEM might fit in BITFIELD
			template <NBIT> <shift_state>
			{ 6 2 0  // &= 0x03 // ZERO sign extend BIT2
			{ 4 2 2  // left shift 4 bits THEN down 6} 6 == 8-2
			{ 2 6 0  // &= 0x3F // ZERO extend from 6 to 8 to WORD
			{ 2 6 0  // BYTE <<=2 SIGNED_BYTE >>=2
			{ 2 6 0  // BYTE <<=2 BYTE >>=2 // unsigned is now default
			{ 2 2 4 } // left shift 2 bits THEN down 6
			{ 0 2 6 } // shift down from top - no left shift

	HEAP	- array [ u8 ] of EIGHT_or_NN_or_u32_WORD // SIMPLE for u24
	HEAP	- array [ u24 ] of EIGHT_or_NN_or_u32_WORD // SIMPLE for u24
	HEAP	- array [ u32 ] of EIGHT_or_NN_or_u32_WORD // SIMPLE for u32
	HEAP	- array [ u48 ] of EIGHT_or_NN_or_u32_WORD // SIMPLE for u64

	CHOICE LIMIT DISK MEDIA to u48 // than can use u8_u8 there too
	DECODE_u48 from BITFIELDS in u64_u64 // a Tcl_Pair // u32_u32 _compat
	DECODE_u8_u8_u16_u32 from BITFIELDS in u32_u32 // a Tcl_Pair // u64_WORD
	Tcl_Obj * TCL_VALUE_u32_PAIR // design for ARM32 // optionally via TCL



	EA_EXP	- u2 u6 u8 u12 u16 u24 u31 u48 u64R



	MMAP

	HEAP

	EA_EXPR


