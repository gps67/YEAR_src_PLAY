	2024-05-09

	2024_05_May
	2024-05-09_API_MMAP_OPCODE.txt

	u8_u8 u16_u32

	  u8_u8 says:

	  	u4_OPCODE_u12_DATA

		 0000
		 0001
		 0010
		 0011

		 0100
		 ....

		 00..	list_zero above
		 01..	list_one
		 10..	list_two
		 11..	list_MINUS

		 	FLEXI_SPEC allows LIST_TWO to be LIST_MINUS_NEXT_PAGE
		 	FLEXI_SPEC allows LIST_ONE to be LIST_MINUS_NEXT_PAGE
		 	FLEXI_SPEC allows LIST_ZERO to be LIST_MINUS_NEXT_PAGE

	M_upto_N is a technology

		it is used a lot in PICK_ITEM[BYTE] TABLE ITEM[IDX_t]

		NB DATA uses NBITS
		NB CALL uses NBITS

			eg the first 256 are really quick in CACHE
			after that CT_RT can eith use _RT or PAGE[] to LIMIT
			eg the fist ITEM_4096 are all in HEAP EXPORT AREA
			so HEAP_UNEXPORTED_AREA is u12_more or u24_more

			OPCODE selected depends on NBITS that PICK requires
			The L_M_z_N_R decoder converts
				[-25[200
			into SPLICE_of_larger_PAGE_or_joined_PAGES

			We use it for u4_u12 OPCODE_ITEM

			OPCODE GET_OBJ_as_CSR_GET_ONE of AVAR
			OPCODE GET_OBJ_as_CSR_GET_TWO of SCOPE
			OPCODE SET OBJ to AVAL

			OPCODE SET OBJ to AVAL_ONE
			OPCODE SET OBJ to AVAL_TWO

			OPCODE SET OBJ to AVAL_ZERO is preused for AVAL plain
			OPCODE SET OBJ to AVAL_M1 is preused for AVAL M1

			So u2 is abbreviated to u1 in OPCODE MINUS_ZERO_PLUS
			So u2 is abbreviated to u1 in PICK MINUS_ZERO_PLUS

				ZERO_PLUS is only one available when u1
				Your choice if it is NULL or active

			So u2 is still available, two MACROS 2_idx 4_idx

				[0]		_ZERO
				[1] _ONE
				[2] _TWO
				[3]		_M1

			So u4 gets choice ALL_PLUS // incl_ZERO
			So u4 gets choice MOST_PLUS // M1_ZERO %
			So u4 gets choice MOST_PLUS // L_R // M_N //

				[M1[ZERO[N
				[M25[ZERO[N_200

				[-25 ... [0
				         [0 ... ITEMS ... [2000
				
			L is absolutely required to find Z
			M is only required to check in_RANGE(idx)
			N is only required to check in_RANGE(idx)
			R is only required to ALLOC_more

				R could be KNOWN_16
				R could be KNOWN_256

			NBITS_required_for_IDX -129 requires i9 not i8
			NBITS_required_for_IDX ALL_ITEMS_ fit in u8_PAGE
			ALL_ITEMS are addressable as u8_idx
			N_ITEMS however requires EXTRA is_EMPTY bit
			N_ITEMS however requires EXTRA is_FULL bit
			N_ITEMS however requires EXTRA ZERO_MEANS_TOP1_BIT

			that also allows u64 to be used upto limit
			without needing u65 

 GET_OBJ  u12_idx // EIGHT_t CACHED_EIGHT[4096] MMAP direct
 GET_OBJ  u12_offs // EA_BYTE in SCRIPT_CHUNK_TEXT_4K // _PAGED
 GET into GET_ONE as "OBJ"
 SET from SET_ONE as "OBJ"
 SET_OBJ  u12_idx 
 SET_OBJ  u12_OFFS // EA_BYTE in 4K SCRIPT SOURCE

 	OBJ = idx_ITEM
	NEW_VAL = u4_u12 

--- or ---


	DECODE( u16 ) as

		u4_HEAP
		u12_ITEM

	HEAP has EXPORT_TABLE_of_ITEM_4096[u12_idx]
	HEAP has STORAGE_TABLE_of_ITEM_4G[u32_idx]

	HEAP has DECODED_EA_EXPR_ITEM_4G(u32_u32)
	HEAP has DECODED_EA_EXPR_ITEM_4G(u32)
	HEAP has DECODED_EA_EXPR_ITEM_4G(u16)

		16 heaps is a lot for a MINI_MACHINE
		4096 items per heap

		u4_u8 items per heap
		16 ZONES per HEAP
		u8_ITEMS per ZONE (AVAR in A_CALL_FRAME)

	COMPILER
		if BIT256[ u8 ]
			maybe_it_is_traced
		else
			u8_FILTERED = FILTER[u8]
			u8 = u8_FILTERED // u8 original var name AFTER
			// known syntax procedural to functional
			// FILTERED

 MMAP
 HEAP

 	MINI_HEAP[u8]	-- OPCODE diallows MINUS idx
 	MINI_HEAP[i8]	-- so _u8 = _i8 - M // X_idx_of_V_idx
	// V is actual VALUE // X is where on_screen_XPOS_is

	u4_i5	[-16   [-8    [0    [8    [16 
	u5_i6	[-32   [-16   [0    [16   [32 
	u6_i7	[-64   [-32   [0    [32   [64 
	u7_i8	[-128  [-64   [0    [64   [128
	u8_i9	[-256  [-128  [0    [128  [256

	-256 is within range and fits in u8 as i9 oradded flag is_MINUS or M
	-128 is within range and fits in u8 as i8
	+127 is within range and fits in u8 as i8
	+255 is within range and fits in u8 as u8
	+256 is boyond range and fits in u8 as i9 or added FLAG

	MINI_LIST 
	
		ITEM[u4]

		ITEM_t is EIGHT_t
			u64
			i64
			u32_u32
			i32_i32
			u8_u8_u16_u32
	
	ASM HABIT 
		use V in stored OPCODE	- only needs 1 NBIT more
		use X in stored OPCODE	- needs DECODE ENCODE X

		so promote NBIT_8 to NBIT_9 // annoying double jump ?
		so defer promoting until [-128[128 crossed X == V in i8

		even then progress to u8 is no MINUS
		even then progress to M_u8_N with NO optional GAPS

		Still taking advantage of i8 i12 i16 i24 i32 i64
		then having difficulty with i65 - needs FLAG or M1 ZERO



		       [-128  [0    [128  
		[-256  [-128  [0    [128  [256





