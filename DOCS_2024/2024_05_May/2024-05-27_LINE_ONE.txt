	2024-05-27

	2024_05_May
	2024-05-27_LINE_ONE.txt

	First Line Support TASK list

	array[ idx = N_task ++ ] of new_OBJ("OPENED_TODO_ITEM")


		TICKET per TASK

			TICKET ATTRIBUTES PRIOIRITY STATE etc
			TICKET DESC is mostly in per task SUB_TREE SUB_TASK

		SUB_TICKET per TICKET per TASK

			extra SUB_TICKETS in LAYOUT with DIAG_VIEW

			first SUB_TICKET used as own META, optinally not ARG0

		ITER_TREE SUB_TICKET_LIST // OPTION +/- ARGV0.META.SUB_TICKET

			That alloes SUB_TICKET to have a DTP Layout VIEW
			With a few adjustments for TITLE_LEVEL_FONT



	SESS = A_TASK

		bullet point list of issue symptoms
		each can be reviewed into tickable test

			TICK = AUTO_RUN_TEST TEST_CALL
			TICK = AUTO_RUN_TEST TEST_CALL_LIST
			RED_GREEN = AUTO_RUN_TEST TEST_CALL --into_RED_GREEN

			AUTO_CAST and --into_%s // a knowable traffic light DECL
			// name known from surrounding SCRIPT // sticky_CT_RT
			// sticky_CT_RT_fly_paper // but squelch warning
			// FILTER triggers a signal and replaces CSR with WRAP_CSR
			// FILTER adds sticky_detected _and_API_found

			but first TICKET can grow subtree of DBID_TICKETS
			so a TICKET can be a part of a wider TICKET
			counting them means we use SUB_TICKETS
	
	STAFF += LINE_ONE_STAFF_PERSON _logged_in_and_active _assigned

		when ticket lasts longer than 2 minutes, 2 days, 2 weeks

			STAFF remains invlolved
			This is true for all, as being OPEN heartbeat

		when third line passes back to first line

			TEST is a placebo for LINE_TREE
			LINE_ONE is a placebo for LINE_TREE

			ASKS is a bounce back, ongoing condition
	
	LINE_ONE STAFF

		builds TODO for TASK
		builds SUBS for TASK_LIST
		builds SUBS for TASK_STEP_LIST
		builds SUBS for SUB_TASK_LIST // hidden CXX class for above

	First Line Support TASK list

	array[ idx = N_task ++ ] of new_OBJ("OPENED_TODO_ITEM")


		CTOR clarified for sake of DIALECT as new_OBJ(STR0)

			STR0 is ANYSTR except stops at first NUL

			OPTION use a sensible but policed RESERVED_ENCODING

			RESERVED_ENCODING

				standard says it is a value error
				standard says it is a CSET reader illegible error
				standard says it is a syntax_of_CSET_in_lex error

			FILTER collects all those RESERVED_IDEAS


				CACHE can hold const CACHE_ITEM = AVAR
				const AVAR_is_const_once_initial_value_obtained
				const AVAR_is_const_but_has_varied
				_since_initial_value_obtained
				_SESS_initial_value_obtained // new_VALUE is PRE_LOADED
				A_VALUE = lookup AVAR(AVAR_NAME)
				know AVAR_is_const // so code was generated
				know AVAR_is_changed // _replaced _NEW_VAL
				know ERA_EDGE_NOW_EDGE_NEXT_STEP_EDGE _ETC

			ERA math

			ERA_is_BATCH

				we have a finite 4 hour batch jobs
				done in 45 minutes
				done in 4.5 seconds
				done ALREADY // CMNT tells GIT STORY

				ERA_BEFORE
				ERA_DURING 

					ERA_NOW TIME_NOW _THIS_STEP _CSR

					// _IDENT means _%s reserved for USAGE
					// _IDENT means _%s reserved for EXPORT
					// _IDENT triggers GEN _IDENT EXPORT
					// _%s EXPORTS to PEERS under GROUP
					// _%s claims varname // detect clash
					// _%s has a programmer pre_allocate
					// SCOPE %s AVAR _%s 
					// AVAR %s // AVAR is also the POOL
					// AVAR VAR_POOL // _POOL _NAME // ALIAS
					// AVAR VAR_NAME // _POOL _NAME // PAIR
					//

				BATCH is divided into STEPS // parsed into TREE
				OBTAIN SQL LOCKS for two seconds for these VARS
				CT_RT provided tokenised TREE of SCRIPT
				CT_RT provided tokenised ITEM of BENCH FILE

				Basically we know the IN and OUT of these VALUES
				Maybe we dont know the _IN until _LATER

			_LATER is CT_RT_fluid

				CT_RT _LATER means after LOAD_from_SCRIPT _CT
				CT_RT _LATER means after LOAD_from_SESS _RT
				CT_RT _SESS is also dual CT_RT SCRIPT _EXPR
				CT_RT _SESS _CT GEN _GEN "{ BIND }" 
				CT_RT _GEN "{ BIND }" // auto add to _PARSE
				CT_RT _GEN "{ _DECL }" // XPOS == XPOS_one
				CT_RT _GEN "{ %s }" // auto add to _PARSE

 _DIAG
 _XPOS	// usually ALIAS to XPOS_zero // ZERO_BITS_of_DATA_other_than_CODE_POINT
 _XPOS_PICK // "{ u2 PICK }" // u2_XPOS_at_DIAG_XPOS_idx // u2 u8 u24 //
 _XPOS_zero // GOTO_ZERO_is_PLUS // USAGE DECL from SCRIPT DECL
 _XPOS_one // I link _one _two // actually numbered the same to avoid confusion
 _XPOS_two // I link _one _two // actually numbered the same to avoid confusion
 _XPOS_M1 // M1 is a special reserved vector signal // M1 SIGNAL // M1 ERROR //
 _XPOS_idx // _idx is u2_idx or u8_idx or u24_idx or UDEF_idx 

 	note that if you then allow u2_idx to overgrow to u24_idx
	OPTION M1 is a hole at PLUS_three
	OPTION M1 is a hole at MINUS_1 // or M2 or MINUS_few or MINUS or M_UDEF

_XPOS_DIAG

	XPOS is only suppoed to have one XPOS "{ FILE OFFS }" or only OFFS

		PSG OFFS
		PSG { OFFS }
		PSG "{ OFFS }"
	
	 USAGE says OFFS is CT_RT OFFS is OFFS == AVAR "OFFS" // MATCH_VAR_MODE
	 // MATCH VAR.NAME "VAR_NAME" // PSG FILTER STEP on TREE //

	 XPOS can have 4 different values in an u2 with added CODE_POINT
	 CODE says dont_use_M1_at_all //_CT
	 CODE says init_zero // _CT _RT _CT_RT
	 CODE says check_limit CT_RT ... // will_fit_in_u2 // "{ u2 u8 u24 }"
	 STEP XPOS == XPOS_two
	 ARG0 is TEXT MUX _PICK_LAYER LAYER STEP += ARGV is CODE_as_ARGV
	 ARG0 is TEXT MUX _PICK_LAYER LAYER STEP += ARGV is CODE_as_ARGV
	
	XPOS is EA_LEX_P0
	XPOS is XPOS_zero // the XPOS itself

	XPOS_three == XPOS_two // PLUS any GAP after that // PLUS EOLN // _lex
	XPOS_two == EA_LEX_P2 // OPTION _as_P0P2_N _as_N _as_P2 _as_P2_partial

	_partial allows _OFFS instead of "{ FILE OFFS }"
	_FILE is implied, to this wave of LEX_FOUND_AT_OFFS _from_ZERO

	XPOS_one == XPOS_within_LEX where something is happening
	XPOS_zero == XPOS

	_zero == P0 = XPOS + ZERO // ZERO == 0 //
	_one == P0 + adj_one
	_two == P0 + adj_two
	_three == P0 + adj_three

 OR
	OFFS_zero == P0 = XPOS + ZERO // ZERO == 0 //
	OFFS_one == P0 + adj_one
	OFFS_two == P0 + adj_two
	OFFS_three == P0 + adj_three


 WHEN
 BATCH XPOS WHEN






