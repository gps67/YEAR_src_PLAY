	2024-06-10

	2024_06_Jun
	2024-06-10_TODO_list.txt

	PERF_PIPE

		generic protocol for streaming time series data

		LIFE_LOOP - WEEK_BACK done
	
	PING_TEST

		find it, replace it, 
	
	DISK SORT

		sha1sum of TEXT

			sum_used = u8_PICK = idx_used
				PICK[pick].INFO_ABOUT_MD_SUM

					N_bytes == 16
					N_bytes == 32

Since shasum mimics the behavior of the combined GNU
sha1sum,
sha224sum,
sha256sum,
sha384sum, and
sha512sum programs, you can
install this script as a convenient drop-in replacement

	libs_apps

		crypto 
		DES_rfb
		SUM_TEXT
	
	sqlite

		BLOB as BLOB
		KNOW BLOB type from CALLER_SPEC and BLOB_DATA

			BLOB is MMAP ITEM at P0_N // poss within stream
			BLOB is WRAP_BASE64_A // _A _B _C _UDEF
			// STANDARD UUADJUSTED MYADJUSTED UDEF 
	ipt

		IPT via shell
		BPF -vs- IPT
		IPT_QUEUE

			FILTER must decide for each first packet
	
	OPCODE_FILTER

		FILTER_over_WORDS

			ensure RANGE is OK
			ensure CT_RT has been run, or collect to do so
			ensure u8_u8 does not step outside allocated ranges

		FILTER over ARGV

			ensure RANGE is OK // PHRASE refers to local stuff

			ensure PSG has already tokenised all SPELLINGS

			MATCH ROM PHRASE TEMPLATE and on_match_action()
	
		SINGLE_STEP on _WORD

			debug IPT firewall with TEST DATA and SINGLE_STEP

			batch WORD_LIST with single END_RUN_RET_VAL
				MID_RUN_PRE_RET_VAL // SEMI_STATE
				END_RUN_RET_VAL
	
	PSG is CORE TECH
	GEN is CORE TECH - MATCH PSG GEN - AUTO_TEST_WRAP

		firstly CXX can only use C++ operator
		expand CXX can use OWN_NAME_operator
	

	BENCH += DIR_SUB_DIR

		layout fragment

		LOCN / adir / OBJ_FFFF 

		MMAP_
		HEAP_ITEM
		ATTR
		EXPR

	SCRIPT needs PSG and GEN 

		LOOP make all SPOUT outputs
		LOOP make all SPOUT outputs # but as PENDING ACTIONS LAZY EVAL

		DIALECT uses LISTS of ADDED so that it has a consistent API

		API_GDI might be libx11
		API_GDI might be cairo
		API_GDI might be WIN32 // WORKING SUBSET underneath WIN64_wine
		API_GDI might be WIN64 // WORKING SUBSET WIN32 does it ALL ASIS
		API_GDI might be SVG // as_TREE loaded from XML from API
		API_GDI might be tcl_ // _tk through an API widgets and draw()
		API_GDI might be SPOUT // WAX_based_

		AUTO_CODE MOUSE_NEAR_COMPONENT

			not if other components are more relevent

			yes if near or exact

			XPOS wrt COMPONENT layout diag

			PIXMAP - easy way of communicating shape 

			   |
			---+-------+
			   |P0

				   |
				---+----
				   |P2


			   |
			---+-------+--------------------*-----
			   |X0 PREV_ZONE |different parameters
			---+-------+--------------------*-----
			   |X0 PRE_START_OF_ZONE |X1
			   |X0 GAP |X1 GAP2 [X2 // /* is gap */
			---+-------+--------------------*-----
			   |X0 PRE_START_OF_ZONE |X1    |X2
			---+-------+--------------------*-----
			   |X0				|X2
			   |P0				|
			   |P0	   +--------------------+
			   |	   |
			   +	---+----
				   |P2
			   |X0 NEXT_ZONE |different parameters

		add each feature to DIAG eg "X0"

			each has own DECL and SCOPE
			intentionally AVAR in SCRIPT FUNCTION LOCAL
			intentionally AVAR ALIAS "X0" of different FRAGMENT
			intentionally AVAR ALIAS "X0" of bounced_SSA_as_VAR_NAME
	
	DRAW is basic TeX machine in a box

		it has FONT in LAYOUT 
		we can match with FT2 FONT draw and LAYOUT
		we can match BOTH with POSTSCRIPT_MATRIX

			or components

			ROTATE by ANGLE around ZERO

			ZOOM by FACTOR around ZERO // hotspot_ZERO
			
			ZERO_at_TOP // ZERO_at_BOTTOM

			SLIDE by DY by DX 
			PLACE at ZERO + OFFS

				ZERO = PARENT_VIEW_ZERO XY_POS
				OFFS = XY_POS relative to ZERO
	
	DRAW is SPOUT in FRAME near NEAR
	DRAW is SPOUT in FRAME with adjacent PANELS

		ITEM
		DRAW
		VIEW
			+= HOTSPOT

				NAME in SESS
				XY_POS in SESS 
				CODE_POINT_in_SCRIPT _used_by_SESS _XPOS

				NB _XPOS is usually "{ FILE OFFS }" and friends
				NB _XPOS is also "{ XPOS X2 }" // PIXEL_POS
				NB _CSR can use '{ float xpos_as_pt }'
				NB _CSR can use '{ fix_24p8 xpos_as_pt }'
				NB _CSR can use '{ fix_24p8 xpos_as_pt_t }'
				NB _CSR can use '{ xpos_as_pt_t xpos_as_pt }'

			+= CODE_SAYS

				HOTSPOT is the attachment point
				top left ish // item itself has this ATTR
				bottom left ish // POSTSCRIPT building PILE

		BIND AVAR HOTSPOT.ATTR.AVAR

				CALLERS code must provide these features

				Can call BASE_CLASS and have it do it
				TEST compiles, TEST runs

		DECL AVAR is how we implement ATTR

			they are the same thing
			sometimes both collapse to u64_EA_EXPR
			ALIAS from this paragraph // manually wrttien AUTO GEN

		DECL ATTR HOTSPOT HANDLE

			MODE - click carry anywhere within FILAMENT
			NEAR - HANDLE is drawn to you to see, eg fade FGBG BG
			DRAG - move DRAW with MOUSE - a form of API
	TEST KNOW

		fix_24p8

			fixed_point_number
			24.8 // BINARY OBVS //

		fix_22p10

			MULT_1024 // close to 1000 liked by PS_FONT_INFO
			MULT_1000 // used as 1000 by PS_FONT_INFO

				unfortunately well calculated MULT_1000
				might not stretch evenly to 1024,
				but usually it is held in a double
				and these values are fine XY_POS

				72 / 1000	point info

				150 / 1024	dpi pixels fix_22p10
				pixels fix_22p10

 BENCH TSR

 	most scripts know to call '{ LIBR_INIT }'
	BENCH_LIBR_INIT is capable of asking BENCH to BOOT_STRAP or RESUME

		INIT to saved state
		INIT to ASIS
		INIT to ASIF
	
	BENCH sets up a SESSION 

		SESSION has SESS_sqlite THREAD // thread == daemon //

		LOCK SYSTEM
		 ROM can have multiple readers
		 STO can have single reader, which them RELAYS, CACHE
		 CACHE can duplicate LOCAL REMOTE data // can communicate
		 CACHE can communicate series of on_EVENT _logs
		 CT_RT arranges for CT_ to handle this

 DODO += TASK LIST 

 	freash_run 

		although ROM contains a cached run
		we sometimes want to rerun and CACHE that RET_VAL

		in particular ROM has been modified
		or when ROM runs over adjusted DATA or edited SETTINGS

		it also regenerates the unstored details
		which we now use, in a REPLAY_for_debugging
	
	RUN_RECORD
	RUN_REPLAY
	RUN_SLOWLY
	RUN_CACHED
	RUN_SESSION






