	2024-06-23

	2024_06_Jun
	2024-06-23_HEAP_ITEM_FILLS_BITFIELD.txt


	u12_idx is a special case of M_N // M == 0 // u12_PLUS_N
	u12_idx is a special case of M_N // M == 0 // u13_PLUS_N
	u12_idx is a special case of M_N // M == 0 // u15_PLUS_N
	u12_idx is a special case of M_N // M == 0 // u16_PLUS_N
	u12_idx is a special case of M_N // M == 0 // u17_PLUS_CARRY_N
		_CARRY
		_BORROW
		_is_EMPTY
		_is_FULL
		_00_and_NOT_is_EMPTY_means_is_FULL
		_00_and_is_FULL // means exact FULL
	
	BITFIELD_GROWS

		u0_BASE_CLASS
		u1_DATA_DAWN
		u2_DATA_BITS // u1 is also, so technically is u0
		u7_SOFT_LIMIT
		i8_EDGE_LIMIT // M_idx_N // fit within PAGE of SLOT[u8]
		u8_EDGE_LIMIT // M_idx_N // ARRAY[ u8 ] of UNIT_MULT WHATEVER
		i9_OK_with_i16 // STORE u8 WORD i9 WORD i16 BITFIELD_i12
		i10 // STORE u8 WORD i9 WORD i16 BITFIELD_i12
		i11 // STORE u8 WORD i9 WORD i16 BITFIELD_i12
		i12 // STORE u8 WORD i9 WORD i16 BITFIELD_i12

		CT_RT discoveres the wish to GROW BITFIELD or CHANGE 
		CT_RT looks for dense packing OPCODES with BYTE_FIELDS

		As NBITS crosses (outside_of)  ZERO u8 u12 u16 u24 u32
		As NBITS crosses (outside_of)  ZERO i8 i12 i16 i24 i32

		i64 is special because we cant go beyond there
		NOT likely to ALLOC that many IDX // wont reach LIMIT u63 i64
		YES likely to BITFIELD MMAP over CPU_WORD_  CPU_WORD_PAIR 
		YES use is_EMPTY and provide TEMPLATE code for general use

		ZERO_means_PAGE_FULL // if empty then why is it here ??
		// if empty set an extra flag, clear it on every INCR
		PAGE_TECH is a lot like LIMIT_i12

			i12_MASK = 0x0FFF // at BIT0
			i12_ZOME = 0xFFF0 // at BIT_8 which is BIT8 // u12_u4
			i12_TWO = 0xFFF000 // at BIT_20 which is BIT8
			i12_ONE = i32_WORD >> 8 +  0 // but first shift left 12
			i12_TWO = i32_WORD >> 8 + 12 // from i32 nothin on LEFT

		FUTURE OPTIMISATION
		CURRENT SIMLIFY - always shift left then right

			ie dont look for clever CPU BYTE_FIELD hack

			RET_VAL is WORD from EXPR in from BYTE_B BITFIELD
			RET_VAL is WORD from EXPR in from BITFIELD_BYTE_B
			RET_VAL is WORD from EXPR in from BITFIELD_i12_one

				u8	ZERO	// u8_OPCDODE // u8_DATA_OPCODE
				u12	one	// u8 says use u12_LHS u12_RHS
				u12	two	// u8_says use i12 via M_N

		M_idx_N

		 LIMIT i33_M via is_EMPTY // NO from first ALLOC // GUESS //
		 LIMIT i32_M via i32_idx // ie limit HALF and HALF not M_N
		 LIMIT M is -2G -32K -128 // this is where we are u31_idx
		 LIMIT M is -4G -64K -256 // this is possible with correct BIT

		 i33_idx from i32_idx_and_extra_BIT_somewhere

		 	BIT is 0 - is_not_MINUS _is_ZERO_or_PLUS
		 	BIT is 1 - is_MINUS

		That added BIT enables u32_idx and i33_idx MEGA_MINUS

			in theory it only ever happens at N == LIMIT_PLUS_ONE
