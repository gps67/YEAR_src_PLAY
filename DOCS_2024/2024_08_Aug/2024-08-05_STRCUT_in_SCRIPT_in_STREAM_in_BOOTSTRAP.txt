	2024-08-05

	2024_08_Aug
	2024-08-05_STRCUT_in_SCRIPT_in_STREAM_in_BOOTSTRAP.txt

	Of course we have STRUCT
	as JSON
	as XML
	as TREE_of_SPEC_and_DATA // UDEF //
	as UDEF // CMNT_TAIL

		CMNT_TAIL is DIALECT for ARGV // because on one line
		CMNT defaults to CMNT_TAIL in PSG
		PSG.CMNT = CMNT_TAIL // VIEW as ABOVE lines in SCRIPT
	
	STREAM_NBYTES_over_STREAM

		arrives in 1K packets
		arrives in RAM buffers
		arrives in API calls PKT_IN // which knows about block edge

		// block edge is where the large files are split into 1K blocks
		// usually the API PAUSES at the last half line
		// it does this by passing entire LINES
		// OPTION RUN initial fragment // VIEW_CALL_DATA //
	
	STREAM_NBYTES_over STREAM = STDIN_to_STDOUT # errout_OPTIONAL

		errout_handler

		MUX has an idx for { stdin stdout errout tty_session }
		MUX has an idx for { kbd_in scn_out err_out tty_session }
		MUX has an idx for { kbd_in_VIA } // VIA = VNC_KBD // LINE_ONE
		MUX has an idx for { scn_in_VIA } // VIA = VNC_SCN // LINE_ONE
		MUX has an idx for { err_in_VIA } // CHANNEL == "VIA" //
		// VIA = VNC_ERR // LINE_ONE // unsure if VNC has STDERR 
		// OPTION MODE // STDERR > STDOUT // BUT WITH ADDED LINE_MUX
		// ie COMPLETE LINE is transmitted
		// ie wait to ALL_RECEIVED NBYTES on_AVAIL // 

 BENCH
 	SESS create AVAR with SPEC and OPTS += HINTS

		AVAR.name == "AVAR"
		AVAR.SPEC == "AVAR_SPEC"
		AVAR.DATA == "AVAR_DATA"

		AVAR.CODE_POINT_DECL_ONE == XPOS_AVAR

		AVAR.KNOW += SPEC_of_AVAR == AVAR_SPEC == AVAR.SPEC // CACHE

 CACHE
  AVAR

  	TBS but CT_RT creates a CACHE on first mention

		CT_RT might need to get more details later

		CT_RT might be able to offer an INIT_ZERO default

			typically each field is an AVAR in POOL_ONE
	
	CT_RT POOL_ONE += SPELLING "FIELD" # ALIAS FIELD_NAME FIELD.NAME.GETTER

		GETTER in CT_RT is a lazy PRE_LOAD

			FAST BULK LOAD MMAP DATA in_SITE off_PAGE_ALIGN

				FILTER might stretch TEXT
				FILTER might rewrite TEXT

					REMOTE UDEF in a SANDBOX

						safe_tcl
						safe_JVM
						safe_PID _in_CHROOT in_QEMU
						safe_WASM _in_WASM _in_MMAP

					RUNNING CODE is not safe
					but AOT_PRERUN_CODE_to_COMPILE might be

	RUN in SANDPIT

		There are levels of trust and risk, and sandboxing.

		You can even have a thread of CPU running unfiltered code

		the protection comes from the OS API being SAFE

		the simplest safest is one that is never called, doesn't exist

			simply run CODE without making any API CALLS

		batch_phrase

			run CODE which may add ITEMS to QUEUE
			to fetch from REMOTE ENQ_ACK ARGS BATCH

			entire_batch over stream # ENABLE EVAL STREAM FRAGMENT

			block_edge 

				parse backwards for EOLN # POSS_ABSENT
				treat this half line as unreceived

			nested_sub_block _tree_of

				defer processing nbytes in STREAM_FOUR
				complete nbytes arrives

			transfer all SCRIPTS and DATA then start

				much more efficient, fewer edge cases
				expect all MODULE in LIBR.USER.UDEF
				expect all MODULE in LIBR.USER.VFS.MODULE._ONE

		self_bookin_batch_phrase

			OBJ_ONE declares SPEC_ONE

			// CACHE knows these things
			// CACHE knows already sent // now_with
			// CACHE can replay TEST_DATA // DETECT_ALL_CALLS
			// CT_RT can PRE_LOAD a PRE_GUESS

			OBJ_ONE streams DATA_in _NBYTES
			NBYTES _NBYTES XPOS N_bytes
			NBYTES _NBYTES XPOS N_idx // XPOS == IDX // bytes_each
			// EIGHT FOUR TWO ONE
			// EIGHT FOUR TWO_BYTE BYTE

			// FILTER if required add _ to make _%s
			// FILTER is required when conflicts with NAME

			STREAM has a default FILTER for each nbytes
			DECODER 

		SEND entire MODULE // CT_RT CACHE knows ROM already LOADED

			PRE_LOAD ROM_VFS_FILE_OFFS
			PRE_LOAD ROM_ {
				ROM // ALIAS THIS mentioned in PEER group list
				VFS // ROM += VFS // VFS += TREE_CSR_as_FIELD
				FILE // VFS += A_DIR += A_FILE += A_PLUS
				// PLUS dev_c dev_b fifo dir_mnt symb_link 
				// EACH tree_name _of_leaf _of_twig _of_list 
				// of_TREE += A_FIELD
				// A_FIELD becomes AVAR in VAR_POOL_ONE _SESS_VAR

				OFFS += A_FIELD { %s NAME }
				XPOS_is_IDX
				XPOS_is_OFFS
				XPOS_is_OFFS_in_PICK ITEM from PICK SCRIPT
				// everything is a MODULE // reuse IDENT as IDENT
				IDENT += P0P2_from_PARSER

		PARSER

			ROM is just a bunch of SCRIPTS

				but is COMPILED

			ROM is available as MMAP_segment // FILE or SEGMENT

				fd_surrounding_FILE
				FILE.stat.nbytes
				FILE.nbytes from FILE.stat

				CT_RT PARSE_VAR_EXPR
				CT_RT PARSE_VAR_EXPR_IDENT
				CT_RT PARSE_VAR_EXPR_IDENT_SUBLEX
				CT_RT PARSE_VAR_EXPR_DECL
				CT_RT PARSE_VAR_EXPR_RET_VAL
				CT_RT PARSE_VAR_EXPR_RET_VAL_CACHED
			}






