	2024-08-21

	2024_08_Aug
	2024-08-21_CSR_STREAM_PSG_TWIG_STREAM_ROOTS_STEM.txt

	PSG finds CXX script which it FILTER to CXX_cpp

		There will be 
		C32_MINI_MACHINE
		C64_MINI_MACHINE

		ASM_MINI_MACHINE
		ASM_CPU9_CODE_GEN

		ASM_CPU9_ // BITFIELD SIGN_BITFIELD BYTE_FIELDS _MEM_CPU

		_MEM_CPU 
		  CT_RT GEN BOTH keep STATS OPTIMISE via KNOW + EXPECT
		  _in_MEM
		  _in_CPU

		 Invariably, a MEM_WORD is read
		 so why not access it as a CPU_WORD

		 	_BYTE_A
			_BYTE_B
			_LOHI_BA
			_LOHI_DC // ZERO SIGN extend WORD_32 >> 16


		 as_C32
		  CT_RT code holds the source and the runtime together
		  CT_RT can split merge the 2 CT_ _RT

		 ASM_GETTER_sample

		 SYNTAX gas gcc
		 TESTED gas gcc clang llvm_one g++ 

		 CPU_WORD_i8
		 CPU_WORD_i16
		 CPU_WORD_i32
		 CPU_WORD_i64

		 uns_int_BITFIELD
		 _in_MEM
		 _in_CPU
		 _on_STACK

		 	SECURITY WEAKNESS is always STACK
			because it is in USER data space and EXEC code space

			That happens because '{ ASM ret }' runs

				...
				GOTO RET_ADDR_from_STACK
				...

			so UDEF data is actually run by the CPU
			so POKED data is GOTO CODE ADDR

			amd the rest of STACK too, see API

		inline i32 i32_from_i8_BYTE_B( i32 CPU_WORD ) {
		// AUTO //	ASM x86 MOV BH to EAX ; // REAX // SIGN_EXTEND
		// AUTO //	SRC CPU_REG(BH)
		// AUTO //	DST CPU_REG(REAX) // NOT YET u32_u32 mode 
		// AUTO //	DST CPU_REG(EAX) // RET_VAL == EAX // build that
		// ASIF //	RET_VAL = i32_from_i8_BYTE_B( CPU_REG["B"].i8_BYTE_B
		// ASIF //	BH = CPU_REG["B"].i8_BYTE_B // logic graph
		// LANG //	BL BH BX EBX ((SIGN)EBX>>16)
		// LANG //	BL BH BX EBX ((ZERO)EBX>>16)
		// LANG //	i8_ BL BH i16_ BX i32_ EBX ((ZERO)EBX>>16)

		}

 DETECT
 MATCH

 	NO CODE in this SCRIPT uses ASM

 MATCH

 	SAFE_LIBR_does not need ASM

		SAFE_COMPILER uses nothing else :-)
		ASM is CT_RT_CPU9_ASM // picks up LIBR_CT_RT LIBR_LIBR

	
	EXACT MATCH CODE - rephase as C_CALL or as ARGV of words

		ASM as parsed tree
		GEN then outputs that gas_in_GCC
		TCC then compiles that, and runs TESTLIST FOCUS THEN_LIST
		GCC then compiles that, and runs MATCH_COMPILER_EXEC_OUTPUT

		TESTER starts both in 2 threads
		BOTH stop at some code point that provides RET_VAL // CPU.REG.A
	
	DATA_VIEW

	 WORD_32_BITFIELDS
	 WORD_64_BITFIELDS // use _MEM for HIGH word
	 // use _CPU = (SIGN) WORD_64 >> 32 ; // SIGN = requesting_ZERO_FILL
	 // SIGN_FILL // i32 enables u8_u8_i16 // LOHI always // i16_u8_u8
	 // MACRO GET_i16_PAYLOAD
	 // MACRO SET_i16_PAYLOAD
	 // MACRO EA_i16_in_MEM // SYMB_EXPR for in CPU_reg["EXPR"].GETTER("i16_DC")
	 // i16_DC is good for EA and for i16_DC = i16_PAYLOAD = _i32 >> 16;

	 SIGN_fill_BITFIELD int
	 ZERO_fill_BITFIELD uns
	 // (SIGN) i16_PAYLOAD = i32_word (SIGN)>> 16;

			


