	2024-09-05

	2024_09_Sep
	2024-09-05_VFS_TODO.txtP_

	Actual FS_TREE mounted as _ROOT_ == %s /mnt/sda3

	DEVICE = copy of FS_IMAGE
	LO_FILE = copy of FS_IMAGE
	MMAP_QEMU_FS - pick_your_VFS_actual_supply

	ext3_fs
	vfat_32
	NTFS_fs

	MOUNT POINT needs to track { du QUOTA df }
	ACTUAL FS does not track this tree other than it is

	The alternate universe list:

		C Linux
		ES6 WEB_TWO
	
	alternates

		JS_ACCTS on WEB
		JS_ACCTS on NODE
		JS_ACCTS on V8
		JS_ACCTS on Spider_Monkey
		JS_ACCTS on gjs // gtk

		JS_RPC_ACCTS GEN_RPC_LOCAL_CACHE_EXPR "AVAR"
		JS_RPC_SCRIPT ENQ_ACK happens as XFER_DATA_SEGMENT call on_EVENT

		most apps use block sizes of 4K or streams of 4k in 64K 

		JS_HEAP nbytes SPEC DECODE HEAP_ITEM

			FILE HEAP
			HEAP ITEM
			HEAP LIST ITEM ...	// NEVER EMPTY
			HEAP LIST ... ITEM ...	// MAYBE EMPTY


		JS_RPC_SQL on postgres on mariadb on sqlite_relay
		JS_RPC_SQL QUEUE GROUP_LISTS COMPLETE_TRACKER
		JS_ACCTS_on_MMAP_loaded // MMAP in entire file RW // ZONES

		AUDIT all RW is just to be simple, along with FULL_LOCK_ALL
		CONNECT with on_UPDATE 

		NODE only really delivers the file and adjacent furniture
		JS_ACCTS then runs inside the CLIENT_BROWSER
	
	Which lists as

		VFS_FUSE
		VFS_RELAY
		VFS_API // LIBR provides VFS_API over VFS_TWO ARGS
		// mmap_is_file_on_ext3_or_VFAT_or_UDEF

		MMAP_LIBR HEAP VAR_POOL LOOKUP TREE_BUILD STREAM

		VFS_RPC
			login as USER for SERV

				ENQ_ACK cycle QUEUE_of_unresolved
				TREE of TRANSMIT_over_STREAM 

	-pick-dialect- // WHEN _one knows_more

			PID_one = session_pid[0] or _pid[0] WHEN first _one 0
			PID_two = session_pid[1] or _pid[1]
	-or-
			PID_one = session_pid[1] or _pid[1] WHEN _one is 1
			PID_two = session_pid[2] or _pid[2]

			chdir ls stat_file make_api
			chmod creat_file file_mode 
			fd_seek fd_read fd_write fd_MMAP 

			on_MENTION create STREAM FILTER 
			on_TEXT keep in strict sequence

				WRITE TEXT to STREAM

			KNOW OFFS of BASE_ZERO P0 and P2 and NBYTES 
			ALLOC_NBYTES_in_SEGMENT_in_FILE

				LIBR += FILE LIBR FILE SCRIPT 
				LIBR += FILE SCRIPT 
				LIBR += DIR
				LIBR += ID // identity of the LIBR in SESS

			VFS_OPINION

				if all these files are unmodified

					SINCE

				then LOCAL can CACHE from REMOTE

					SUBSCRIBE to NOTIFY_ASAP ro LOCK_LIST
					READ_ONLY_CACHE get_if_modified

			VFS_STREAM

				TREE_of_LEAF in a HEAP and STO providing MMAP

					EACH LEAF is a FILE
					FILE COPY subscribe_to_updates
					TOLD "update" "EA" "NEW_VAL_id_NBYTES

				FILE_as_NBYTES
				NBYTES_from_FILE // all in 1 block"
				NBYTES_segment_of_FILE // all in 1 block"
				// a few pages of a file // line_break_handler
	
	VFS within a SAND_BOX

		VFS_HEAP_in_ZONE // VFS knows it is itself a component of FILE

		VFS_ROM in LOCAL_cache_REMOTE
		 REMOTE = ROM
		 LOCAL = ES6_NBYTES_in_MMAP
	
	VFS setup

		load entire FILE into MMAP from FILE
		load entire FILE into MMAP from SOCKET_API // FILE is 32_K_x8

			within FILE HEAP of persistent CXX structs

				LISTS HASH .. more as needed

			nested SEGMENTED paged system

				# all in 1 MMAP
				# list_of_four_in_MMAP # same MMAP ?
				# list_of_four_as_MMAP_ITEM # EA_as_PAIR

				# ROOT_LEAF # MMAP_ITEM #
				# ROOT_LEAF # FILE HEAP #
				# ROOT_LEAF # HEAP ITEM #
				# ROOT_LEAF # ITEM_EXPR # ITEM _ATTR _EXPR _ID
				# CT_RT create VAR2 in GEN_for_WHEN 

		save e

---------- VFS FILTERS

{
// WRAP += is_absent_NODE
// WRAP += is_absent_NODE_or_LEAF
// WRAP += is_absent_LEAF // CODE_POINT can tell us this // expected LEAF SOCKET
// LEAF += SOCKET // CODE to go fetch DATA for CACHE to hold // DATA = signals

// WRAP += is_absent_DIR
// WRAP += is_absent_DIR_or_FILE

// on_ABSENT { REQ "have_FILE_NAME_but_no_ENT" } // of any kind
// on_ABSENT { REQ "have_FILE_NAME_but_no_DIR" }
// on_ABSENT { REQ "have_FILE_NAME_but_no_FILE" }
// on_ABSENT { REQ "have_FILE_NAME_but_no_FILE_of_TYPE" }
// on_ABSENT { REQ "have_FILE_NAME_but_no_FILE_TYPE" } DIALECT for "TYPE"

// VFS_FILTER //
//
// VFS wants to use a real FS to do the work
// VFS_FILTER can bounce signals and calls and wrap AVAR s as VFS
// and use a real FS to do the work

// VFS_POSIX_ACTUAL
// VFS has it's own idea of where it was mounted, sometimes at ROOT /
// VFS may provide non-clashing names in dirs // ROM has full list LEXICON
// VFS is mounted at $HOME/VFS/VFS_FF//_POSIX_ACTUAL//_ROOT_//
// VFS is mounted at $HOME/VFS/VFS_FF//_VFS_item_is_struct_with_field_ROOT//
// _ROOT_ is a reserved word and A_DIR // other words 
// _ROOT_ is a reserved word and NO_STEP_DIR_STAY_DIR_DOT A_DIR // other words 
// _ROOT_ is a MACRO for DOT_SILENT
// _ROOT_ is a MACRO for UDEF // mount point for VFS_one

// _one is a SYNB LINK to _ROOT_
// MNT_ is a reserved word
// VFS is mounted at $HOME/VFS/VFS_FF/_ROOT_/ this_is_an_actual_file.txt
// VFS is mounted at $HOME/VFS/VFS_FF/_one -> _ROOT_
// VFS is mounted at $HOME/VFS/VFS_FF/_two_/ this_is_an_actual_file.txt
// VFS is mounted at $HOME/VFS/_POSIX_ACTUAL//VFS_FF_FF//
// 
}


