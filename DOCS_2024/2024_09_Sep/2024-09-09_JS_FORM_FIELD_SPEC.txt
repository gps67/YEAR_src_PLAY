	2024-09-09

	2024_09_Sep
	2024-09-09_JS_FORM_FIELD_SPEC.txt

	GEN_HTML
	 GEN_FORM
	  GEN_FIELD_in_FORM

	  browser build PAGE and runs FORM
	  browser handles EDIT_FORM and on_EVENT
	  browser_escalates on_EVENT which tells FORM it is SENT or CANCELLED

	  GEN_FIELD_in_FORM_returned
	
	GEN_HTML_to_EDIT_LIST
	 GEN_SPEC_of_LIST_ITEM_derived
	  GEN_SPEC_of_ITEM_on_FORM

	  ITEM is EXPR_EA_ITEM

	  	PTR cast to (ITEM_t *) PTR;

	NEED a SIMPLER SUBSET whilst waiting for CXX_as_ASM_with_CCALL_STACK
	  ITEM is EXPR_EA_ITEM

	_const_1
	  	EA_EXPR_t EA_EXPR_one ; // PARSE and NOTICE %s_one MENTION _two

	_const_2
		ITEM_t * PTR = get_PTR_from_EA_EXPR( _const_1 EA_EXPR_t * EA_EXPR );

/*
	// ANON and unannounced TABLE // it just is
	// _name1 _name2 _value // _name2 is _abbr_2 //
	_zero_as_M1 _M1 -1
	_zero _0 0
	_one _1 _0 
	_two _2 _1
	_idx i idx // _idx = idx // Parser notices MATCH PHRASE from GEN_POOL
*/

	JS_CRUD

		Create
		Report
		Update
		Delete
	
	The TABLE /* TABLE_SPECNAME eg TABLE_of_USERS */

		LANG "USERS" is TABLE_NAME is ...DECL ... CODE_POINTS
		CODE_POINT DEBUG UDEF MORE

	We need an MMAP HEAP collection of LIBR ITEMS = COLLECTION_of_ITEMS

		COLLECTION += ITEM_TYPE += LEAF_ITEM_t
		COLLECTION += ITEM_TYPE += LOCN_LOCN_t 
		COLLECTION += ITEM_TYPE += SPEC_NAME
		COLLECTION += ITEM_TYPE += LOCN_t
		COLLECTION += ARRAY_and_various_INDEX_tables
		COLLECTION += ARRAY
		COLLECTION += ARRAY_SEGMENT
		COLLECTION += TUPLO
		COLLECTION += LIST
		COLLECTION += HASH
		COLLECTION += HEAP // _including _VARIOUS
		COLLECTION += ITEM_TYPE += SCRIPT_t
		COLLECTION += HEAP_TYPE array[ name ] of TAGGED_ITEM
		EIGHT_t
			u8_u8_OPCODE

				OPCODE uses CODE_POINT LISTS
				to define a load of TABLES

				they also get 1 REF from SOURCE not SESS
				CT_RT sees that as NO_LINK_REQUIRED
				CT_RT sees that as YES_LINK_REQUIRED
				CT_RT sees that as GEN DATA_SCRIPTS

			CODE_POINT_t CSR[u4_list]; INIT_NULL[u4]
			CSR0 is the default STREAM XPOS
			CSR1 is UDEF_one
			CSR2 is UDEF_two
			CSR3 is PLUS_idx // requires ARG MAY be 0 1 2 +
			// OPTION ANY_PLUS_IDX += ZERO_id_PLUS
			// OPTION ANY_PLUS_IDX += u7_idx GROW_LIST 
			// GROW_LIST u7 u15 u23 u31 u63 //
			// GROW_LIST i8 i16 i24 i32 i64 //
			// GROW_LIST i32_i32 i32_u32  // AVAIL for OPCODE 
			// GROW_LIST skips u8 to u15 as it would confuse i8
			//
			// OPTION ANY_PLUS_IDX += u15_idx
			// OPTION ANY_PLUS_IDX += u15_idx
			// OPTION ANY_PLUS_IDX += u15_idx
			// OPTION NEVER IS 0 1 2 // except UNSET 0 // can be 3
			// OPTION NEVER IS 3 // phew!!

			i16_PAYLOAD 
			i8_i24_HEAP_ITEM
			i8_i8_i16_ZONE_HEAP_ITEM

		EIGHT_t
			u8_u8_OPCODE
			i16_PAYLOAD 
	either		i8_i24_HEAP_ITEM
	or		i8_i8_i16_ZONE_HEAP_ITEM

	PAYLOAD is the OPCODE
	i32_ITEM is the ITEM

	OPTION DECODE(i16) // += _SCOPE_from_OPCODE_

	_i16 = _i32 >> 16
	_BYTE_A = _i16_BYTE_A
	_BYTE_B = _i16_BYTE_B

	MINI_MACHINE
	ZONE u7_ZONE i8_ZONE_EXPR
	HEAP
	ITEM

	i8_ZONE_EXPR - can return u7
	i8_ZONE_EXPR - can return u8
	i8_ZONE_EXPR - can return i64
	i8_ZONE_EXPR - can return i8_MINUS_EXPR 


	u4_u4
	u4_u4_u8
	u4_u4_u8_u16
	u4_u4_u8_u16_u32

		   lo
	        i4_i4

		   lo
		hi_lo
	           i8
	        i8_i8
	    i16_i8_i8
	i32_i16_i8_i8


	LOHI sequencing - DECODE A then B then DC from ABCD
	SO i4_i4 BIT sequencing should prioritise the low 4 bits first
	BUT it is easier to prioritise the HIGH bits first
	AND that will match BITWEIGHT 
	tickles MOST_FIRST but LO_first because CPU has focus on LOW_N_BITS

	i4_hi_PAYLOAD = i8_BYTE_A >> 4 // _SIGNED_SHIFT because i8 is signed
	u4_lo_PAYLOAD = i8_BYTE &= 0x0F // IN_SITU and RET_VAL syntax BOTH
	i4_lo_PAYLOAD = (i8<<4)>>4 // EXPECT ASM /* AS_WAS */ TEST_IN_SRC HERE

	get_u3_lo = u8 &=0x07 // u3_mask_x07 = 0x07 = const unsigned u8_BYTE
	get_i4_SIGN = TEST_BIT 4 of _i8 // MATCH ASM from own GEN // regression

	REGRESSION in GIT 
	- not an easy thing to navigate
	+ latest release should have ASM_KEPT for various CALL_LINES
	- parametised means DECODE ASM to get ARGS_of_ASM 

-TODO-
2024-09-09_JS_FORM_FIELD_SPEC.txt

	FIELD_SPEC is a BASE_CLASS + INIT_DATA_SCRIPT

		BASE_CLASS does the heavy lifting
		FIELD_SPEC provides some flags, picks options, names, desc

			actually a lot of the behaviour comes here
			validate_field 
			CALL_validate_field 

		BASE_CLASS interprets flags set in FIELD_SPEC

			on_CALL_XXX
			on_EVENT_
			CALL_XXX 
			_XXX
			XXX
	
	FIELD_SPEC can appear in any form

		when in FORM_one 

			follows default
			also specialises with VECTOR += SETTING

		when in FORM_two

			follows default
			also specialises with VECTOR += SETTING
	
	FORM += FIELD

		add to panel 3	// manual layout is tacky 
		add to panel 0	// default_STREAM_ZERO _one _two _EXPR

		when handling field (_2_if_multi)
		prefer LEXICON PICK OPTIONS DIALECT USAGE_FFFF
	

	JS += GEN_JS

		GEN is probably just stitching together some intdented text

		GEN might extract that text from a DOCUMENT

		DOCUMENT might have OWN_it_ALL option
		DOCUMENT might have GIT_it_ALL option // GEN sorted by ...

		GEN_JS += GEN code that builds FORM on browser
		GEN_JS += GEN data that describes FORM for LIBR
		GEN_JS += GEN import 
			

