	2024-09-11

	2024_09_Sep
	2024-09-11_FMT_via_FILTER.txt

	FMT
	_via_
	FILTER

	SESS holds STREAM in_through_out
	SESS holds SEGMENT_AREA _ro _rw _creat_api _MMAP
	SESS holds CTXT holds SEGMENT and it holds _AREA _ro _rw 
	NEED align_64_bit and align_4K_PAGE_ZERO
	SCRIPT parses these PHRASES 
	SCRIPT parses these ARGV PHRASES 
	SCRIPT splits is_TCL is_CXX is _cpp is_Python is_CMNT
	SCRIPT CMNT sees "//" as ARGV[i] under Parser "#" is harder to Parse
	SCRIPT PSG ARGV XPOS_as_idx_in_list // programmer step
	PARSER "//" is slash_slah // not yet Q2_slash_slash_Q2 // also avail as

	PARSER is specific to FMT
	and retains any options in the source
	PHRASE == SEQ == {

		MATCH {
			%02X
			%04X

			%02d	TRACK_01
			%03d	1,234,567 from LIBR_NUMERIC // or only from cache
		}

		% 0 int 
	}

	PHRASE {
		CMD0 ARG1 ARG2 ARG3 
		CMD0 ARG1 and ARG2 knowing ARG3 // MACRO knowing USING %s //
	}

	_AVAR_ _POOL
	/*
		see how LANG == ARGV adds ITEM_two to SCOPE

		_ITEM_
		_ITEM
		ITEM_

			those headline _NOUN_ listed above in SCRIPT
			PREFER RENAME ITEM NOUN
			ACTION CONNECT ITEM NOUN {
				// ITEM is _NOUN_ in LEXICON_one
				// NOUN is _NOUN_ in LEXICON_two

				BASE_CLASS == ITEM_t_in_HEAP_t
	GEN +=			 INST += "
			}
	*/


	EXAMPLE picks FMT PAIR from local list

WAS:
https://bakabeyond.bandcamp.com/
merch/ticket-to-baka-beyond-gig-in-oxford-uk-on-12-09-2024
https://bakabeyond.bandcamp.com/merch/ticket-to-baka-beyond-gig-in-oxford-uk-on-12-09-2024
ARGUE: URL_SIMPLIFIER SITE MATCH(%s%s%s @1 @2 @3) // LHS SEP RHS // SEP == "/"
ARGUE: URL_SIMPLIFIER if is_NULL RHS then drop_SEP // and drop_GAP // 
NOW:
https://bakabeyond.bandcamp.com/
AUTO ALIAS:
%s $1
%s/%s $1 $2
// ARGV // CMNT // ... // DATA

/* CODE_POINT XPOS_one  LINE TEXT_ARGV _%s $ARGV_ITEM_PAIR_JOIN_FMT */ %s/%s $1 $2




	A SCRIPT is a SCRIPT with VARS and parameter EXPRS

		EG python tcl es6 ASM_32

			ASM_32 is going to get called on ASM_64_CPU_64

				LIBR provides MACRO NAME { SCRIPT }

					where TEXT interleaves as LINES
					where TEXT interleaves as WORDS
					where TEXT interleaves as EXPRS
					where TEXT interleaves as PHRASE

			ASM_32 is a LIBR

				It requires a batch run GEN COMPILE RUN GEN
	
	ALIGN_EIGHT_in_SEA_of_4K_PAGES
	ALIGN_EIGHT_in_TREE_of_4K_PAGES
	ALIGN_EIGHT_in_MMAP_of_4K_PAGES
	
	ASM_32 in CPU_64 environment

		Different CPU_64 types will differ
		different lohi and hilo when written in memory ALIGNED_required
		different number of CPU registers
		different text put in the ASM macros
		add PAIR of WORD_HALF_lohi // NEED SHIFT WORD_HALF_HIGH = WORD >> 32 // or some
		add PAIR of WORD_32
		different_options_for_MMC
		cpu_reg_to_fpu_reg // vec_reg_BITFIELD
		add  BITFIELD_API
		run API with sample_data_and_scripts
		keep ASM cache PRE_LOAD
		write SEGMENT_AREA
		mount SEGMENT_AREA

