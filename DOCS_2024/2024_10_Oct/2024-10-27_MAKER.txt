	2024-10-27
	2024-10-27_MAKER.txt

	makefile text follows patterns of phrases

		VAR_OBJS_files
		replace files with "%s" with LIBR_NAME_one
		eg
			bench_gui


		VAR_OBJS_bench_gui // a makefile with many lines like

			OBJS_bench_gui += FILENAME.o
			OBJS_bench_gui += bench_FEATURE.o // TEMPLATE to MATCH
			FEATURE += _top_app // ie _bench_gui _top_app
			// these two objects are one group with many moons
	# if 0
			FEATURE += _top_app //
			ie _RET_VAR = bench_gui + _top_app _as_sequence
			ie _RET_VAR = bench_gui + _top_app 
			_as_sequence just made it complicated near detail
			_sequence might be 
	OPCODE is a template cmd or even ARGV template via SCRIPT
			ALLOC_NEW_INIT_ZERO
			ALLOC_NEW_INIT_DATA
			FOCUS = CSR relaying THIS

		OBJS_bench += S(OBJS_bench_gui)
		// += FILENAME.o // eg imported from lib_link

	Module bench +=
	Module bench_gui

	Module bench +=
	Module bench_sto

	Module bench +=
	Module bench_ARGV_and_TREE

			ARGV is how TREE can be serialised

			TREE is how ATOM_or_LIST_or_TREE unfurls



	Module bench_gui

	
	THIS is tokenised as SPELLING
	THIS must remain a plain STR0 - maybe LANG CSET required as catalyst

	a_plain_STR_in_CSET_DEFAULT_as_P0P2:

		SUBLEX of own function name or macro name or IDENT_USED
		MENTION creates each of those vars

	a_plain_STR_in_CSET_DEFAULT_as_P0P2:
	a_plain _STR _in _CSET _DEFAULT _as _P0P2 ; // ARGV PHRASE // SUBLEX

		a_plain _STR _in _CSET _DEFAULT _as _P0P2 

			a_plain
				_STR
			_in
				_CSET_DEFAULT
			_as
				_P0P2 

			STEP += CALL FOCUS CMD ARGS

			// decidedly not the same thing, equally sonic
	
	_CSET_DEFAULT

		_CSET + _DEFAULT + _CSET_DEFAULT

			your choice where to place filters
	
	MATCH _%s using NAME is soon already in INDEX # ROM 2 pass COMPLETE AOT
	MATCH _%s using NAME as lookup

		idx = lookup P0P2

		these are raw central MINI_MACHINE CPU vars
		(it all words in MEMORY just fine)

		P0P2 is a very specific _P0P2 which hints at it
		P0P2 is the very specific _P0P2 of this "_CSET_DEFAULT"
		P0P2 is the very specific _P0P2 of this "ALIAS for _CSET_DEFAULT"
		P0P2 is the very specific _P0P2 of this "ALIAS" // 
		P0P2 is "_DEFAULT" // a 2 way connector, pull, push
		API fetch_send_lists_of_values_and_some_ARGV_SCRIPT
		MY_REF_x_YOUR_REF

			we build short lists of items we look for
			data valuess fall into USAGE_GROUP with LIST of items
			If in doubt, implement as a Module
			DECL AVAR with local_scope_MODULE_AVAR

				OPTION ALIAS ALIAS_%02X

					they are all one group
					and any of them MATCH ALIAS

					worked examples
					will only have 3 or 4 competing groups
					for open namespace // ie NOW 

	# endif

STREAM PARSER
STREAM PRINTER
STREAM contains unmentioned stuff we KNOW 
STREAM KNOWER

	Indented lines of ARGV

	CURLIES used like Tcl around nested indented TEXT LINES as A_WORD

		A_WORD is EA_EXPR 

			running EA_EXPR
			sets several variables (any number 0 1 2 3 )
			fetches CODE_POINT to get MINI_SCRIPT or MACRO

		MINI_MACHINE is a collection of AVAR and SESS and CSR
		MINI_MACHINE has CODE_POINT and eval
		MINI_MACHINE has SAFE_STEP and ENABLED_STEP_API
		-for-now-we-write-all-the-code-and-only-use-PRE_LOAD

			
		RUN a list of STEPS 

			each STEP is a C like step in a SCRIPTED world
			eg VAR2 = VAR1.field2
			eg THIS = VAR1
			eg SELF = THIS // via Module ALIAS LIBR load SHELF
	
	STEP MINI_MACHINE is i64_STEP in array[IDX] of i64_STEP_WORD

		UNUSED ability of CPU to step 2 words in 1 asm

		REQUIRED ability of CPU to have i64_STEP fit in single i64

		DECODE_i64 i8_i8 i16 i3_i5_i24
		DECODE_i32 - PICK -
			i8_i8 i16
			i3_i5_i24

		i3_FILE
		i5_ZONE
		i24_ITEM _IDX // ARGV created MENTION $1 // SUBLEX notices ...

			BITFIELD_i5_ZONE 

				GET_i5_as_i32 // i32_as_i64

					ie on AMD64 expanding i5 to i64
					as that also sets i32_HIGH to i5

					BITFIELD_to_BITFIELD
					i5_to_i32 // manually picked in TEMPLATE
					i5_to_i32_HIGH
					i5_to_i32_HALF
					i5_to_i32_HALF_and_to_i64_as_that_INIT_

					PARALLEL_WORLD M1 ZERO
					i1 AVAR

					"an i1 kind of BOOL"
					 very bool ish
					 ZERO_MEANS_FALSE
					 ONE_MEANS_TRUE
					  M1_MEANS_TRUE // -1 == TRUE // i1
					  NON_ZERO_means_NOT_ZERO
					  ZERO_MEANS_FALSE
					  NON_ZERO_MEANS_TRUE

				GET ASM

					CPU_REG_draw_HILO

				SET CPU_REG_one "CPU_REG_ALLOC _one"

					MINI_MACHINE has 256 registers
					MINI_MACHINE has  32 registers
					MINI_MACHINE has  12 registers
					MINI_MACHINE uses  4 registers

						OPCODE
						LHS // _one
						RHS // _two
						CODE_POINT

					STEP is a single i64

						if it is a call to main()
						we will notice
						and CTOR_SELF

						i64_DATA is i64_STEP
						DECODE_i64 // is DECODE_i64_LOCAL

					DECODE_STEP sets 4 registers to 4 vals

						OPCODE
						LHS // _one
						RHS // _two
						CODE_POINT

					COMPILE_STEPS runs over streams of WORD

						each STEP one long FUNC_CALL
						with quota of CPU and MEM
						so optimise for them
						and batch run it all so know OK

						run_batch_one
						 ENQ_ACK_CYCLE
						 GOT_ACK_RESP
						 GOT_ARGV_of_RET_VARS
						 GOT_AVAR _any_silly_AVAR
						run_batch_two
						 KNOW LOCKS WORKED or FAILED
						 GOT_ARGV_of_RET_VARS
						 Process DEVICES FILTERS 

						 this is actually done in _one
						 because CODE was available

						 running CODE "_two"

						 MAKER can leave runtime as ROM
						 sort of FORK_on_EDIT

						run_batch_one
						run_batch_two

						SESS gets updated
						it is running any number of
						MINI_MACHINES
						AVAR
						FUNC
						API







		DECODE_i64 i8_i8 i16 i3_i5_i24
		DECODE_i32 - PICK -
			i8_i8 i16
			i3_i5_i24

			fields written out in LOHI order
			fields decoded L2R 
			  LOHI metaphor puts i3 in low 3 bits
			  HILO diagram_CPU_REG puts i3 in top 3 bits

		SHIFT_TWICE

			shift to TOP to get SIGN
			shift to low FILL_WITH_SIGN
			shift to low FILL_WITH_ZERO
	used		shift to low FILL_WITH_SIGN_from_TOP_bit
	unused		shift to low FILL_WITH_SIGN_from_C_flag
			shift to low FILL_WITH_SIGN_from_BIT_FROM_EXPR_in_C
