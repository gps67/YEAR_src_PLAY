	2024-11-01
	2024-11-01_TREE_ADOC_TREE_LOCN_ITEM_CSR_GETTER.txt

	_TREE_
	_ADOC_
	_TREE_
	_LOCN_
	_ITEM_
	_CSR_
	_GETTER_
	"_%s_"

		Q2_bothing_to_mention_Q2_means what

		 Q2_means_RUN_FILTER_Q2_USED
	

	FILTER_Q2_USED

	_FILTER // _FILTER_t // %s_FILTER // %s_FILTER_t $1_FILTER
	_Q2_USED // so_activate_SESSION_FILTER_over_EVAL_or_EXEC
	_Q2_USED_meant_ADD_FILTER_ASIF_EVAL_API
	// that means run SCRIPT_INTERPRETER in WRAP_CTXT as SESS
	// ARGV_SCRIPT is not 100% stable but it is mostly consistent
	// LIST_of_LINES _each_LINE_is_ARGV
	// { ONE_WORD_ARGV_SCRIPT_STEP } // i64_ASM_STEP
	// progress: i64_ASM_STEP // may include streamed DATA in BITFILEDS
	// VCPU is UDEF via API // DECL ASM_OPCODE ... describes i16_OPCODE
	// _i64 _as_i16_i48 _as_i32_i32_with_first_i16_%s //
	// PSG_LEX _IDENT _CIDENT99 { a1_a2_star a1 a2 } a1_a2_star
	// AUTO APPLY //  { a1_a2_star a1 a2 } a1_a2_star
	// AS a1_a2_star("%s") // CIDENT("%s") // PARAMETER %s // as_VARNAME $1 //
	// PARAMETER $1 $2 $@ ${AVAR:-default} 
	// this is not bash compat because we are avoiding Q2 and word_rejoin
	// but it does look a lot like BASH a simple subset
	// and then ARGV_WORD_to_SRC_TEXT
	//
	// PARRALEL_UNITS "$@" is a LIST of WORDs in ARGV
	// clever coding enables all sorts of nonsense to appear in ARGV
	// USAGE { SCRIPT_as_one_WORD } // also { Q1_like_but_BRACES }
	// PARSER_two reworks what PARSER_one found
	// PARSER_two listens to what PARSER_one found
	// PARSER_two speak to what DOWN_STREAM_one understands
	// CSET_under_Q3 is _HUB_AXLE_CORE in _SESS
	// Q3_detects_ZERO_LINT_ZERO_CALLS eg "\n" never used or explain_BASICS
	// Q3_knows_about_troffs_exponential_backslash
	// Q3_knows_about_Q2s_BACKSLASH_ASCII_macros _eg("\n") 
	// Q2_bias is to C // what do the others do ? 
	/*
		ARGV is simply with "$@" as P0P2_STR_IDENT _at_XPOS nbytes_of_lex
		LEX POS LEN
		"${@}" // use_of_Q2_invokes_FILTER_TWO // Q2.queue_two
		// AXIS SELECTOR mention of $1 triggers a load of bash ${AVAR}
		// allow PARSE_within_DOLLAR_VAR_EXPR
		// AVAR("INTERP ${@} // CMNT") // TEMPLATE // ${@} // MENTION 

		${AVAR:-default} // SPECIFIC_INTERPRETER_for_BASH_AVAR_EXPR //
		// write_that_modified_INTERP_SESS_ENV // eg ADD_VAR("AVAR")
		// caller pushes "CIDENT" over "AVAR"
		// caller pushes "VAR_NAME" over "AVAR"
		// caller pushes "AVAR" over "AVAR"
		// caller pushes "AVAR[IDX]" over "AVAR"
		// caller pushes "AVAR[idx]" under "IDX"
		// caller pushes "AVAR[idx]" near "IDX" // eg same_group //

	*/
	_


