	2024-11-24
	2024-11-24_GEN_Parse.txt

	GEN_CXX
	GEN_SPOUT
	GEN_WIDGET
	GEN_LIBR

	Apply a list of selections and filters
	Apply a list of TEST_DATA with EXPLAIN

	PARSE_CXX
	PARSE_ARGV_SCRIPT

	EVAL_ARGV_SCRIPT _in_SAFE_ZONE

		managed_script 
		+ cpu
		+ mem
		+ list_of_claimed_items_for_purpose

		moderate VFS
		FILTER projects a VFS_VIEW in DIAG_one
		eg sorting and grouping dir and multi_part_lex

		SAFE_MODE interpreter

			BOUNCES VFS through VFS_RELAY

			 FILE_1a 
			 DIFF_1a_1b
			 FILE_1b 
			
			EVAL chooses to let RELAY outline_an_absent
			CACHE LOCAL
			CACHE REMOTE

			SAFE EVAL has to deal with ANYSTR
			easiest_way SPELLING_%04X // IDX_u15 MINUS_i16

			GROW AUTO stretches IDX
			still uses low number BITFIELD with AUTO_CAST
			BITFIELD is usually expanded to 32 or 64 bit WORD
			COMPILER already keen to use 

			PLUS_u15
			MINUS_i16

				i16 looks like it gets double what u15 got

				but it gets half of that double,
				as it is declared and defined here as MINUS

				other PLUS_u15 values are available
				other PLUS_u15 accepting_parameters_via_cast

				CAST_to_CPU_WORD_32
				CAST_to_CPU_WORD_64
				CAST_to_MEM_WORD_64 // ie some hack that works
				CAST_to_MEM_WORD_i32_i32 // ie some hack that works
				// ALIGNED i64
				// WORDS HALF HIGH

					holding the item 

				// GROW_SOON_LIMIT // 

					u7_u15_u31_u63

						and every BITFIELD
						from [0 to [64
						SIGNED
						UNSIGNED

				// in mid loop, if a list steps_up

					ie from u7 to u15

					the effort of joining BYTE _A and _B
					gives ARRAY[ u15_idx ] of FOUR_FOUR
					gives ARRAY[ u15_idx ] of i64

					the list does that as part of its
					internal implementation.

					Outside gets given a diffeent Token

						"MEM_is_LOHI"
						"MEM_is_HILO"

						"u7"
						"u15"

						"i8"
						"i16"

				// RET_VAL_i32_i32 //

					BYTES_in_MEM_1_2_4_8_
					FOUR_in_EIGHT i32_HALF i32_SIGN_HIGH
	
	SIGN_HIGH

		means ZERO or M1
	
		implementing a 1 bit SIGN as i32 xFFFFFFFF or i32_ZERO 0x0

		that opens the door for other things to alloc
		and use these SIGN bits BITFIELDS,
		or remain thin and only have beyond PAGE as CODE_POINT
	
	AUTO_GROW

		idx = N ++ ; // CMNT

		if N overflowed old BITFIELD, upgrade FROM_INTO

		it means a wider idx is required for N and for IDX
			
