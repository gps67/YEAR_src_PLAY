
	ASSOC_LIST

	ASSOC_one VAR_one VAL_one // SPEC_one may_be_DECODABLE_i32_i32
	ASSOC_one VAR_one VAL_one // SPEC_VAL may_be_DECODABLE_i32_i32
	ASSOC_one VAR_one VAL_one // SPEC_PTR may_be_DECODABLE_i32_i32
	ASSOC_one VAR_one VAL_one // SPEC_EA_EXPR_one may_be_DECODABLE_i32_i32
	ASSOC_two VAR_two VAL_two // SPEC_two may_be_HEAP_ITEM_EXPR_ARGS
	ASSOC_two VAR_two VAL_two // SPEC_two

		HEAP	i4
		ITEM	i12
		EXPR	CODE_POINT.EXPR_FF 
		ARGS	ARGV // with added CODE_BLOCK_TREE_BRANCH_AS_ITEM
	 csr
		// cache of exprs that happen // parametise via BENCH API
		ITEM	
		ITEM	in MINI_HEAP can be idx_ITEM

		ITEM	in HEAP_TWO can be SAME idx_ITEM different VIEW

		ITEM	is_EXPR

			This is the most common form of PARAMETER name = VALUE
			VALUE = GETTER_of_EXPR _EXPR
			// allow compiler parser to add HOW later
			// keeps stable page layout, adding features by_line
			// CMNT // _by_line // still active somehow //
			// 
			_EXPR = 

				SCOPE += OWN_MINI_HEAP of 256 items
				SCOPE += OWN_MINI_FSM of 256 nodes
				SCOPE += OWN_MINI_HEAP of 256 item

				Calling OPCODE can do a lookup via SIDE_LIST

				u2_idx_PICK
				i8 ITEM_FF_idx[u2_idx_PICK]

				// PICK is basically from a LIST of FOUR EXPR
				// EXPR can return ADDR
				// EXPR can return DATA
				// EXPR can return CPU_WORD_with_added_semantic

				// CPU_WORD.call_func_ASIF_CPU_REGISTER
				// and ASIF group of ITEM PICK ALLOC
				// odd_even_alloc 
				// two layouts of CPU usage loaded DIAG
				// both use RET_VAL R0
				// third uses RET_VAL XMM0 // 0 1 2 ...
				// CXX says skip keeping count the same
				// CXX processes C_CALL_ARGS left to right
				// CXX runtime C_CALL_ARGS right to left
				// _throw might have half done something 
				// this LOCN this CPU thread

				//. is i8 // ITEM_FF
				// SUBLEX LINK ITEM_FF //
				// SUBLEX ITEM_FF LINK // DIALECT

				//. is ITEM_FF_idx // VAR_NAME
