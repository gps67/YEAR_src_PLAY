	2024-12-06
	2024-12-06_PARSE_CXX_ARGV_TREE_WEB_GPU.txt

	WEB_GPU thinks it is the next openGL

	It is a CORE_SUBSET of C as GLSL 
	https://en.wikipedia.org/wiki/OpenGL_Shading_Language

	But no pointers

	GPU has DRAW DIAG ITEM DRAW MORE
	GPU has CPU VAR SPEC STRUCT ARRAY 
	GPU has SWITCH low_idx {
	 CASE[idx_NAME] ACTION(idx_NAME)
	 CASE[idx_NAME_one] ACTION(idx_SAME) {
		ALIAS ACTION // PRIMARY BIND NAME //
		// BASE_CLASS  HERE_NAME // DECL SELF //

	#if 0
		NAME_one
		NAME_two

		unused, have an extra TEMP ASIF "{ AVAT_t TEMP }"
		then
		NAME_zero // available to LIBR_UDEF_HERE_here_zero_
		_NULL_means_ABSENT
		_ZERO_means_NULL	# and that means ABSENT
	// SO
		_ZERO_means_ABSENT	# derived from DECLS ABOVE

	
	 _one and _two has to be enough to handle individually
	 _IDX  gets ARRAY {
	 	
		ITEM_t * ITEM = CALL ARGV EA_EXPR IDX

		ret_val = ITEM // COPY_CARRIED_OVER
		// LOCAL_COPY_of_REMOTE_AVAR // incl ACTIVE_DATA //
		// its all in a sandpit //
		// BOOT_ROOT debian again ? 
		// 
	 }

	#endif

	 	DECL ACTION idx_NAME_two -after-lookup- ITEM_t ACTION
	 	CALL on_ACTION 
	 }
	}

	C_CALL A B C D // first four parameters get own registers
	C_CALL A B C x // always 4 // AXV512 is extra also 4 ? //
	
	512 is 64 x i64_WORD
	512 is i64_WORD[64]
	128 is i64_WORD[16] // SSE has 16 XMMS registers of 128 bitso

	128 is i16[16] // i4_idx
	
		EVERY i8 has OPTION on_ZERO
		EVERY u4 has OPTION on_PLUS
		EVERY i4 has OPTION on_MINUS

		SHIFT_LEFT_to_TOP

			always fills with zeros

		SIGNED_SHIFT_RIGHT_TO_BOTTOM

			fills with SIGN BIT repeated // int //

		Those 2 shifts, 2 CPU cycles,
		extract signed_FIELD from BITFIELDS_WORD

		NOMENCLATURE for BITFIELD
			
			ALWAYS_SIGNED

				this is actually harmless when UNSIGNED
				provided you MASK to 64 32 16 or 8
				always the low bits of actual value

			NBITS of field

				i4_TOKEN


			NBITS_below_field

				i12_TOKEN

	LIMIT 4K PAGE is i12 wrt PLUS_ZERO and MINUS_ZERO

		i12	 4096 // bytes in PAGE
		i3	8 // bits in byte
		i15	32 K bits in PAGE
	
	So i16 can hold u15_bit_pos and i16_MINUS

		both has 32K of ITEM
		_one has 32K of BIT in giant bitmap
		_one has 32K of IDX_ITEM in OBJ_TABLE

		can describe BITFIELD as BIT_POS_ZERO N_BITS

			limit NBITS

			 8
			16
			32
			64

			1 2 3 4 5 6 7

			128	- SSE has i128_WORD[16]
			256	- mid
			512	- i512 AVX512 [16]
			512	- i512 AVX512 [16]

		on_PLUS u11_PLUS // annoying repeat thing
		on_MINUS i12_MINUS // GEN is writing the VARANMES

		ie u11_PLUS i12_MINUS i12_ZERO // alias u12

