// #!/usr/bin/env -S mutool run
// shebang fail // # is not OK
// #!/usr/bin/env -S mutool run

// TODO: use better font

	var font_name = "Courier"
	var font_name = "Courier-Bold"

	var font_file = "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf"
	var font_file = "/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf"
	var font_file = "/usr/share/fonts/truetype/liberation/LiberationMono-Regular.ttf"

	var font_name = font_file
	var pt_sz = 8.0
	var pt_sz = 36.0
	var pt_sz = 12.0
	var pt_sz = 14.0

 // MACRO API { font pt } = " { font pt } // { font == font } ; { pt == pt }
 // MACRO API { SCRIPT }
 // MACRO API { txt_to_pdf }
 // MACRO API { lib_mupdf } // API into mupdf_DIALECT // GEN_into_DIALECT
 // MACRO API { PALLETTE } // API obj Object_t STO SUBLEX DIALECT SCRIPT
 // MACRO API { SCRIPT } // API obj Object_t STO SUBLEX DIALECT SCRIPT // ROOT
 // MACRO ROOT API DIALECT PARSER
 //
 // CALLER is SCRIPT EVAL PRE_EVAL_HOOK_SESS SCRIPT // REPEAT ROOT as own id
 // CALLER does stuff like ... PALLETTE of FONTS and DRAWING API
 // DTP is a simple dialect of postscript // 
 // DTP is HT from DTP_DOC_TREE 
 // TXT to PDF // PARSE // GEN // STO // STYLE_SHEETS // Module
 // TCL to mupdf // lib_mupdf dtp_mupdf // { NAME %s } // mupdf API mupdf // SET
 // DTP // PDF GEN Module DTP // ROOT DTP "DTP GEN_PDF SESS // SESS %s " 
 // SUBLEX // "%s" GET_VAL_as_EA_VAL_as_SELF_as_HERE // name that phrase in 
 // VARNAME // handPicked_list_of_get_EA_as_DIALECT_ITEM // STO == SESS.STO
 // == // MATCH lhs == rhs // ALIAS != etc // LINK STO SESS.STO //
 // VAR NAME { S C R I P T } { SESSION DATA STO }
 // PEN = new font_pt $font $sz // SHELL API // JS_API 
 // INK TOOLS { Module } { PEERS } { SESS }

 // FONT PT // font pt // dtp 


	// I'm using " { lhs rhs } " with CODE_SAYS EXPR ARG_t DIALECT_t
	// I also like "{ lhs == rhs }" { DRAW_STYLE PSG_STYLE CODE_POINT
	var font_pt = "{ font == font }" // += ATTR lhs rhs
	var font_pt = "{ pt == pt_sz }" // += ATTR lhs rhs
	// { font $font pt $pt } // shell API // SCRIPTING API // CONSOLE BENCH


	function dbg_print_2( key, val ) {
		// if(false) print( "# INFO #", key, val )
		print( "# INFO #", key, val )
	}

	var dir_name_txt = scriptArgs[0];

	// strip .txt // or fail
	var pos2 = dir_name_txt.length // first pos after end
	var pos2_4 = pos2 - 4
	if( ".txt" == dir_name_txt.substring( pos2_4, pos2 )) {
		pos2 = pos2_4 // at dot after end of name
	} else {
		print("# WARN # filename doesnt end in .txt")
		quit()
	}
	var dir_filename = dir_name_txt.substring( 0, pos2 )

	// strip leading dir, to save here, not there
	var pos1 = dir_name_txt.lastIndexOf( "/" )
	// when no / pos1 is -1 then 0 is start of str
	var dir = dir_name_txt.substring( 0, pos1 )
	var name = dir_name_txt.substring( pos1+1, pos2 )

	// add .png
	var name_png = name + ".png"
	var name_pdf = name + ".pdf"

	if( 1 ) {
	 dbg_print_2("dir_name_tx", dir_name_txt);
	 dbg_print_2("dir", dir);
	 dbg_print_2("name", name);
	 dbg_print_2("name_png", name_png);
	}

//	// PARSE file dir_name_txt 

	// LOAD file // as text_lines
	var text_in = read( dir_name_txt ) // mutool run specific
	var text_lines = text_in.split("\n")
	var n_lines = text_lines.length
	n_lines -- // no line after final \n // hopefully
	dbg_print_2( "n_lines", n_lines);

	// count line lengths (simple mono-font)
	// TODO TABS // LIBR TABS_EXPAND API // use Module // api TABS
	// CALC MONO FONT PAGE WIDTH // routes via DTP // { DRAW PANEL } 
	// api TABS // expand TAB ALIGN_EIGHT // ASCII DTP // Layout
	// MONO FONT CHAR STR0 // or DRAW_API to 
	// PANEL_WIDTH = ncols(text) // DTP_Layout AXIOMS Layout
	// 
	var n_cols = 0
	var line
	for( var i = 0; i < n_lines; i++ ) { // es5 not es6 ?
		line = text_lines[i]
		var l = line.length;
		if( n_cols < l ) n_cols = l;
	}
	dbg_print_2( "n_cols", n_cols);

	if(false) {
		// MAYBE ideas // 
		var dpi = 150
		var i_per_pt = 1.0/72.0
		// X_POS_DOTS // DOTS _API_
		var d_per_pt = dpi * i_per_pt // 2 ish
		// eg xpos_pt = pt.xpos // magic UNIT array ITEM "pt.%s"
		var pt_per_pt = 1.0 // Layout API get "{ metrics }"
		dbg_print_2( "d_per_pt" , d_per_pt )
		dbg_print_2( "pt_per_pt" , pt_per_pt )
	}


	// get font and metrics
	var font = new Font(font_name)
	var gid = 32
	var glyph_dy = 1.0
	var glyph_dx = font.advanceGlyph(gid, 0)

	// from em size to point size // of a monofont char
	// we use em size // dtp uses point // claims next DECLS TYPE_MATCH pt
	// pt_sz is the computed XY_POS except in DTP_POS
	// 
	glyph_dy *= pt_sz // em
	glyph_dx *= pt_sz // em

	dbg_print_2( "pt_sz", pt_sz);
	dbg_print_2( "glyph_dx", glyph_dx);
	dbg_print_2( "glyph_dy", glyph_dy);

	// cant find font info
	// NO // var Y_top_to_baseline = font.ascent * pt_sz // no
	var Y_top_to_baseline = glyph_dy * 0.77 // fudge
	dbg_print_2( "Y_top_to_baseline", Y_top_to_baseline );

	// surrounding margins
	if( false ) {
		var Y_margin = 0
		var X_margin = 0
	} else {
		// padding for PAGE or for FRAME_EDGE
		// all text widgets need a half a char from clip edge
		var Y_margin = 0.3 * glyph_dy
		var X_margin = 0.9 * glyph_dx
	}

	var page_W = glyph_dx * n_cols  + X_margin + X_margin
	var page_H = glyph_dy * n_lines + Y_margin + Y_margin
	dbg_print_2( "page_W", page_W )
	dbg_print_2( "page_H", page_H )

if( 0 ) {
	var pixmap = new Pixmap( DeviceRGB, [0,0,page_W,page_H], false )
	pixmap.clear(255)
	var device = new DrawDevice(Identity, pixmap);
} else {
	var format = ""
	var dpi = 150
	var dpi =  72
	var options_pdf = {
	}
}
	var options_pdf = "pretty,compress,compress-fonts,sanitize"
	var options_pdf = "ascii,pretty" 
	var options_png = {
	 width: page_W,	// pixels
	 height: page_H,
	 resolution: dpi,
	 zzzlaszz: 0
	}
	var format = "pdf"
	var doc_writer = new DocumentWriter( name_pdf, format, options_pdf )
	var mediabox = ""
	var device = doc_writer.beginPage( mediabox )

//	var doc = new PDFDocument() // A4 ?
// var page = pdf.addPage([0,0,300,350], 0, resources, contents)

//	var page = doc.addPage( [0,0,page_W,page_H] ) // args
//	var filename_pdf = "filename.pdf"
//	var device = new DrawDevice(Identity, pixmap);

//	var pixmap = new Pixmap( DeviceRGB, [0,0,page_W,page_H], false )
//	pixmap.clear(255)
//	var device = new DrawDevice(Identity, pixmap);

/////////////////////
	var transform = [1,0,0,-1,0,page_H]
	var transform = [1,0,0, 1,0,page_H]
	var transform = [1,0,0, 1,0,0]
	var text = new Text();

	var X = X_margin
	var Y = page_H - Y_margin // top down
	var Y = 0 + Y_margin + Y_top_to_baseline // zero is at top
	var Y = page_H - Y_margin - Y_top_to_baseline // zero is at bottom

	for( var i = 0; i < n_lines; i++ ) { // es5 not es6 ?
		// stupid upside down font raster-Y
		// daft font scale AND post-scale X,Y
		var Y2 = Math.round( Y )
		var X2 = Math.round( X )
		var mat = [pt_sz,0,0,pt_sz,X2,Y2]
		dbg_print_2( "mat", mat )
		var mat = [1,0,0,1,X2,Y2]
		// var mat = [2,0,0,-2,X,Y]
		// var mat = [1,0,0,1,X,Y]
		line = text_lines[i]
		dbg_print_2( "mat", mat )
	//	dbg_print_2( "line", line )
		dbg_print_2( "text.showString(font, mat, line ); |", line )
		text.showString(font, mat, line );
		dbg_print_2( "rix", mat )
		Y -= glyph_dy // moving down decreases Y
	}

	var rgb_one = [0,1,0] // green // 0.0 < 1.0
	var rgb_one = [0,0,0] // black
	device.fillText(text, transform, DeviceRGB, rgb_one, 1);

// other stuff to draw
//	device.strokePath(path, {
//		dashes:[5,10],
//		lineWidth:3,
//		lineCap:'Round'}, transform, DeviceRGB, [0,0,0], 1);
	
	// pixmap.saveAsPNG( name_png );
	doc_writer.endPage( device )
	doc_writer.close();
	device.close();
	// doc.save( name_pdf, "ascii,pretty" )
// pdf.save("out.pdf", "pretty,ascii,compress-images,compress-fonts")








