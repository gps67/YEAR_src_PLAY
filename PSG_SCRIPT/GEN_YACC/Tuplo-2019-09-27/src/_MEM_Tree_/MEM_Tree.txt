/home/gps/YEAR/src/PLAY/PSG/yaccs/GEN_YACC/Tuplo/src

	MEM_Tree/
	MEM_Tree.txt

	MMAP_FILE
	 lib_mmap_scan

		simpler = without page shuffle, one full range each
		sooner = Manage Shared Space = MMAP_ZONE
		PG_version each page gets cached against stack of files VFS

		For us, we export _RANGE_ _SUBRANGE_ _BACKING_FILE_

		 The RACK-SHOP can add cache memory to MINI-SITE's

		 	eg MINI_SITE_half_G_mem

				RACK_SHOP can oversubsubribe
				when stretched, fall back on backing_file
				cannot add to MEM - it's contract fixed
				can add to DISK CACHE eg MMAP space
				upto [CURRENT AVAIL LOADS]
	

	MEM_Tree/
	MEM_Tree.txt

	MMAP_FILE

		lib_mmap_scan

		simpler = without page shuffle, one full range each
		sooner = Manage Shared Space = MMAP_ZONE
		PG_version each page gets cached against stack of files VFS

	Entire FILE mapped in ZOME_P0P2

		LIBR can pick where it will be loaded // FILTER NO OVERLAPS
		LIBR can pack with / without gaps // spare quota

	MMAP_FILE is a RELOCAABLE file

		ZERO = ZONE.P0.get(); // AS POINTER_TO_PAGE_ZERO_LOADED_AT

	SUB_LEX_DECODING

		P0P2 & ZONE = PARAMETER
		ZONE.P0P2_get_P0() // returns EA & P0; // P0P2.struct.P0

		ZERO = ZONE.P0.get(); // CMNT

		P0P2 & P0P2 = ZONE

		NEED TO MIMIC C++ IMPLICIT LOGIC

			(cast TO) Object_FROM

			 VTBL Virtual Functions
	
	MEM_Tree uses IDX_TOKEN

		EA_ /* IDX_TOKEN */ = u32_something;

			u32_EA_EXPR_of_IDX_TOKEN = u32_EA_of_RUNTIME_ITEM

	MEM_Tree uses IDX_TOKEN

		A Pool of different POOL types

			EA processes u8

		# MAYBE Layer8 MAYBE # u3 #

		[ 7 ]
		[ 6 ]
		[ 5 ]
		[ 4 ]
		[ 3 ]
		[ 2 ]
		[ 1 ]
		[ 0 ]

		# ZERO ###################

		[ 0 ]
		[ 1 ]
		[ 2 ]
		[ 3 ]
		[ 4 ]
		[ 5 ]
		[ 6 ]
		[ 7 ]
	
		VIEW switches UP/DOWN DIAG can do BOTH

			ROM_Layer

				MANY MERGED FILES in TABLES

				eg Objects_that_have_upto_256_items
				eg Objects_that_have_upto_u16_items
				eg Objects_that_have_upto_u24_items
				eg Objects_that_have_upto_u32_items

			ROM might repeat tables (or merge them)

				VIEW = Different

			ROM_Programmable 

				EDIT = Bench Activity EDIT '-ing'
				ALLOC = HEAP ALLOC CHURNING
				REGEN = TABLE_binary_split_STRS[ u8 ] 

				 u32 LEX_tag_idx;
				 u32 LEX_tag_idx = TABLE[ u8 ]

				PSG builds LEXICON.MODULE_ROM_TYPES
	
	OK so FILE Layout is decoded using embedded TABLES

		OFFS = TABLE[ IDX ]
	
	MEM_Tree is the Bench_Activity that the user is using

		Layer = USER_SubTask
		Layer = ROM_CODE_DATA_SPEC
		Layer = APP_SCRIPT // can use tagged services + permissions
		Layer = APP_SCRIPT_range_of_TASK_in_SAFE_containers
		Layer = APP_DATA differnt HEAP different sub_Layer
		 u3_Layer8
		 u5_Heap32
	
	MEM_Tree REGEN

		incremental edit should retain the same essence and ids
		occasional REBUILD irons out SPLIT-JOIN-LISTS does REGEN
		REGEN
			eg sort files into ASCII BYTE order by name
			eg sort files by LRU_ranking
			eg cross-index sorted_by_mtime.

			RUNTIME add space for list of files to grow
			that might break the ROM table layout
			regen now, or it might be a quick filter in front
			CACHE LOCN 








