
	ARM_QEMU_TOKEN.txt

	CreateThread
	Call ASM FUNC from C
	  save all cpu_regs to pre-top
	  save all cpu_vars to pre-top
	  import STACK ARGS
	  alloca STACK VARS
	  STACK shared_ceiling PREP_CALL to OBJ [s]
	  setup cpu_vars of STACK_FRAME
	  // called from somewhere so not zero
	  CMD = LIST_of_WORD_or_TREE
	  TUPLO OPCODE 
	  OPCODE LHS RHS PLUS

	STACK FRAME

	  OPCODE LHS RHS PLUS

	  u64_WORD OPCODE // TOKEN _expr _t // it gives this N_BYTES_Layout
	   u64_WORD LHS
	   u64_WORD RHS
	   u64_WORD PLUS
	  // SPEC ...
	  //  N_WORDS == 4 // [s] 0123 

	  cpu_var_CTXT

	   the magic to make gcc reserve a register is
		register int * foo asm("a5");
	   to make GCC include that everywhere, tell CPP
		-include FILENAME # on CPP cmd line
		# search = . then ... or maybe ...
		/tools/CTXT/ccs9/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include
	   to make gcc use a SPEC file ...
	   	place it ... 
		/tools/CTXT/ccs9/lib/gcc/x86_64-pc-linux-gnu/9.3.0/specs
	   	# or invoke with -specs=$SPECS
	   to get a spec file
	   	gcc -dumpspec
	
	   NOW recompile every libr linked into the binary. dlopen() too
	   	/tools/CTXT/ with a chroot


	  cpu_var_RETVAL
	  cpu_var_SESS
	  // struct SESS { ... }
	   VARS = SESS -> VARS 
	  cpu_var_SP
	  // struct STACK_FRAME_AREAS
	  // C_API_callers_parameters // custom per C_prototype
	   
	  cpu_var_SELF
	  cpu_var_DECODER
	
	RUN QEMU on ARM.o
	 PROCESS has C_API_KERNEL
	 PROCESS has C_API_embedded

 BUILD qemu from 5.0 ... rc2

 	fails on capstone-wrapper
	thats something to do with x86dbg on WIN ?_32 _64?
	so apt install qemu

 SAYS:		https://bugs.archlinux.org/task/61507
 EDIT:		qemu-5.0.0-rc2/include/disas/capstone.h
 FROM:		#include <capstone.h>
 INTO:		#include <capstone/capstone.h>



	ls -CF /usr/bin/qemu*

	qemu-aarch64 -h
	qemu-aarch64 -cpu help
	 cortex-a53
	 cortex-a57
	 any
	
	 qemu-arm -cpu help
Available CPUs:
	...

	ls -l /usr/bin/qemu-*64* // then remove mips ppc sparc ...
-rwxr-xr-x 1 root root  2365200 Feb 12 18:56 /usr/bin/qemu-aarch64
-rwxr-xr-x 1 root root 12568816 Feb 12 18:56 /usr/bin/qemu-system-aarch64
-rwxr-xr-x 1 root root 11662592 Feb 12 18:56 /usr/bin/qemu-system-x86_64
-rwxr-xr-x 1 root root  2014272 Feb 12 18:56 /usr/bin/qemu-x86_64

DEV ENV

	start with a linked hello_word.elf
	cross compile gcc to ARM 
	add in an ASM file
	run under qemu ...

	sudo apt install gcc-9-aarch64-linux-gnu
	sudo apt install qemu-user

	aarch64-linux-gnu-gcc -o main.elf main.c
	qemu-aarch64 main.elf

MAYBE
	ABCD EFGH
	---A BCDE FGH-

	u64_WORD = * PTR // now aligned
	u64_WORD = bswap64( u64_WORD )

	// intel can do this, ARM64? // load_unaligned

	// at end of instruction, fill_to_full_8
	// at end of instruction, fill_to_edge_of_byte
	// at end of instruction, fill_to_edge_1
	// at end of instruction, step_was_n_bytes PTR += 8
	// fast filter expands AB-- ---- EFGH CD
	// RAW_LOAD_SEES hgfe_dc_ba // PTR +=4 dc_ba // reaches EFGH

	PARSE ABCD EFGH
	
	on_lohi
	 HG_BA = * PTR

CROSS COMPILE OPTIONS
crosstool, ... -NG
	http://kegel.com/crosstool/ # orig
	https://crosstool-ng.github.io/docs/introduction/
gcc
imcross
buildroot
	https://buildroot.org/
Packages:
 gcc-arm-linux-gnu (32-bit) fedora
 gcc-aarch64-linux-gnu (64-bit) Fedora or RHEL, or
 arm-linux-gnueabi-gcc ubuntu
 binutils-arm-linux-gnueabi Ubuntu

 apt install \
 binutils-arm-linux-gnueabi \
 ###
 sudo apt-get install libc6-armel-cross libc6-dev-armel-cross binutils-arm-linux-gnueabi libncurses5-dev

apt-get install binutils-multiarch
 #


