lib_YY_parser
lib_YY_parse/lib_YY_parse.txt

	run YY_PARSE over TEXT get TREE_BRANCHES in HEAP

	YY_PARSE run PSG SUBLEX over TEXT stream FRAG fragments
	YY_STREAM chunks up stream of crypted blocks over page boundary
	YY_MMAP applied PREFILTER to assist cache parse of ROM SCRIPT
	YY_INVOKE calls EVAL over PARSED SCRIPT TREE
	YY_TREE 
	 uses a RAW ARGV of TEXT FRAG PHRASE WORD as_STR0 as_P0P2_in_STREAM
	
	YY_STREAM
	 as_P0P2_in_TEXT {
	 	TEXT += STREAM_containing_PARSED_TEXT
		TEXT += INCLUDE FILE
		TEXT += LIST of TEXT incl SCRIPT 
		FRAG += INDENTED_ZONE {
		 PSG += INDENTED_ZONE_as_PSG
		 STO + NBYTES "STO" in "SPACE"
		 STO + NBYTES "OBJ" in "SPACE"
		  API P0P2_from_NBYTES__STO_OBJ // DUNDER JOIN GROUP EDGE
		  // or VOID /*deduce between "{%s}" */ AUTO PARAMETER
		  // or VOID /*deduce between "_%s_" */ _ within __ MID
		  // or VOID /*deduce between "_%s_" */ SP within SP_ MID
		}
	 }

	
	YY_STREAM 

	 as P0P2_in_SEGMENT
	 as FILE in SEGMENT
	 via DE_CRYPT FILTER as BUFFER_CHUNKS of 16K via SSL also 1K_HEADER

	 	need to transfer 16KB as a complete untouched block
		send 1K header then 16KB data // option on second channel
		send link to present
	
	YY_TREE

		we build using a generic EXPR tree 
		so that it is easier to generate generic TUPLO phrases
		specific to COPDE_POINT in MODULE
	
	XPOS

		SEGMENT
		CSR_P0
		CSR_P1 // POS of CSR as OFFS
	//	CSR_P2 // limit of parsing comes from SEGMENT

	SEGMENT_for_XPOS

		PROVIDE P0 of ZONE in SEGMENT
		PROVIDE P2 of LIST[_of_ITEM]



 TASKS += VIDEO JUKEBOX from MOBILE_TOKEN from URL

 	PUBLIC REQUEST to DJ incl LINKS // from LOOKUP // to remote
	SUBSCRIBED UPLOAD of .mp4 // with_CSR_SCRIPTS

		VAR_NAME XPOS_TRACK_P0P2

			we dont have a choice we must count P2 
			check every ACCESS
			check in advance with KNOW SAME P2 as ARG_P2

			if( CSR < P0 ) KNOW is_BEFORE_SEGMENT(IN=false)
			if( CSR < P2 ) KNOW is_WITHIN_SEGMENT(IN=true)
			if( CSR == P2 ) KNOW is_EXACTLY_OUTSIDE_EOF
			if( P2 < CSR ) KNOW is_PAST_ZERO_OF_ALIEN_SEGMENT_AFTER_EOF
	
	IN_ZONE

		MUX holds .mp4 request from .caller for 1 day + 1 week + precis
		MUX holds PLAY_LIST list
	
		[11:47] mins in LEFT_FIELD on TOTP as them interval
		[14:08] end LEFT_FIELD on TOTP unannounced
		[14:15] TOTP announced
		[17:08] Tricky
		[19:44] TOTP accounce
		[20:08] BLUR
		[24:28] Take That
		[28:06] TLC snippet
	
	on_VLAN

		subscriber += me_on_VLAN

		SESS += SESS CT_SESS_RT_SESS

		permit 20GB on DJ_BOOTHE // more as OWNER // TIDE_MARKINGS
		permit 200GB on DJ_DESK_STO

		index upload 
		.mp4 filename DIR ACCESS OWNERSHIP

			without OWNERSHIP 
			option of CRYPT so not PIRATE except to SECRET_KEY
			hope KEY means PERMITTED

			OPTION - no KEY from client, use own TAGGED PERMIT
			KEY 
			 NAME useful on keyring
			 BIND PERMIT // CODE_POINT.BIND_PERMIT += PERMIT
			 BIND FILE // str1 // own_str // CSET // asif_UTF8
			 CSET += asif_8859 
			  write 8859 -filter-> utf8
			  reade 8859 <-filter- utf8
			  on_EVENT("CHAR_from_UNICODE_beyond_CSET_ONE")
			  on_EVENT("CHAR_from_UNICODE_ie_CSET_PLUS")
			  on_EVENT("CHAR_from_UNICODE_ie_CSET_TWO")

		MEDIA PLAY SCRIPT

		 DJ_LIST

		 	start_time
			  mid_time
			  mid_time
			  end_time


			 VAR_POOL CSRS (
			  %s
			  CSR_%s	# idx_as_name_rhs
			  CSR[%s]	# idx as int in_range(CHECK)
			   passing parameter CHECK weaves code
			   CHECK_on_OK RETURN_ASAP
			   CHECK_on_FAIL CALL_on_CHECK
			  CSRS[%s]	# PICK { CSR CSRS } { SINGLE PLURAL }

			TRACK

				filename
				mimetype _from_ext // cached compiler runs
				GB
				KPS
				TIME

		DJ STO

			LIST of trusted STO

			 can get KPS to STREAM OUT
			 can use with PERMIT


			 


iso_copied/YEAR_PVR/G_to_NAS_2024/v Top_of_the_Pops_-_03_08_1995_m001tdmv_original.mp4 

		MUX holds LIBR in ROM_STABLE SEGMENT P0P2_in_SEGMENT_with_CSR

			SEGMENT provides API and cached fetched value P0P2

			 SEGMENT_on_SEGMENT




	namespace YY {
	struct YY_Parse_t {
	}; // struct
	}; // namespace

	RUNTIME invoke Parser over TEXT
	TEXT_IS_P0P2
	TEXT_IS_FILE_TEXT
	TEXT_IS_NBYTES
	TEXT_IS_UPTO_EOLN
	TEXT_IS_UPTO_PARSED

		We do not have enough parameters for NBYTES
		We might parse upto EOLN
		We might parse and STOP at XPOS P2

		Parser might adjust P0 XPOS P2 // CSR_Name == "XPOS"
		FILTERED_TREE holds both original and tokenised TEXT and TREE
		Our RT_STEP starts parsing all sorts of lefty gubbins
		trim_left "GAPS
		trim_left "\/* comment *\/" // GAPS += CMNT

		LEX.P0 is start of LEX
		LEX.P2 is end of LEX // actually start of RHS NEXT

		STR0_is_P0P2
		STR0_is_P0P2_TEXT_copied_into_a_temp_buffer2_with_auto_NUL_BYTE
		IDENT_is_STR0
		VAR_is_P0P2
		VAR_is_P0_N
		VAR_is_P0_Parse
		VAR_is_P2_from_Parse
		var_is_P3_from_Parse // next useful

			we dont do this
			instead we build a tree
			and use internalised STR0 // CSET == "CSET"

	CSET == "CSET_utf8"
	CSET == "CSET_latin1_BYTE" // 8859 but also any byte box
	CSET == "CSET_latin1_utf8" // DEFAULT // alias "CSET_utf8"
	CSET == "CSET_utf8" // DEFAULT CSET_latin1_utf8

		// Q2_ABSENT means MK_VAR 
		// STR0_t CSET_latin1_utf8 = "CSET_latin1_utf8";


LEX CLAIM	stake a claim PICK STR0_t STR0 
LEX CLAIM	stake a claim KNOW CSET = CSET_latin1_utf8 // COMPILER_KNOWS
LEX CLAIM	stake a claim KNOW CSET_latin1_utf8 = "CSET_latin1_utf8"
		


namespace YY {
 struct YY_Parse_t {

 	SPEC_NAME = "PSG_t"	// PATTERN is in TEMPLATE MATCH _t SPELLING
 	DATA_NAME = "PSG"	// SPELLING //

 -MULTI-VIEW-

 	struct YY_Parse : public PSG_runtime {
		SPEC_NAME = "%s_t" PSG
		DATA_NAME = PSG
		PSG = "%s"

		INCLUDE_FUNCS_FROM_API VIA PSG_runtime

			PARSE_TEXT_into_TREE
			PARSE_TEXT_into_STREAM
			PARSE_TEXT_kept_TEXT

			CHUNK_TEXT from filename // data is in FILE
			CHUNK TEXT from macro // data is in SOURCE DECL TREE
			CHUNK TEXT from stream // data is in YOUR_MY_P0P2
			CHUNK TEXT from api // data is VARIES
			// DATA ARGV of STR0 in VAR called "{ STR0 VARNAME }"
			// that Q2 PARSES at RUNTIME and REPEAT MENTION USAGE
			// USAGE "{ IDENT ALIAS }" 
			// IDENT "{ STR0 VARNAME }" // NOT_CIDENT
			// IDENT more parsed TEXT than CIDENT // ALIAS SPELLING

		ALIAS_SPELLING

			"{ lhs rhs }" is local Tuplo TITLE
			ANYSTR = Q2_STR_incl_Q2 // makes GEN and PARSE
			ANYSTR = { SCRIPT } // eg ...
			// "{ YY::YY_PARSE_t PSG = PSG_SPELLING }" //

			All of the PARSERS have been precompiled
			into your SESS, if you add them each gets own pfx_

				COMPILE PARSER
				add PARSER to LIST of OPTIONS
				PICK PARSER = PICK // some sort of AUTO VAR

			TOKEN_xFFF {
				AUTO GROW TOKEN_xFFF 
				 xF
				 xFF
				 xFFFF
				 xFF_FF_FFFF // DECODE(u32) BYTE _A _B _DC

				ALIAS
				 %s_%s
				 TOKEN_%s
			}

			IDX = DECODE FILENAME "{ lhs IDX rhs }"

				IDX = INT_from_within_VAR_NAME
				IDX = PARAMETER ("IDX") // AUTO UPTO IDX_t
				IDX = lookup "IDX" // subst Q2_VAL_Q2
				IDX = lookup IDX // VAL_is_CIDENT_NAME "IDX_%s"
				lhs = JOIN_POINT_LEFT
				lhs_P0P2 = provided on request, via API GETTER
				// PARSER set P0 and P2 RET_VALS
				// P0 is LEX_START
				// P2 = P0 + N; // get_N() // CATCH VAR //
				MATCH "N" KNOW_API "{ get_N() }" // SESS //
				rhs = JOIN_POINT_RIGHT
				rhs = P0P2_to_EOF
				rhs = P0_to_EOF
				rhs = P0_to_EOF from_CSR_onwards OUTSIDE PARSE

			TOKEN = "EXPR" 

				lookup TOKEN
				parse UNIQUE SPELLING PARSED UTF8


 
 	virtual DTOR(); // DTOR // no_args // GEN rewrites as "~YY_Parse_t()"

	// PSG_CTOR
	CTOR() { SCRIPT }
	CTOR( MATCH ) { SCRIPT } // MATCH 

	str1 Name; // PSG == "AFM_font_metrics _parser" // AUTO VAR EACH BOTH NONE
	// PSG = Name 
	// PSG = "AFM"
	// PSG = "AFM_font_metrics"
	// AUTO ALIAS AFM Adobe // TLI USAGE ACRO_second_third // DIALECT AS
	// AUTO AS AFM Adobe Font Metric // TLI DECL // WORD_LIST 
	// TLI USAGE ACRO_second_third // DIALECT AS

	// SELF = Name == "PSG" // AUTO_VAR // template from or parse into

	// SCRIPT use "CTOR() { SCRIPT } // ARGS VAR_POOLS //
	// CTOR(NAME) //
	// scripted decl of CTOR(NAME) // expands to ...
	// virtual ~TYPE_NAME(); // NO ARGS SO ARGS += API_VAR_NAME
	//
	// auto replace SCRIPT SUBLEX TYPE NAME TYPE_NAME NO_MATCH
	// NO_MATCH == NULL // ie do nothing on detect NO_MATCH // fastest exit
	

 	// BASE CLASS VTBL_TYPE_INDICATION_SYSTEM += "virtual base class in modules dialect"
	// /* BASE_CLASS_OBJECT_INSTANCE */

 };
}

namespace YY {
 ++INDENTED_TEXT
 /* <--- INDENT %s */ // BENCH GROW %s is P0P2 P0_N or UDEF
}; // NAMESPACE 

