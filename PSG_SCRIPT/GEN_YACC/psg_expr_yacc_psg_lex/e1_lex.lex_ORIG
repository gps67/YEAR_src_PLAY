%{
// /////////////////////////////////////////////////////////////////////
// included from
// e1_lex.lex
//
#include <string>
#include "buffer1.h"
struct EXPR;
#include "e1.tab.hh"

/*
	lookahead may mean any number of tokens, not 1

	quick test shows actually OK 1 as long as yacc strdup's immediately
	but maybe
*/

// static const int nlex16 = 64;
static const int nlex16 = 16;
// static const int nlex16 = 1;
static buffer1 lex_buffer;
static buffer1 lex_pool[nlex16];
static int nlex_pos = 0;

 /*
 	lex found, return tok

	lex has found the string at yytext, yyleng
	use next storage slot (reuse nlex16 items later)
	copy string to buffer, as str0
	set yylval /union/ .lex_buff as returning string value
	return tok as lex type

 */
int lex_return( int tok )
{
	// skip first cell once, get it next time, or init -1
	nlex_pos = (nlex_pos+1) % nlex16;
	int pos = nlex_pos;
	lex_pool[ pos ].set( yytext, yyleng );
	yylval.lex_buff = (str0) lex_pool[ pos ];
	return tok;
}

#define SAVE_TOKEN  yylval.string = new std::string(yytext, yyleng)
#define TOKEN(t)    (yylval.token = t)

//
// e1_lex.lex END
//
// /////////////////////////////////////////////////////////////////////

%}

%option noyywrap

%%

\r\n			yylineno++; return TOKEN(TOK_EOLN);
\n			yylineno++; return TOKEN(TOK_EOLN);
[ \t\r\n]		return TOKEN(TOK_WS);
"extern"                return TOKEN(TOK_EXTERN);
"return"		return TOKEN(TOK_RETURN);

[a-zA-Z_][a-zA-Z0-9_]*  return lex_return( TOK_IDENTIFIER );
-?[0-9]+\.[0-9]* 	return lex_return( TOK_DOUBLE );
-?[0-9]+		return lex_return( TOK_INTEGER );

"=="			return TOKEN(TOK_CEQ);
"!="			return TOKEN(TOK_CNE);
"<"			return TOKEN(TOK_CLT);
"<="	          	return TOKEN(TOK_CLE);
">"			return TOKEN(TOK_CGT);
">="			return TOKEN(TOK_CGE);

"="		 	return TOKEN(TOK_EQUAL);
"("	          	return TOKEN(TOK_LPAREN);
")"			return TOKEN(TOK_RPAREN);
"{"         		return TOKEN(TOK_LBRACE);
"}"			return TOKEN(TOK_RBRACE);

"."         		return TOKEN(TOK_DOTOK_);
","			return TOKEN(TOK_COMMA);

"+"			return TOKEN(TOK_PLUS);
"-"		        return TOKEN(TOK_MINUS);
"*"		        return TOKEN(TOK_ASTERISK);
"/"			return TOKEN(TOK_SLASH);
"^"			return TOKEN(TOK_CARET);

.                       printf("Unknown token!\n"); yyterminate();

%%
