#ifndef P0P2_H
#define P0P2_H

/*
	p0p2  is a string found within other strings (or buffer)
	it could be arbitrary bytes not chars
	there is no NULL byte at the end - unless there is
	strings are only used for initialisation and produce result
	there is no malloc, you have to provide the original buffer
	used mainly to hold a mmap'd file p0= start p2=end p1=your-p1=inside
*/
/* p0p2.c - NONE */

#include <string.h>
#include <malloc.h>
#include "misc.h"

inline int	least( int a, int b )
{
	return (a<b)?a:b;
}

#include "ints.h"
#include "is_diff.h"

/*!
	a block of memory bounded by two pointers

	p2 points outside (the next zones p0)

	[p0 ... [p2

	p1 doesnt exist - its your pointer within p0p2
*/
struct p0p2
{
	u8 * p0;	// points to first char  INSIDE
	u8 * p2;	// points to first char OUTSIDE

	p0p2( void )	//! default ctor sets to -1 not to NULL
	{
		p0 = p2 = (u8 *)(-1);
	}
	p0p2( u8 * P0, u8 * P2 ) //! construct from two pointers
	{
		p0 = (u8 *)P0;
		p2 = (u8 *)P2;
	}
	p0p2( char * P0, char * P2 ) //! construct from two pointers
	{
		p0 = (u8 *)P0;
		p2 = (u8 *)P2;
	}
	p0p2( char * buff, int len ) //! construct from pointer and length
	{
		p0 = (u8 *)buff;
		p2 = (u8 *)buff + len; /* NOT strlen */
	}
	p0p2( char * buff )	//! construct from C string, excl NUL
	{
		p0 = (u8 *)buff;
		p2 = p0 + strlen( buff );
	}
	p0p2( const p0p2 & rhs ) //! default copy
	{
		p0 = rhs.p0;
		p2 = rhs.p2;
	}

	void trim_leading_blanks() //! ok for utf-8
	{
		while( p0 < p2 )
		{
			u8 c1 = *p0;
			if( (c1 == ' ') || (c1 == '\t') || (c1 == '\r') )
			{
				p0 ++;
			} else {
				break;
			}
		}
	}

	void trim_trailing_blanks() //! ok for utf-8
	{
		while( p0 < p2 )
		{
			u8 c1 = *(p2 - 1);
			if( ( c1 == ' ' ) || (c1 == '\t') || (c1 == '\r') )
			{
				p2 --;
			} else {
				break;
			}
		}
	}

	void trim_blanks() //! ok for utf-8
	{
		trim_leading_blanks();
		trim_trailing_blanks();
	}

	int	str_len(void) { return p2 - p0 ; } // arithmetic, not sweep

	char *	str_cpy( void ) //! create a new copy, with added NUL
	{
		int len = str_len();
		char * s = (char *)malloc( len+1 );
		if(!s) return s;
		memcpy( s, (char * )p0, len ); /* see +1 above */
		s[len]='\0';
		return s;
	}

// shouldnt this say STATIC ... even though inline its a C++ non-member

	friend	static int cmp( p0p2 & lhs, p0p2 & rhs )
	{
		int ll = lhs.str_len();
		int lr = rhs.str_len();
		int lo = least( ll, lr ); 
		int t = memcmp( lhs.p0, rhs.p0, lo );
		if( t<0 ) return IS_LESS;
		if( t>0 ) return IS_MORE;
		if( ll == lr ) return IS_SAME;
		if( ll <  lr ) return IS_LESS;
		if( ll >  lr ) return IS_MORE;
	}
};

#endif
