
	TCL_notes_TYPE.txt


typedef struct Tcl_ObjType {
    const char *name;           /* Name of the type, e.g. "int". */
    Tcl_FreeInternalRepProc *freeIntRepProc;
                                /* Called to free any storage for the type's
                                 * internal rep. NULL if the internal rep does
                                 * not need freeing. */
    Tcl_DupInternalRepProc *dupIntRepProc;
                                /* Called to create a new object as a copy of
                                 * an existing object. */
    Tcl_UpdateStringProc *updateStringProc;
                                /* Called to update the string rep from the
                                 * type's internal representation. */
    Tcl_SetFromAnyProc *setFromAnyProc;
                                /* Called to convert the object's internal rep
                                 * to this type. Frees the internal rep of the
                                 * old type. Returns TCL_ERROR on failure. */
#if TCL_MAJOR_VERSION > 8
    size_t version;             /* Version field for future-proofing. */

    /* List emulation functions - ObjType Version 1 */
    Tcl_ObjTypeLengthProc *lengthProc;
                                /* Return the [llength] of the AbstractList */
    Tcl_ObjTypeIndexProc *indexProc;
                                /* Return a value (Tcl_Obj) at a given index */
    Tcl_ObjTypeSliceProc *sliceProc;
                                /* Return an AbstractList for
                                 * [lrange $al $start $end] */
    Tcl_ObjTypeReverseProc *reverseProc;
                                /* Return an AbstractList for [lreverse $al] */
    Tcl_ObjTypeGetElements *getElementsProc;
                                /* Return an objv[] of all elements in the list */
*/
    Tcl_ObjTypeSetElement *setElementProc;
                                /* Replace the element at the indicies with the
                                 * given valueObj. */
    Tcl_ObjTypeReplaceProc *replaceProc;
                                /* Replace sublist with another sublist */
    Tcl_ObjTypeInOperatorProc *inOperProc;
                                /* "in" and "ni" expr list operation.
                                 * Determine if the given string value matches
                                 * an element in the list. */
#endif
+-- } Tcl_ObjType;


	-- condensed a bit
	-- translated

typedef struct Tcl_ObjType {

 str1 name;

    const char *name;           /* Name of the type, e.g. "int". */

    Tcl_ FreeInternalRep Proc *freeIntRepProc;
                                /* Called to free any storage for the type's
                                 * internal rep. NULL if the internal rep does
                                 * not need freeing. */
    Tcl_ DupInternalRep Proc *dupIntRepProc;
                                /* Called to create a new object as a copy of
                                 * an existing object. */
    Tcl_ Update String Proc *updateStringProc;
                                /* Called to update the string rep from the
                                 * type's internal representation. */
    Tcl_ SetFromAny Proc *setFromAnyProc;
                                /* Called to convert the object's internal rep
                                 * to this type. Frees the internal rep of the
                                 * old type. Returns TCL_ERROR on failure. */
#if TCL_MAJOR_VERSION > 8
    size_t version;             /* Version field for future-proofing. */

    /* List emulation functions - ObjType Version 1 */
    Tcl_ObjType Length Proc *lengthProc;
                                /* Return the [llength] of the AbstractList */
    Tcl_ObjType Index Proc *indexProc;
                                /* Return a value (Tcl_Obj) at a given index */
    Tcl_ObjType Slice Proc *sliceProc;
                                /* Return an AbstractList for
                                 * [lrange $al $start $end] */
    Tcl_ObjType Reverse Proc *reverseProc;
                                /* Return an AbstractList for [lreverse $al] */
    Tcl_ObjType GetElements *getElementsProc;
                                /* Return an objv[] of all elements in the list */
*/
    Tcl_ObjType SetElement *setElementProc;
                                /* Replace the element at the indicies with the
                                 * given valueObj. */
    Tcl_ObjType Replace Proc *replaceProc;
                                /* Replace sublist with another sublist */
    Tcl_ObjType InOperator Proc *inOperProc;
                                /* "in" and "ni" expr list operation.
                                 * Determine if the given string value matches
                                 * an element in the list. */
#endif
+-- } Tcl_ObjType;


