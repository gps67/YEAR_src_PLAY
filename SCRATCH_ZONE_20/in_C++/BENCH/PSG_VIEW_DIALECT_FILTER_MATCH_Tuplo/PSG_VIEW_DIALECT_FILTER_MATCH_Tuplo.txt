2020-02-07 Feb Fri 11:03

 Bench
	PSG_VIEW_DIALECT_FILTER_MATCH_Tuplo/
	PSG_VIEW_DIALECT_FILTER_MATCH_Tuplo.txt

	SUBLEX is a module of PSG module

	 samp API as PSG and TOKENISER.u24_idx_expr

	   TOKEN[ idx ]
	   ITEM_t & item = EXPR
	   ITEM_t & item = EXPR TOKEN[ idx ]

	   SYMBOL_t & SYMBOL = KNOW u24_t idx
	   # VIEW option
	   # VIEW_as u24_idx // SYMBOL == "SYMBOL" // or other SUBLEX expr
	   # VIEW EA %0 as_id_in_zone SPACE // KNOW %0 is u8_u24_in_CPU

	   # VIEW EA %0 
	   # as_id_in_zone SPACE
	   // KNOW %0 is u8_u24_in_CPU
	    WORD  u8_u24_in_CPU


 LANG
 	WORD == u32_WORD // IDX or OFFS or EXPR
	SENSE == ROM_SEGMENT.ZONE_SPACE.lookup( u32_WORD )
	# THIS TOKEN # merges two types into same_id_same_item_TYPE_t
	# SYNTAX Layout FILTER rewrite # 
	ROM_SEGMENT.ZONE_SPACE.lookup( u32_WORD );//ea_THIS // EA_EXPR
	SENSE == ROM_SEGMENT.ZONE_SPACE.lookup( u32_WORD )

	LANG specifies a few hard to parse typedefs
	LANG notices ambiguous usage, resolves with _t
	BENCH adds loads of mini notes to tree
	LANG is those notes, somwhow GEN + PARSE + TREE + EDIT + RUN

 bootstrap dependency

 	test twin world ... update tests ... update edit both ...

	remain within the capability of old version
	add extra features
	fix existing features
	repair tree data
	reload tree from edited source // _regenerated_sources_

 EA_EXPR

 	u32_WORD // u16_u8_u8_in_CPU

 eval( EA_EXPR )

 	u32_WORD_t u16_u8_u8_in_CPU = EXPR
 	u32_WORD_t u16_u8_u8 == u16_u8_u8_in_CPU
 	u32_WORD_t & u16_u8_u8 == u16_u8_u8_in_CPU
	u64_WORD_t & u32_u16_u8_u8_t 


    u64_WORD_t & u32_u16_u8_u8 == u32_u16_u8_u8_in_CPU

	u32_u16_u8_u8_t & u32_u16_u8_u8;


 DOUBLE PARSE

 	CT TOKENISER RHS = PARSE expr in FILTER scripts
	 prepare single TOKEN = locn_of_expr_in_compiled_FILTER
	 prepare SCOPE full of ITEM [s]
	 share SCOPE with wider SPACE of [u16_idx]
	 share SCOPE with wider SPACE of AREA_BASE + u16_offs

	  using OFFS massively reduces reachable range but saves layer
	  BUT using IDX0 to load a SCOPE that is a machine fsm or ...
	  CAN have it using u16_offs, u8_idx, no need for u32_EA_global

 	SCRIPT = input TEXT from USER edited
	FILTER = this_MATCH_Tuplo
	 HERE == EXPR == MATCH <PATTERN> // TRIGGER
	 HERE == EXPR == <PATTERN> // PATTERN = u32_WORD
	 // CODE SPLICE // OBJ_t & obj = lookup( u32_WORD ); // CMNT
	 // Tuplo MATCH // enum subrange for bitpacked_WORDS
	 RULE == SUBLEX LHS RHS {
	  LHS == INPUT // ARGS parameter or u32_token_says_BIND_var_INPUT
	  RHS == MATCH // _EXPR // LIBR.SCRIPT ROM_SEGMENT u24_ADDR_EXPR
	 }

 	build the TREE with type_tagged_Tuplo_twigs
	PARSE { SCRIPT } into TREE_t & LHS;
	TREE_t & LHS = PARSE ( SCRIPT ); // lhs = SCRIPT
	TREE_t & lhs = SCRIPT
	TREE_t & lhs = SCRIPT_CSR_POS
	TREE_t & rhs = CSR_POS_in_SCRIPT
	TREE_t & rhs = EXPR CSR_POS SCRIPT EA_EXPR // _64 _32 _u16_u8_u8

 the TOKENISER ran PARSE over LIBR_SCRIPT_edited

	# DIALECT sees "SCRIPT" // %s_%s item_SCRIPT item_attr_name // SUBLEX
 	SCRIPT_tree = PARSE SCRIPT_text
 	SCRIPT_text = REGEN SCRIPT_tree

 	updated + regenerated
	TREE_t & SCRIPT = lookup( u32_WORD ); // CT RT // WORLD += MEM_SPACE
	ITEM_t_u32 & HERE == u32_HERE; // LAYER_OVERLAP
	ZONE_t & ZONE = lookup( u32_WORD ); // ZONE_t is CACHE u32_decoded

	# SCOPE # 
	# decode_lookup_cache( u32_WORD )
	# HERE = shared reference to OBJ held by CACHE 
	# HERE.u32_WORD == u32_HERE # CT KNOWS

 u16_u8_u8
 	u32_WORD
 	u32_WORD_in_CPU
	u16_u16 // union puns available
	 u8_WORD
	 u8_BYTE
	 u8_Lo
	 u8_Hi
	 u16_HiLo // u16_WORD u16 u16_
	 u16_high_shifted
	 u32_WORD

// next	 u32_high_shifted

	OK ASM has influence on phrasebook of opcodes used / avail
	EG R2 = (WORD_CAST) R1 
	EG R2 = (WORD_CAST) R1.fragment
	EG R3 = clean_up R2 for wider access

 u8_ROM_SEGMENT_in_SPACE
 u8_PAGE_in_SEGMENT // ZONE_t & area = lookup( SEGMENT, u8_idx
 u16_ADDR

 	decoder u16_hilo ... // SCRIPT precipitates // HERE_IS ...

	 SPEC_WORD u8_hi_u8_lo_t 
	 // SPEC_filter SUBLEX_MATCH u8_u8_hi_lo MATCH _u16_
	 // _^_ // ^ // alias "_^_"
	 // _^_ // ^ // alias " _^_ " // as_lex() // with_surrounding_SP()
	 // _^_ // ^ += lookup(" _^_ ")
	 // MATCH " SP %s SP " IDENT_STR // ID.str avoids " " within LEX_expr
	 // MATCH expr // SUGGEST cident_ASCII_8859_UTF8_via_TOKEN eg cident99
	 // MATCH cset == ASCII DIAG // cset += '_' += '^' // SUGGEST Q2
	 // SUGGEST Q2 SP TEXT SP Q2 // PSG.TEXT == TEXT // _t
	 // MATCED _t // Type_t & item = EXPR( OBJV , _ENV ) // _ENV = builtin
	 // SUBLEX DOX += HERE EG_of "anystr" auto_opt_add("LHS") // " SP "
	 // SUBLEX DOX += HERE EG_of "anystr" auto_opt_add("RHS") // " SP "
	 // MATCH EXPR lhs SP1 %s "{}"
	 // 
	 u8_hi_u8_lo_t

 SCOPE = ZONE
  saved as ROM[ zone ] STO[ zone ] STO[ stack ]
  ZERO == zone_item_zero
  ITEM == zone_ITEM - ZERO // BASE OFFS // ZERO SLOT

  add ZONE_ITEM[ u12 ] // OPCODE[u4] ITEM[ u12 ]
  add ZONE_VAR[ u4_idx ] //  
  add ZONE_FSM[ u5_idx ] // few needed here






