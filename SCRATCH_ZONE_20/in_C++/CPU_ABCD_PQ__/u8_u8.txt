
	u8_u8.txt

	SEGMENT_u8_u8_t

	 u8_hi = idx_of_PAGE // within SEGMENT
	 u8_lo = idx_of_ITEM // within PAGE

	SEGMENT_u8_u8_MULT_t
	
	i8_EXPR_PAGE
	i8_EXPR_ITEM
	i8_EXPR_MULT_as_TOKEN  # 1 2 4 8 # EXPR[i8] { ARGS } # [idx]

	MULT can come from XPOS of something (eg ARRAY_NAME) (eg ITEM_TYPE)
	XPOS has an VIEW_EXPR for each USAGE_MENTION # CODE_USAGE
	XPOS creates a SEARCH_SEQUENCE or _LIST
	XPOS_ATTR where ATTR is GETTER_ALIAS_ATTR ie EXPR_two gives EXPR_one
	_one = lookup _two
	_two is i8 i8_PLUS i8_ZERO i8_MINUS # _is_IDX # is_FUNC_or_FURTHER

	CODE_POINT goes through MACRO processor # and GEN_POINT #
	CODE_POINT steps forward and says MULT = 8 # 2K of 4K
	MINI_MACHINE uses MMAP_PAGE of 4K two halves 2K_2K IDX_STO
	STO is anything that works in 2K

	BUT expand to contiguous pages of 4K, *in*2K*STEPS*
	Second ARRAY can share first page at OFFS
	First half page of SEGMENT_two jumps out to 8K when 2K reached
	SPARSE_MMAP_PAGE UNLOAD_PAGE ZERO_OVER_PAGE <==- SECURE-ISH
	
	[u16] as [i8][i8] and [u8][u8]	# FIXED u8 LIMIT # GROW_u7_u15_u31_u63
	PAGE can be of 1K bytes of EIGHT[u7] # 1K of i8_MINUS_SLOTS #
	Each PLUS SLOT can be EIGHT_t EIGHT = i64_BASE_OFFS_EXPR # i64_VALUE
	Each MINUS SLOT can be CALLABLE

	SEGMENT_u16_t

	
	 ALLOC = PLOW_THROUGH_PAGES // CLICK JUMP BACKFILL
	 BASE = SEGMENT_u8_u8 via u16_hilo ALLOC=renumber after sort

	SEGMENT_u8_u8_t

	 PAGE = VECTOR_OF_PAGES[ u8_hi ]
	 ITEM = VECTOR_OF_ITEMS[ u8_lo ]
	
	u16_hilo as u8_u8
	// hilo in mem u16 in cpu_var VAR
	// WORD does some bitfield fast access
	// u32_abcd // abcd in MMAP ; dcba in VAR ; letter_b in VAR.cpu_var.VH // .VH .VL .VX .reax
	// .u16_cd // DX_u16
	// .u16_ab // cpu_var_u32.rotate_16 u16_retval = DX_u16
	// ,u32_abcd // .reflex field == "ID" == "idx" == 'TABLE.lookup("anystr")' // this is why SCRIPT breaks C 'A' char to 'str'
	// SHELL use of ' to surround " can be useful, eg 'Obj_t & obj = %s Q1 EXPR_in_not_Q1_dialect Q1 ENDLEX(usually)
	// .lookup("anystr")
	// SEGMENT.TABLE.lookup("anystr")
	// SEQ Q1 not_Q1_str Q1 USUALLY_LEX_END
	// SUBLEX SEQ ASCII_SINGLE_QUOTE 
	SEQ reax // r e {a,b,c,d} {h,l,x} // MORE R8, R9, RA, RB, RC, RD, MORE RE RF MORE SP FP IP MMX [s]  }

	// TODO READ UP ON RE { curlies }

u32_OFFS_FILE u32_OFFS_SEGMENT u8_idx_SEGMENT_id u24_idx

	PROFILE_t & PROFILE = _SEGMENT_ // MMAP each FILE into its allocated PAGE0 ... PAGE[N]

	FILE_t & FILE = _SEGMENT_
	FILE_t & FILE = _SEGMENT_

	Actually you could have 64 bit SEGMENTS with FAST ZONE [ u24_idx ] BUT 32 bit SEGMENT is plenty for DTP APPS
	With coding, can have BLOB48 u48_idx u64_idx // BLOB32 // u64_idx 

		The FILE uses u32_OFFS // u64 could multiplex u32_file into existenca
		The FILE exports u24_idx // [u24_idx] of [u32_idx]
	
	ALSO I am loading everything into four PROFILE_FILE s ROM3 // each pre-merged


	u32_OFFS_FILE
	u32_OFFS_SEGMENT
	u32_IDX_SEGMENT

	u8_idx_SEGMENT_id	leaves u24 for use WITHIN this file
	u8_idx_SEGMENT_id	tells us EXPR to . // presume full ROM MAP loaded // still works when unloaded

	u24_payload_to_u28_OFFS // _CLICK_u4
	u28_OFFS_FILE		DATA_16MB_PAGE16M // convert u24_payload
	u28_OFFS_SEGMENT

	u8_idx Layer		SYMBOL USAGE SHIFT // magic from idx to Object * // needs ZERO of CURR Layer
	// u2_idx STO=STO // abcd.a.u2 = u2_idx

	u24_idx u8_u8_u8	This is still one file decode_u32 with 256_Layers

ADDR_PAIR
	( HEAP ITEM }

	{ FILE SEGMENT }

	{ SEGMENT EXPR } // probably_ITEM_EXPR might be { on_first_use() ; /* retval */ get() }

	{ CTXT EXPR } // PLUS other_parameters_locals_globals_etc // PLUS macro_tree_gen_SCRIPT_EXPR


SUBLEX	building runtime trees of data for CACHE filters etc

	u24_u8 SEGMENT_EA_EXPR_32 // ea of ITEM = obj = &*this in SEGMENT_BYTES 

	SEGMENT_EA_EXPR_32
	SEGMENT_BYTES
	SEGMENT_N_BYTES // RT data available in VAR = SEGMENT .nbytes _asif_ _P0P2_ _N_BYTES_
	SEGMENT_SPEC // CT KNOWS (at_least) CODE_POINT=={ cident TYPE_EXPR_name_of }

	OPCODE_NBYTES // opcode is DATA_Layout_opcode {u32_hilo N} {u8[ N ] BYTES; // inline data }

	STRUCT_field
	STRUCT_expr
	STRUCT_nearest_copy
	CPU_VAR = STRUCT_field // WORD_u32 or other
	CPU_VAR . bits . rotate bit_fields test_for_zero test_bit_flags 
	CPU_VAR . save_on_stack . save_on_nearby register . load_from_stack load_from_register
	CPU_VAR the ITEM can move into and out of a CPU_VAR, to a closer CPU_VAR, nearest proper NAME is CPU_VAR

	SEGMENT_OFFS_u24 
	 SEGMENT_OFFS_u32 // KNOW u24_u8 as u32_abcd // KNOW BITFIELDS_abcd

		SEGMENT_OFFS_u32 // expect aligned to 16 // CPU can return u32 from u12 bitfield 
		KNOW u24 < u32 so no possible sign consufion
		KNOW u24 was only a suggestion, for the near-reachable-area
		KNOW u12 bitfield in EXPR_64 requires OWN_CPU_VAR in CACHE // downgrading CPU_VAR to SCRIPTED_EXPR( ... )

	SEGMENT_u8_u8

		object = OBJECT_[u16_idx]
		OBJECT[ 64K ]


/////////////////////////
	 
	PAGE_t _as_VAR

	 crazy tokenised 'bolic world
	 might want a var, to "BE" the type_SPEC["PAGE_t"]
	 _t is misleading, but only because the SYMBOL prefix
	 #SYMBOL $SYMBOL "SYMBOL" // splice "anystr" CPP_TOKEN
	 #define TOKEN_name1 PAGE
	 #define TOKEN_spelling "%s_t" TOKEN_name1
	 #define TOKEN_declaration LEX_ON_PAGE
	 // LEX_in_LIST // leave PAGE for DTP // for MMAP segment PAGE0
	now back to sane world where PAGE_t is a type, Bench has INST_ACCES

	not worried about speed of ALLOC idx = N++;

	know FULL is NULL

	class SEGMENT_t : SPEC_t
	{
	
		WORD_u32 
	         PAGE = VECTOR_OF_PAGES[ u8_idx ];

		bool decode_u16_ea(
			// SEGMENT_t & SEGMENT = *this
			u16_hilo & hilo,
			PAGE_t & PAGE,
			ITEM_t & ITEM
		);
	}

	class PAGE_t : SPEC_t
	{
		WORD_u32 
	         ITEM = VECTOR_OF_ITEMS[ u8_idx ];


		// ALLOC
		bool EMPTY = true; // N_free == ZERO means EMPTY // else full
		u8 N_free = 256; // KNOW ZERO on_first_use() on_FULL()
		u8 idx = u8_idx;

		bool is_FULL() { 
		 if( N_free ) return false;
		 // because N 256 free clamped in u8 // zero means ...
		 if( EMPTY ) return false;
		 return true; // is full
		}

		bool is EMPTY() { return EMPTY; }

		u8_idx_t ALLOC() {
		   if(is_FULL()) {
		    OVER_FULL_bounds_error();
		    return 0xFF;
		   }
		 }

		 int idx = N_free; // use VAL then decr for next
		 N_free--; // LOCK get_decr_put_ret_orig if_C_FLAG
		 if(N_gap == 0)	// FULL or EMPTY clipped
		 {
		  if(EMPTY) {
		   EMPTY = false;
		  } else {
		   on_FAIL() = OVER_FULL_bounds_error();
		  }
		 }
		 if(idx == 0)
		  on_LAST();	// 
		 if(is_full_flag) on_FULL() 
	};

///////
		 LOCK get_decr_put_ret_orig if_C_FLAG

		 int N = N_free--; // LOCK
		 if_BORROW

		 LOCK get_decr_put_ret_orig if_C_FLAG

		 LOCK get_decr_borrow_bails_put_ret_orig 
		  calls
		        ALREADY_EMPTY_bounds_error();

		  // FULL_POS = N_when_FULL = 256
		  #define FULL_POS 256
		  SPIN_lock {
		   int N = N_avail;
		   if( N == 0 ) {
		   	release SPIN_lock; // can now call user code
		        ALREADY_EMPTY_bounds_error();
			return FAIL( "N_avail == 0" );
		   }
		   int idx = FULL_POS - N; 
		   N_avail --;
		   release SPIN_lock; // can now call user code
		  }
		  on_EACH(); // idx
		  if( N == 0 ) { 
		   on_LAST(); // idx
		  }

