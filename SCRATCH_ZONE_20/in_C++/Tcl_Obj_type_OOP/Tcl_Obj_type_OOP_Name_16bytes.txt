
	Tcl_Obj_type_OOP/
	Tcl_Obj_type_OOP_Name_16bytes.txt

	Tcl_Obj *
	bool is_Module_Type_Item_type_u2 // 4 TOKEN s all of Module $0
	// compare obj -> typePtr -> 

 Tcl_Obj because { SUBLEX } has common subset of LEX exprs

 	I thought this through decades ago,
	mostly because { tcl is an amazing lisp } 
	but didn't want to swim against Tcl.h clone_on_write value
	(I see obj ~= variable // editable struct)

	as part of VALUE_is_like_a_VAR _or_heap_allocated_editable_OBJ
	can put node scope(obj->name) as leaf in tree as node in tree as VALUE
	and that works 

	Since then, tcl has added tclOO and plethora // (confusing muddle)
	so TODO try out tclOO on it's terms, not mine, eg table

	Even so, at risk of duplication,
	Tcl_Obj * STRUCT {
	 CODE_POINT ...
	 OPCODE
	  LHS = /* if used */ Tcl_Obj // deal with builtin int string list dex
	  RHS = /* if used */ Tcl_Obj // add more to DIAG DIAG_CODE
	  CMNT = Tcl_Obj || u32_EXPR // += CTXT += SCOPE_LOCAL_STO += DOX

u64 u16_u48 

	}

DECISION 
 C++ class u64 u48_u16 u16_u48 // USAGE u64 is sufficient for code data payload
 C++ class ALIAS u64 u48_u16 u16_u48 // USAGE u64 
 C++ class u128 as u64 u48_u16 // explains += DIAG
 C++ class ALIAS u128 u64_u64 PTR1 PTR2 // u48_u16 PTR_u16_HL // heavy ink // AB
 C++ class u48_PTR_u16_ab u16_ab PTR=WORD>>16 // but with added spaces own diag
 PSG_sublex_SPACE_detect {
  FSM {
  	ATTR MID_GAP SUBLEX.is_mid_gap // as var // as func // peer is_not
	" any star { SP TAB }" // ambig usage, ok if absent, as_if already seen
	" any star { SP TAB }" // is_mid_gap // simply mentioning it ... CTOR
	SUBLEX
	// PSG within SUBLEX // finds some STEP_double_STEP expansions
	// sweep over u3 possibilities
	 CSET via_utf8 // transparent transport
	 // CODE MUST OUTPUT BASE64 -like- 
	 // CODE MAY follow these rules, or crypt rules, or
	 // avoid XOFF 
	 // avoid C2 C3 // utf8 uses them for 8859 8-bit values
	 // avoid CTRL ^C ^D all of them
CSET
ASCII - PSG_SUBLEX works fine on any 8-bit-clean transport text-medium
utf8 - as best endeavour
utf8 - as valid encoding rule, MATCH(single_CSET_unit) // u32 as u8 in u24 pageo

## trick val = 1<<24 ## immed past zero_ _plus_u24 ## MMAP 

	 u7_chr // low 32 + 2 reserved for CTRL_GAP SP DEL

	  
	" any star { SP TAB }" // is_mid_gap // simply mentioning it ... CTOR
  }
 }
u64 u48_u16
u64 u16_u48 

## ok ok ##


DECISION 
 tclsh is a very fine vehicle, for nested curlies,
 obviously ignore usage of [] even $
 obviously repeat usage of \ and quotes "Q2" 'Q1' Q0_no_quotes _nor_backslash

 add some integration like_for_SWIG code
 Module LOAD er - of 8 prebuilt modules see load_map
 Object can be variable
 Key can be (key,val) Obj is own key
 CODE is SCRIPT via PSG_SUBLEX via DIAG_explains
 DATA is MODULE CTXT cpu_var_CTXT
 CTXT
  thread_var_POOL_thread_vars
  "Name" u3_idx // expand u8_idx u16_idx u32_EXPR sparse_usage_N AVAR

  spec_of_local_stack_frame
  "name" -refers-to-> -is-alias-of-> RHS // optional use of parameters
  // hidden parameters // link siblings into same space // usage import
  // declarations MATCH_TOKEN_USED
  cpu_var_CTXT
  cpu_var_STACK // 
  CTXT.SCRIPT_CSR.XPOS // is a lot more than xpos, is xpos line seek or idx exp


 OPAQUE pointers to objects within MMAP

 	u8_idx -expr-> u32_EA_item_in_segment _in_CPU _in_VFS _in_TBL

	obj.get_tcl_str_as_name() // NAME_FFFF _0000
	this makes _as_name sufficiently unique to avoid WRAP_namespace

	TREE might use a lot of plain tcl str0 
	TREE might upgrade to TOKEN_SPELLING key_val_is_same_obj_obj

	type morphism of the fixed HEAD object

		+= Name N_BYTES // could be Layout
		+= Tcl_Type item_of_module_u3 // u3 is ANY payload // idx_module
		+= PTR1 // u48_i16
		+= PTR2 // u48_i16

	PTR // u64 only, soz // u32 bus u8_idx often

		PTR = u48_u16 >> 16 // via SCRIPT TOKEN opcode

 DECODE OPAQUE OPCODE

 	use MMAP // seeing MMAP is the not opaque step // trust own ROM

	 PTR is not PTR it is u48_payload
	 u16 is always u16_ab except when NULL or FFFF
	 # I bet FFFF never happens # reuse ensure
	 # I bet 0000 happens via handler // is u64_NULL // is client_data_ptr
	 # vanilla ideal for tokenisation ?
	 # speed for Tcl_Obj_wrapped_with_u16 // global u16 spece in PTR

		u48 _ u16

 explain unreachable MMAP

 	MMAP is callers untrusted code, but given CPU MEM STO BANDWIDTH

	caller asks us to use out builtin ROM == actually reachable

	callers FSM decodes as ... how_it_lays_out


m ObjectType.3

	Tcl_ObjType
	 const char * name;
	 free Internal Rep ( tcl_obj )
	 dup Internal Rep ( src, dst ) // both tcl_obj
	 updateString ( tcl_obj )
	 set From Any ( interp, tcl_obj )
	TEST but pretty certain can have own DATA added here
	 free_Internal_actual func

 TEST is_my_module

 	obj -> typePtr -> free_InternalRep == MY_free_Internal Rep

	// it requires all modules free COMPAT with
	// free( obj, u3_mod ) // module.free_rerouted( obj ) 
	// func = table[ u3 ] 

	actually that is inefficient
	as ALL objs get freed, all from set from Any, 
	so pick 
		dup internal rep ## what is that anyway
	then

		is_loaded_module // all adding at least fields

	no u3 required, simply define 300 types
	no u3 required, simply get SUITE module ALL_TYPES
	OPAQUE ALL_TYPES 

	all modules loaded under MODULE_UMBRELLA
	all object types are ITEM_TYPE("EXTN_Object")
	all object types then decode(u128)
	all object name, addr, bindings_rerouted from u128_obj_head + name + addr

 SAMPLE API

	SET $obj fieldname $value
 	GET $obj fieldname 
	GET $obj expr ...
	EVAL $obj expr ... 
	CALL $obj methodname args

	nb strong use of Xname as token in expr

 Tcl SWIG PLUS

 	tcl_obj 

		NBYTES => [ S T R 0 ... PLUS ... [ ... OTHER ...
		obj_type => at_least ENQ_ACK // BASE_CLASS
		PTR1
			u48_u16 SPEC // OPCODE // via CODE_point
		PTR2 
			u48_u16 DATA // EA includes EA_FRAME ... OFFS_EXPR

		On u32 
			u16_u16 SPEC // u16_payload _hi u16_HL
			u24_u8 DATA

 	tk_client_data - where is it - flattened to bind call // so use EA_EXPR

	 tk_frame_item = ".win1.panel3.item7" // compiler adjusts for predicted
	 Obj * item7_key = lookup( "item7" ) // as str // as OBJ["str"] // " %s "
	 Obj * item7 = lookup( "item7" ) // am near panel3 near win1

	 Obj * item7 = TK_WIDGET_client_data // PTR1 == LABEL PTR2 == DATA
	 // LABEL == "CODE_point" // OPTION gather closure variables
	 // eg win1 = win1 // comment from 
	 // use PSG to recognise // within ARGV
	 // still have to be careful with 'Q1' "$%"

 Bench 
 	VFS Tree Prune
	 copy paste // no_drop == mark for copy-del show faint fade

	Tk provides the canvas

	 standard GDI 2D shapes and shaders
	 standard GDI 3D shapes and shaders
	 // matrix == ((C++ inline libr used by geologists))

	 2D Style Settings
	  FONT [s] POINT=EM_1p0
	  font_1 point_1 = EMP_1p0 * default_TTY_line_height.as__point _per_EM
	  // point_per_EM = 10 // EASY_VIEW_16 // + fade
	  // point_per_EM = 12 // EASY_VIEW_21 // default for TTY
	  // point_per_EM = 14 // EASY_VIEW_21 // emph // POS on CURVE lanes
	  // point_per_EM = 18 // EASY_VIEW_30 // 
	  // point_per_EM = 24 // EASY_VIEW_40

	 DIAG for point_per_EM
	 //
	 	|
		|
		|          24 ///
		|       18 ///
		|    14  ///
		|   12 ///
		|  10 ///
		|
		|
		+-------------------
	
	TABLE for point_per_EM
	  // above MULTI-LINE as TABLE
	  // point_per_EM = 10 // EASY_VIEW_16 // + fade


	TWO_PANEL_FILE_MANAGER
	//
	// ONE_PANEL_OR_TWO 
	// TASK Layout pruning central tree
	// TASK Layout filter pruning tree // categorise patch lines to bug now
	// TASK Layout move branches // 
	// move // different disk
	// move // centralised layout
	// move // pre-de-duplicate

 DRAW-2D in GPU

	SCREEN_PIXMAP // optionally x3 stored or AAx3 // u4 shade of grey
	BLIT 
	DRAW VLINE HLINE DIAG_LINE MULTI_LINE SOME_CURVE_SPLINE
	FONT

	DRAW_BOXES
	// buttons, fields, panels, sliders, 3d_relief // borrow from tcl_80
	// fmt floats as currency
	// MATH frame panel view scrolled XPOS and so on
	// LINE
	//| +-+     +
	//|  /-\---/-\-
	//| /---\-/---\
	//|+--   +     +

	TRUE_TYPE
	// BLIT prepared pixmap
	// probably clicked to pixel edge / core 
	// so semi pixel kerning craft will be lost
	// or ZOOM down an x3 pixmap to AA_1p16 pixmaps CACHED
	//
	QUEUE of ENQ ACK { OPCODE ... }
	// signal POINT change, or let CACHE do that itself
	// send a dozen glyphs at X3
	// read a dozen glyphs in an X3 pixmap | A - B - C | A B C |
	// rescan to MID_POINT or to CLICK_TO_EDGE
	// 3 bits become u4 shade of grey
	// optinal clever aura shade opacity
	// optional click to line_pixel YPOS and half_pixel XPOS
	// CACHE expand to u8 or whatever
	// GPU and CPU run in parrallel
	// pipeline queue of glyphs
	// optionally lots of mem available outside GPU
	// optionally lots of mem available in-side GPU // massive excess
	// optimise load sequence
	// optimise recent ENQ (window depth and sync ripple)

	BOX_not_BOX
	// eg ITEM on canvas has BBOX or MAIN_ZONE on FRAME_BOX
	// eg{             }
	// eg {~~~~~~~~~~~}
	// eg { +-------+ }
	// eg { | CLOUD | }
	// eg { +-------+ }
	// eg {           }
	// eg {           }
	// eg {~~~~~~~~~~~}
	// eg{             }
	//
	// HOTSPOT ( X, Y )

 GROUP PROGRESS

 	---|>-----
 	-----|>---
 	----|>----

 BENCH DIAG ITEM

 	state = ... state
	view = STATE + anim PREV CURR NEXT

	behaviour of a tangible DIAG VIEW (fade)

	(fade) = EMPH_LEVEL of _BELL_CURVE_ _BRIGHTNESS_

