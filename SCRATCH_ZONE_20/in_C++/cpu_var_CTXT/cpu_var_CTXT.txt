cpu_var_CTXT

   the magic to make gcc reserve a register is
	register char * cpu_var_CTXT asm("a15");
   to make GCC include that everywhere, tell CPP
	-include FILENAME # on CPP cmd line
	# search = . then ... or maybe ...
	/tools/CTXT/ccs9/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include
   to make gcc use a SPEC file ...
	place it ...
	/tools/CTXT/ccs9/lib/gcc/x86_64-pc-linux-gnu/9.3.0/specs
	# or invoke with -specs=$SPECS
   to get a spec file
	gcc -dumpspecs

   NOW recompile every libr linked into the binary. dlopen() too
	/tools/CTXT/ with a chroot

   HERE /tools/CTXT/ccs9 is a -prexix (like /usr/local)
   with gcc 9.3.0 built for that, (poss future chroot)
   theres nothing odd about that gcc, until .../specs added
   then EVERYTHING it compiles will reserve cpu_var_CTXT

   In theory you MUST recompile all librs with that line already set
   However, if you look at API, and use something that gcc rarely does
   you might find a register unused ... maybe
   or possibly a CALLER_SAVES - just dont expect still there nested
   only on return

	struct CTXT_t;
	register CTXT_t * cpu_var_CTXT asm("a15");

	later define CTXT_t as whatever has evolved
	you only need to recompile YOUR OWN code that uses CTXT->field

	To move to another compiler or architecture
	Simply create cpu_var_CTXT as a global or thread_var

   another idea might be MMX, not sure what it uses

