diff -u -r SPIN_py-2011-10-30/SPIN_py/app_link/app_link.cxx SPIN_py/SPIN_py/app_link/app_link.cxx
--- SPIN_py-2011-10-30/SPIN_py/app_link/app_link.cxx	2002-08-28 19:26:37.000000000 +0100
+++ SPIN_py/SPIN_py/app_link/app_link.cxx	2023-07-25 03:51:19.644201109 +0100
@@ -238,7 +238,7 @@
 			printf( "\ns16= %s\n", tmp_buff.buff.buff );
 		}
 		printf( "  s8_len = %d\n", s8_len );
-		printf( "  s16.len = %d\n", s16.len );
+		printf( "  s16.len = %d\n", (int) s16.len );
 		return 0;
 	}
 	size_t i;
diff -u -r SPIN_py-2011-10-30/SPIN_py/Docs/INSTALL.txt SPIN_py/SPIN_py/Docs/INSTALL.txt
--- SPIN_py-2011-10-30/SPIN_py/Docs/INSTALL.txt	2005-12-29 16:27:43.000000000 +0000
+++ SPIN_py/SPIN_py/Docs/INSTALL.txt	2023-06-24 03:24:48.697278818 +0100
@@ -207,3 +207,16 @@
 so un-comment it. It takes 6 minutes to compile libsp, 10 seconds to
 compile spin_py and 2 secs to check the other subdirs ( and a lot of
 screen scrolling).
+
+2023
+----
+	hmmm some attempts to restart this from new from old
+
+	opensp is not as supported as jade-1.2.1
+	it might be nice to have jade for those who want it
+	it might be be provided by the OS 
+	you have to find it and apply a patch
+	then you get
+
+		libsp.so.1.0.3
+		probably UTF16 ?
diff -u -r SPIN_py-2011-10-30/SPIN_py/Docs/News SPIN_py/SPIN_py/Docs/News
--- SPIN_py-2011-10-30/SPIN_py/Docs/News	2004-10-03 13:22:06.000000000 +0100
+++ SPIN_py/SPIN_py/Docs/News	2023-03-29 03:33:10.461441621 +0100
@@ -1,3 +1,8 @@
+Mar-23	Build JADE from some distro's diff
+
+	it didnt build, so applied diff, and it built
+	now trying to restart SPIN_py
+
 Aug-04	Rename
 
 	elem_info_pool -> dtd_tables (still cant read the dtd)
diff -u -r SPIN_py-2011-10-30/SPIN_py/elem_info/elem_info.h SPIN_py/SPIN_py/elem_info/elem_info.h
--- SPIN_py-2011-10-30/SPIN_py/elem_info/elem_info.h	2004-10-03 13:13:43.000000000 +0100
+++ SPIN_py/SPIN_py/elem_info/elem_info.h	2023-07-25 03:52:58.487651487 +0100
@@ -38,7 +38,7 @@
 /*
 	
 */
-typedef enum Enum_Element_Type
+/* typedef */  enum Enum_Element_Type
 {
 	EL_empty,	// <BR>
 	EL_pre,		// <PRE>
diff -u -r SPIN_py-2011-10-30/SPIN_py/Py_Wrap/enum_cls.cxx SPIN_py/SPIN_py/Py_Wrap/enum_cls.cxx
--- SPIN_py-2011-10-30/SPIN_py/Py_Wrap/enum_cls.cxx	2004-11-01 18:06:46.000000000 +0000
+++ SPIN_py/SPIN_py/Py_Wrap/enum_cls.cxx	2023-07-25 03:56:37.183269446 +0100
@@ -80,7 +80,7 @@
 			coul;d maybe print a warning
 		*/
 		PY_Static::TypeError( cls1->cls_name.get_str() );
-		return false;
+		return NULL;
 	}
 	// maybe v is "green"
 	if( PY_Static::IS_String( v ) )
diff -u -r SPIN_py-2011-10-30/SPIN_py/Py_Wrap/P_ref_base.h SPIN_py/SPIN_py/Py_Wrap/P_ref_base.h
--- SPIN_py-2011-10-30/SPIN_py/Py_Wrap/P_ref_base.h	2004-11-01 16:34:51.000000000 +0000
+++ SPIN_py/SPIN_py/Py_Wrap/P_ref_base.h	2023-07-25 03:55:15.744434860 +0100
@@ -113,29 +113,29 @@
 
 	bool expect_TYPE_fn(  PyTypeObject * expected ) const;
 
-	bool is_Buffer()	{ is_TYPE( &PyBuffer_Type	); }
-	bool is_CFunction()	{ is_TYPE( &PyCFunction_Type	); }
-	bool is_CObject()	{ is_TYPE( &PyCObject_Type	); }
-	bool is_CallIter()	{ is_TYPE( &PyCallIter_Type	); }
-	bool is_Cell()		{ is_TYPE( &PyCell_Type		); }
-	bool is_Class()		{ is_TYPE( &PyClass_Type	); }
-	bool is_Complex()	{ is_TYPE( &PyComplex_Type	); }
-	bool is_Dict()		{ is_TYPE( &PyDict_Type		); }
-	bool is_File()		{ is_TYPE( &PyFile_Type		); }
-	bool is_Float()		{ is_TYPE( &PyFloat_Type	); }
-	bool is_Function()	{ is_TYPE( &PyFunction_Type	); }
-	bool is_Int()		{ is_TYPE( &PyInt_Type		); }
-	bool is_List()		{ is_TYPE( &PyList_Type		); }
-	bool is_Long()		{ is_TYPE( &PyLong_Type		); }
-	bool is_Module()	{ is_TYPE( &PyModule_Type	); }
-	bool is_Range()		{ is_TYPE( &PyRange_Type	); }
-	bool is_SeqIter()	{ is_TYPE( &PySeqIter_Type	); }
-	bool is_Slice()		{ is_TYPE( &PySlice_Type	); }
-	bool is_String()	{ is_TYPE( &PyString_Type	); }
-	bool is_TraceBack()	{ is_TYPE( &PyTraceBack_Type	); }
-	bool is_Tuple()		{ is_TYPE( &PyTuple_Type	); }
-	bool is_Type()		{ is_TYPE( &PyType_Type		); }
-	bool is_Unicode()	{ is_TYPE( &PyUnicode_Type	); }
+	bool is_Buffer()	{ return is_TYPE( &PyBuffer_Type	); }
+	bool is_CFunction()	{ return is_TYPE( &PyCFunction_Type	); }
+	bool is_CObject()	{ return is_TYPE( &PyCObject_Type	); }
+	bool is_CallIter()	{ return is_TYPE( &PyCallIter_Type	); }
+	bool is_Cell()		{ return is_TYPE( &PyCell_Type		); }
+	bool is_Class()		{ return is_TYPE( &PyClass_Type	); }
+	bool is_Complex()	{ return is_TYPE( &PyComplex_Type	); }
+	bool is_Dict()		{ return is_TYPE( &PyDict_Type		); }
+	bool is_File()		{ return is_TYPE( &PyFile_Type		); }
+	bool is_Float()		{ return is_TYPE( &PyFloat_Type	); }
+	bool is_Function()	{ return is_TYPE( &PyFunction_Type	); }
+	bool is_Int()		{ return is_TYPE( &PyInt_Type		); }
+	bool is_List()		{ return is_TYPE( &PyList_Type		); }
+	bool is_Long()		{ return is_TYPE( &PyLong_Type		); }
+	bool is_Module()	{ return is_TYPE( &PyModule_Type	); }
+	bool is_Range()		{ return is_TYPE( &PyRange_Type	); }
+	bool is_SeqIter()	{ return is_TYPE( &PySeqIter_Type	); }
+	bool is_Slice()		{ return is_TYPE( &PySlice_Type	); }
+	bool is_String()	{ return is_TYPE( &PyString_Type	); }
+	bool is_TraceBack()	{ return is_TYPE( &PyTraceBack_Type	); }
+	bool is_Tuple()		{ return is_TYPE( &PyTuple_Type	); }
+	bool is_Type()		{ return is_TYPE( &PyType_Type		); }
+	bool is_Unicode()	{ return is_TYPE( &PyUnicode_Type	); }
 
 //	bool is_Code()		{ is_TYPE( &PyCode_Type		); }
 //	bool is_CursesWindow()	{ is_TYPE( &PyCursesWindow_Type	); }
diff -u -r SPIN_py-2011-10-30/SPIN_py/SPIN_tree_print/SPIN_tree_print.cxx SPIN_py/SPIN_py/SPIN_tree_print/SPIN_tree_print.cxx
--- SPIN_py-2011-10-30/SPIN_py/SPIN_tree_print/SPIN_tree_print.cxx	2008-11-23 02:51:39.000000000 +0000
+++ SPIN_py/SPIN_py/SPIN_tree_print/SPIN_tree_print.cxx	2023-07-25 03:48:47.778887861 +0100
@@ -540,7 +540,7 @@
 	bool text_utf8( PyObject * py_str )
 	{
 		char * str;
-		int len;
+		Py_ssize_t len;
 		if(!PyString_Check( py_str ))
 		{
 			return fail_reported();
@@ -570,7 +570,7 @@
 	bool text_ML( PyObject * py_str )
 	{
 		char * str;
-		int len;
+		Py_ssize_t len;
 		if(!PyString_Check( py_str ))
 		{
 			return fail_reported();
