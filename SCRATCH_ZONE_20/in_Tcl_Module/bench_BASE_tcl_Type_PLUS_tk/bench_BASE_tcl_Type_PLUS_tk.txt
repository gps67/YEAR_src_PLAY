
	bench_BASE_tcl_Type_PLUS_tk/
	bench_BASE_tcl_Type_PLUS_tk.txt

	bench_tk # PANOPT # GUI_BENCH_WORKSPACE_api

	diag_tcl_Type # RTFM # DOCS_for_CODE # TYPE_SPEC.auto_document incl EG

	 How to create a UDEF Tcl_Object_Type

	 SetFromAny = CTOR( STR_t == bytes + N_bytes )C { SCRIPT }
	 USAGE STR == "identifier"; // PSG OPT "int idx" OPT "anystr"
	 // OPT "'OPT'"// BRIDGE sample_values LEX_varname PSG_usage // VIA //
	 // keyword "VIA"
	 // convert STR0 to STR2_TOKEN = U64
	 // cached lookup('key') 
	 // cached { OBJ_t & obj ) { obj = lookup('key') ; if_CTOR { ... }
	 // parsed // obj = lookup('key')
	 // parsed // if(!obj) call_UDEF_CTOR SPEC KEY
	 // parsed // if(!obj) obj = call_UDEF_CTOR( SPEC, KEY ); // 
	 // as_CTOR( STR0 key ) 
	 // as_CTOR( u64 key_expr ) // see _DECODER_ _u64_
	 // as_CTOR( STR0 key = u64_key_SCRIPT, OBJS_STORE = u64_EA_in_ROM_ONE
	 // as_CTOR { CTOR( SYMBOL_TOKEN, _EXPR ) // PREBUILT OPCODE PAYLOAD 
	 //
	 // ) 

	 PTR1 =
	 PTR2 =

	 u48_u16 LOHI 
	 u24_u8 LOHI // on 32 bit arch // or byte_box u16_u8_u8
	 u24_u8 EXPR // _u32 = _u24 << 8 + _u8; // SET_BYTE_A
	 u24_u8 EXPR // _u32 . SET_BYTE_B( u8 )
	 u24_u8 EXPR // _u24 = EXPR_WORD >> 8
	 u24_u8 EXPR // _u24 = EXPR_WORD >> 8

	 u24_u8 LOHI // on 32 bit arch // or byte_box u16_u8_u8
	 u24_u8 LOHI // NEAR ...
	 // eg 32 bit arch
	 // eg byte_box 
	 // eg u24_u8
	 // eg u16_u8_u8
	 // eg u48_u16
	 // eg u48_u8_u8_ITEM_ATTR_OPCODE // DATA in * u48_PTR
	 // eg u48_u8_u8_ITEM_ATTR_OPCODE // DATA in   u48_DATA

	 // u48_PTR
	 // u24_PTR

	  u32 _u24 = EXPR // if_CTOR_ENSURE_init_zero == 0
	  u32 _u24_u8 = EXPR
	  EXPR = CTOR(_u24,_u8) { ... }
	  EXPR = CTOR(_u48,_u16) { ... }

	 = lookup('key')
	 = lookup('TOKEN')
	 = lookup('EXPR')
	 = lookup('SCRIPT') // auto_import parsed DIALECT reaches for DATA
	 = EVAL("...") // EXPR // SYMBOL _loaded _cached 
	 = lookup("PREBUILT")

