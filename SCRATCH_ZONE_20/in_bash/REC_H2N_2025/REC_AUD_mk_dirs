#/usr/bin/bash
set -e # exit on first error
set +e
#set -x
false # first error

preview=true # inefficent even when builtin # proper place holder #

if $preview
then
	echo YES preview is $preview
else
	echo NO preview is $preview
fi


# date is today or -d yesterday or "$@"

YESTERDAY="-d 2015-09-02"
YESTERDAY="-d 2017-01-18"
YESTERDAY="-d yesterday"
YESTERDAY=""
YESTERDAY="${@:-$YESTERDAY}"

eval `date $YESTERDAY "+
YEAR=%Y
MM=%m
DD=%d
Tue=%a
Jan=%b
"`
YEAR_MM_DD="${YEAR}-${MM}-${DD}"
YEAR_MM_Jan="${YEAR}_${MM}_${Jan}"

cmd_needed()
{
	if str=`type "$1"` 2>&1
	then
		echo "# PASS # $str"
	else
		# fix #
		# PASS # dir_must_exist is a function
		# dir_must_exist() { printed }
		# actual message on stderr
		echo "# FAIL # cmd_needed $1 # time to write it"
		return 6
		exit 6
	fi
}

# the eternal choices include
# no inludes or fragile loads
# ie remote changes, we notice

. fns_DIRS
. fns_EDIT

# TODO LIBR of debugging BASH scripts or zsh or ksh or ash # TODO common subset

dgb_var_dst_src() # lhs=rhs #
{
	eval $1="\$$2" # set LHS_VAR_NAME RHS_VAR_VALUE
	return

	# VAR_NAMES may NOT contain SP
	local DST_NAME="${1:-DST_NAME}"
	local SRC_NAME="${2:-SRC_NAME}"

#	eval $DST_NAME="\$$SRC_NAME" # usually SCOPE GLOBAL VAR_name
	eval $1="\$$2" # 
}
dgb_var()
{
	local VAR_name="UNSET" # LOCAL #
	local VAR_value="UNSET" # LOCAL #

	for VAR_name in "$@"
	do
		dgb_var_dst_src VAR_value "$VAR_name"
		echo "$VAR_name=$VAR_value"
		continue

		eval local VAR_value="\$$VAR_name"
		echo "VAR_name $VAR_name # $VAR_value"
	#	echo "${VAR_name} = $VAR_value"

		local lhs="UNSET"
		dgb_var_dst_src lhs "$VAR_name"
		echo "VAR_value=$lhs"

		echo
		echo "$VAR_name=$VAR_value"
		echo
	done
}



# you need these # tell user if absent , tell if found
# PARALLEL LINES # abbrev is sometimes CPU_WORD_64 or VALUE_true # BOOL # 
# PARALLEL LINES # abbrev is MACRO for _one _two _udef _libr_item_expr _EXPR
#
# these scripts need these commands or script functions or files
#


cmd_needed yes_no
cmd_needed cmd_not_found
cmd_needed ask_do
cmd_needed dir_must_exist


ask_mkdir()
{
	[ -d "$1" ] || ask_do mkdir -p "$1" 
	[ -d "$1" ] && echo "# PASS # exists # $1"
}

run_mkdir()
{
	[ -d "$1" ] || mkdir -p "$1" 
	[ -d "$1" ] && echo "# PASS # exists # $1"
}

Artist=Artist
Sess_List="_1 _2 _3 _4"
Theme=""
case $Tue
in
   XXX) :
;; Mon)
	# Stage=Dance
	# Artist="Sonia"

	Stage=YME
	Artist="Mainwaring"

	Stage=Retreat
	Artist="Ma_Bessie"

	Stage=Pwnica
	Artist="Limpopo_Groove"

	Stage=Table
	Artist="YOKOS"

	T="$Artist" # 
;; Tuex)
	Stage=Global_X
	Artist="Greg Mayston"
;; Tuex)
	Stage=RSAC 
	Artist=NYE
;; Tue)
	Stage=Samba # varname used to be Samba=Samba
	Artist=Beatroots
;; Tuex)
	Stage="Samba_101"
	Artist=Beatroots
;; Wed)
	Stage=AfroDrum
	Artist="Tankata_Steve"
;; Wed_)
	# unmodified first wins so this is old dead code # sample
	Stage=djembe
	Artist="Hands Of Rhythm"
;; Thu)
	Stage=PanYard
	Artist="RASPO"
	#
	Stage=Global_Thu
	Artist="Annie Parker Collective"
	Stage=RG2
	Artist="bodhran_basics"
	#
	Stage=READIPOP_AGM_Hootenannay
	Artist="Readipop AGM Hootenannay"

	Stage=irish_sessions
	Artist="OLOP"

	Stage=salsa_calls
	Artist="rueda"

;; Fri)
	Stage=Velocity
	Artist="EDE TheMay AugList"
	
	# didn't work nice idea # use foreach to iterate over SP list
	# single item works fina as list_of_one

	Stage=Velocity
	Artist="GracePounds JessTuthill WilswoodBuoys"
	
	Stage=Velocity
	Artist="GracePounds_JessTuthill_WilswoodBuoys"

	Stage=DELME
	Artist=TEST_DELOK
	
;; Sat)
	Stage=JP_Workshop
	Artist="JP Percussion"

	Stage=Emma_Rob_Skye
	Artist="Emma Rob Skye"

	Stage=salisbury_djembe
	Artist="Mohamed Gueye"

	Stage=salisbury_djembe
	Artist="Babara Bangura"

	Stage=HCTS
	Artist="RSAC_HCTS"

	Stage=RSAC_HCTS
	Artist="Grace_Pounds"
	Artist="Daughter_of_the_Water"
	Artist="Satin_beige"
	Artist="Grant_Sharkey"
	Artist="Zap_Comedy"
	Artist="Lee_Switzer_Woolf"

	Stage=RSAC_WITS
	Artist="3_clicks_left"
	Artist="Tiger_Mendoza"
	Artist="Missing_The_Scene"

	Stage=Salisbury
	Artist="Babara Bangura"
	T="jagba_H1N" # Theme # name of play #

	Stage=Lyndhurst
	Artist="Heather_Jayne_and_the_Red_Shoes"

	Stage=Retreat
	Artist="Uncertainty_of_Pensions"

	Stage=Lyndhurst
	Artist="The_Cohen_Perry_band"

	Stage=Retreat
	Artist="Rufus_Ruffcut"


	T="$Artist" # 

;; Sun)
	Stage=salisbury_djembe
	Artist="Mohamed Gueye"

	Stage=irish_sessions
	Artist="Fishermans_Cottage"

	Stage=salisbury_H2n
	Artist="Babara Bangura"
	T1="djagba" # 
	T2="kei_key" # 
	T3="dinodon" # Theme # name of play #
	T="$T2"

	Stage=Retreat
	Artist="Mayor_and_James"

	Stage=Retreat
	Artist="David_Gray_n_John_Dusty_Dunsterville"

	Stage=Lyndhurst
	Artist="Funk_Nexus_with_Paul_Glover"

	Stage=Retreat
	Artist="HybridPIG"

	Stage=JollyDarity
	Artist="JollyDarity"

	Stage="Fishermans_Cottage"
	Artist=americana

	Stage="Fishermans_Cottage"
	Artist=irish_sessions
	Artist=americana

	T="$Artist" # 

;; *)
	Stage=XX
	Artist="Artist"

	Stage=WREX
	Artist="Artist"

	Stage=READIPOP_WORKSHOP
	Artist="Marivaldo_Paim"

	Stage=Drum_Cam
	Artist="Jose_Ferrera"
	Artist="Klaudio_Pandeiro"
	Artist="klaudio_Iya_John"
	Artist="SHOW"
	Artist="bodhran"

	Stage=RSAC_HOT_STEP_BOOT_LEG
	Artist="Satin_Beige"

	# Location=Salisbury
	Stage=DrumWhisperer
	Artist="Iya Sako"
	S="_sun_sofa"

;; *)
	Stage=XX
	Artist="Artist"
esac
	Theme="${Theme:-THEME}"

dgb_var \
	Stage	\
	Artist	\
	Sess_List	\
	Theme \
#



G=/home/gps/Gx
G=/home/gps/G
REC_YEAR=${G}/REC_${YEAR}
REC_YEAR_dot_dot=${HOME}/YEAR/REC_YEAR_dot_dot
REC_YEAR=${REC_YEAR_dot_dot}/REC_${YEAR}

# user must choose where to process locally in $HOME/G/REC_YEAR/
# must be local for speed and carry
# G is me, you might want U

dir_must_exist $REC_YEAR_dot_dot  # done # || FAIL # ADMIN MUST SETUP
cd_mkdir_FAIL $REC_YEAR  # done # || FAIL #
# [ -d $REC_YEAR ] || FAIL

# Per Month Layout in REC_YEAR/
#
# ALWAYS  create these to show how the work
# you can override with symb links,

# REC_AUD # is where audacity was

REC_WAV_Jan=${REC_YEAR}/REC_WAV_${YEAR}/REC_WAV_${YEAR_MM_Jan}
REC_AUD_Jan=${REC_YEAR}/REC_AUD_${YEAR}/REC_AUD_${YEAR_MM_Jan}
REC_MP3_Jan=${REC_YEAR}/REC_MP3_${YEAR}/REC_MP3_${YEAR_MM_Jan}
REC_AUD_DONE=${REC_YEAR}/REC_AUD_${YEAR}_DONE
REC_AUD_Jan_DONE_Jan=${REC_AUD_DONE}/REC_AUD_${YEAR_MM_Jan}_
# /home/gps/G/REC_2018/REC_AUD_2018_DONE/

if [ ! -d $REC_AUD_Jan/. ] 
then
 echo "#"
 echo "# creating dirs for this month $YEAR_MM_Jan"
 echo "#"
fi
#
# cd is wrong but tests usable, logs that
# cd then moves away from rel, these are all abs paths
#
cd_mkdir_FAIL $REC_WAV_Jan
cd_mkdir_FAIL $REC_AUD_Jan
cd_mkdir_FAIL $REC_MP3_Jan
cd_mkdir_FAIL $REC_AUD_DONE
cd_mkdir_FAIL $REC_AUD_Jan_DONE_Jan

# build some filenames / strings using artist name # ${Stage}
# will soon check they dont exist

# switched Stage and Artist

YEAR_MM_DD_Tue_Stage=${YEAR_MM_DD}_${Tue}_${Stage}
YEAR_MM_DD_Tue_Stage_SP="${YEAR_MM_DD} ${Tue} ${Stage}"

YEAR_MM_DD_Tue_Artist=${YEAR_MM_DD}_${Tue}_${Artist}
YEAR_MM_DD_Tue_Artist_SP="${YEAR_MM_DD} ${Tue} ${Artist}"

DIR_WAV=${REC_WAV_Jan}/tmp_WAV_${YEAR_MM_DD_Tue_Artist}
DIR_AUD=${REC_AUD_Jan}/$YEAR_MM_DD_Tue_Artist
DIR_MP3=${REC_MP3_Jan}/$YEAR_MM_DD_Tue_Artist
DIR_TXT=${DIR_MP3}/Notes-${YEAR_MM_DD_Tue_Artist}
FILE_TXT=${dir_txt}/${YEAR_MM_DD_Tue_Artist}_NO_Notes.txt

# rm list
#  

if yes_no create session "
 Stage $Stage
 Artist $Artist
 Sess_List $Sess_List
"
then
	:
else
	FAIL 1 not today
fi

# still here answer was Y

# create AUD data and project

V_ALBUM="${YEAR_MM_DD_Tue_Artist_SP}"
V_ARTIST="${Artist}"
V_YEAR="${YEAR}"

# PRJ_AUD has to be edited during first save_as
# because audacity will not overwrite an 0 byte file 
# and thats when to do sess_2

cd_mkdir_FAIL ${DIR_WAV}
cd_mkdir_FAIL ${DIR_AUD}
cd_mkdir_FAIL ${DIR_MP3}
cd_mkdir_FAIL ${DIR_TXT}
cd_mkdir_FAIL ${REC_AUD_Jan_DONE_Jan}

function mk_audacity {
  # local # all these vars
  DIR_aud="${1:-HOME_YEAR_YEAR_MM_DD_Tue_Stage}"
  NAME_PROJECT="${2:-YEAR_MM_DD_Tue_Stage_sess1}" # the name of the project in the dir
  NAME_PROJEXT_DATA="${NAME_PROJECT}_data"
  PRJ_AUD_aup="${DIR_aud}/${NAME_PROJECT}.aup"
  PRJ_AUD_aup3="${DIR_aud}/_${NAME_PROJECT}.aup3"
  PRJ_AUD_sh="${DIR_aud}/${NAME_PROJECT}.sh"
  PRJ_AUD_data="${DIR_aud}/${NAME_PROJEXT_DATA}"
  PRJ_trim_sh="${DIR_aud}/${NAME_PROJECT}_trim.sh"
 
  # BE CAREFUL to not overwrite existing file
  if [ ! -f "${PRJ_AUD_aup}" ]
  then
# OLD AUDACITY DATA DIR
#	run_mkdir "${PRJ_AUD_data}" # used when blank old format loaded
# used to import parameters
	run_mkdir "${PRJ_AUD_data}" # used when blank old format loaded
	# indent by SP SP of .aup caused it to not be recognised
	  cat << !EOT | tee "${PRJ_AUD_aup}"
<?xml version="1.0" standalone="no" ?>
<!DOCTYPE project PUBLIC "-//audacityproject-1.3.0//DTD//EN" "http://audacity.sourceforge.net/xml/audacityproject-1.3.0.dtd" >
<project xmlns="http://audacity.sourceforge.net/xml/" projname="$NAME_PROJEXT_DATA" version="1.3.0" audacityversion="2.0.6" sel0="0.0000000000" sel1="0.0000000000" vpos="0" h="0.0000000000" zoom="86.1328125000" rate="44100.0" snapto="off" selectionformat="hh:mm:ss">
	  <tags>
		  <tag name="ALBUM"  value="$V_ALBUM"/>
		  <tag name="ARTIST" value="$V_ARTIST"/>
		  <tag name="YEAR"   value="$V_YEAR"/>
	  </tags>
</project>
!EOT
	touch ${PRJ_AUD_aup3}
  fi # 

  if [ ! -f "$FILE_TXT" ]
  then
	# echo -e # expand \r to 0x0D
	echo -e "# ${YEAR_MM_DD_Tue_Artist} \r" >> "$FILE_TXT"
  fi
  
  if [ ! -f "${PRJ_AUD_sh}" ]
  then
  	echo "ask_do audacity '${NAME_PROJECT}.aup3'" > "${PRJ_AUD_sh}"
  	chmod 755 "${PRJ_AUD_sh}"
  fi
  
  if [ ! -f "${PRJ_trim_sh}" ]
  then
	run_mkdir "${PRJ_AUD_data}" # used when blank old format loaded

	cat - >>  "${PRJ_trim_sh}" <<!EOT
  ls -l 
  ask_do rm    "${PRJ_AUD_aup}" # {DIR_aud}/{NAME_PROJECT}.aup"
  ask_do rm    "${PRJ_AUD_aup3}" # "{DIR_aud}/_{NAME_PROJECT}.aup3" # _ TEMP
# ask_do rm    "${PRJ_AUD_sh}"   # "{DIR_aud}/{NAME_PROJECT}.sh" # run audacity FILE
  ask_do rmdir "${PRJ_AUD_data}" # "{DIR_aud}/{NAME_PROJEXT_DATA}" # rmdir
  ask_do rm    "${PRJ_trim_sh}"  # "{DIR_aud}/{NAME_PROJECT}_trim.sh"
!EOT

  	chmod 755 "${PRJ_trim_sh}"
  fi
 
  # BE CAREFUL to not overwrite existing file
  if [ ! -f "${PRJ_AUD_aup}" ]
  then
# OLD AUDACITY DATA DIR
#	run_mkdir "${PRJ_AUD_data}" # used when blank old format loaded
# used to import parameters
	run_mkdir "${PRJ_AUD_data}" # used when blank old format loaded
	# indent by SP SP of .aup caused it to not be recognised
	  cat << !EOT | tee "${PRJ_AUD_aup}"
<?xml version="1.0" standalone="no" ?>
<!DOCTYPE project PUBLIC "-//audacityproject-1.3.0//DTD//EN" "http://audacity.sourceforge.net/xml/audacityproject-1.3.0.dtd" >
<project xmlns="http://audacity.sourceforge.net/xml/" projname="$NAME_PROJEXT_DATA" version="1.3.0" audacityversion="2.0.6" sel0="0.0000000000" sel1="0.0000000000" vpos="0" h="0.0000000000" zoom="86.1328125000" rate="44100.0" snapto="off" selectionformat="hh:mm:ss">
	  <tags>
		  <tag name="ALBUM"  value="$V_ALBUM"/>
		  <tag name="ARTIST" value="$V_ARTIST"/>
		  <tag name="YEAR"   value="$V_YEAR"/>
	  </tags>
</project>
!EOT
	touch ${PRJ_AUD_aup3}
  fi # 


  sync
  cd "${DIR_aud}"
  pwd
  audacity "${PRJ_AUD_aup}"
}

for sess in ${Sess_List:-""}
do
	export \
	SESS_name="${YEAR_MM_DD_Tue_Artist}${sess}"
	# fn_EDIT_var_prompt EDIT SESS_name "EDIT SESS_name"
	# fn_EDIT_var        EDIT SESS_name
	echo "SESS_name == '$SESS_name'"
	fn_EDIT_var SESS_name 
	# ask_do is not a fn and cant run local functions
	if yes_no mk_audacity "${DIR_AUD}" "${SESS_name}"
	then
		mk_audacity "${DIR_AUD}" "${SESS_name}"
	fi
done

set -x
df -h .
sync
df -h

# /media/H2N_SD/4CH/FOLDER01/
# /home/gps/G/REC_2018/REC_AUD_2018_DONE/
