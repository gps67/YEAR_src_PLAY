01_Intro.txt

	pesky MC viewer is detecting dot something

.S2 {
 .HDR {Intro}
 .P {
 	Tcl is a scripted language, with a clean but confused syntax.

	Like bash it looks like lines of words

		.CODE cmd arg1 arg2 
	
	Like bash and BASIC, variables use $var

		.CODE $b

	Unlike bash and C, you cant use {a=$b} you must use {set a $b}.
	That is interpretad as a command {set} with 2 arguments {a} and {$b}

		.CODE set a $b

	Each word does NOT need "quotes", so "tmp" can be written as tmp
	Sometimes this can make it quite clean, but dont worry, there is
	still proper punctuation to worry about

		.code set dirname tmp

	Unlike bash, it is quite easy to work with spaces within filenames.
	They do need "quotes" on the way in, but after that $filename
	and "$filename" are almost identical

		.CODE {
			set progname prog.exe
			set dirname "program files"
			set pathname /$dirname/$progname
			# nb TCL provides platform independent funcs for /
		}
	
	Like bash, comments are lines that start with #

	Unlike bash, any statement on the left must be closed with ;#
	This is mildly annoying, but you will get used to it

	One Tcl magic ingredient, is how it uses {braces}. They are a bit like
	bashs 'single quotes', in that what is inside has the minimum of
	processing (yet), but they quickly look like C-block-braces.

		Basically a single {word} can actually be {multi-line-block}
		held as a single word. This allows blocks of code, to be there
		as a single word item, all on the 1 line.

	.code {
		if { $a < $b } {
			# lines
			# of
			# code 
			# here
		} else {
			# lines
			# of
			# code 
			# here
		}
	}

	One strange-ness is how it uses [code] where bash uses `code`

		On the one hand this is like {code in braces} 

		but on the other hand it is NOT like C array[idx]

		Like `bash backquotes` or $((bash eval))
		you have to use it a lot

		.code {
			set width 10
			set height 20
			set area [expr $width * $height]
		}
	
	A VERY STRANGE thing is that there are more than one parse styles.
	Different zones, use different parsers.
	It is very confusing until you realise it, but {LINES_OF_CODE}
	use one parser and if {CONDITION} uses a different parser.
	{ QUOTED LIST DATA } uses yet another parser (you lose newlines)

	When you use {quoting braces} the text gets parsed twice.
	The first parse does almost nothing, it picks up the text within the
	braces, following only the minimalistic rules (backslash rules).

	You can have { outer { nested braces } ... }
	The first parse, removes the outer braces, and treats all the text
	like bash uses 'single quotes'

	The inner text is carried though the parser ASIS (almost ASIS),
	including the { nested braces }. For an easy life, simply require all
	pairs to be equally matched, and it will work ASIS. If not equally
	balanced, the matching close brace will close the matching open brace.

		.code {
			if { CONDITION } {
				block of code
			} else {
				multiline
				block of code
				multiline
			}
		}

	This is how Tcl passes { blocks of code } to if, while and others.

	The first parser, is to find the if statement and its args.
	Each arg is parsed, and the { block } is parsed as a blob of
	quoted text. The outer {braces} are removed, just like "TEXT"
	or 'TEXT' but {TEXT}, and TEXT is passes as the parameter,
	when "if" is invoked.

	The if command receives its parameters, as you the programmer
	provided them. You could even make a code block a variable.
	As the if is invoked, all it's parameters are provided,
	and the $block_of_code is expanded, passing the value.

		.code {

			set condition {
				CONDITION
			}

			set block_of_code_one {
				block of code
			}

			set block_of_code_two {
				multiline
				block of code
				multiline
			}

			if $CONDITION $block_of_code_one else $block_of_code_two
		}

	For thosse worrying about this arrangement of PARSER and ARGS,
	being very inefficient, that is how it used to be, back in the
	day, before they developed optimisers. 

	Those optimisers are supposed to be completely transparent,
	and do handle a wide range of use cases, particularly
	repeated use, or repeat calls of the same code text.

	Everything in Tcl, is a string, but CODE_TEXT is _also_
	code, seen for the second time, upgraded the first time it was 
	run. Trust the optimiser, and report any bugs. You wont find
	many.

	The if command only runs block_two is the else case wins,
	and then that TEXT is PARSED into a CODE_BLOCK_in_a_WORD.

	It is parsed, as a list of lines, each a list of words,
	each word can be a simple word, or a { nested braced text }.

	Often DATA is provided using similar braced { TEXT },
	the opening and closing added gaps are passed through,
	and you may want to trim them.

	Often LISTS are provided as { LIST_OF_WORDS in braces }.
	These are usually normalised by a list handling function,
	that invokes the LIST_from_TEXT parser, which has rules
	that are slightly different to the LINES_of_CODE parser.

	It is so natural, you will only be confused, if you never
	noticed. Now that you ave been told, you will see when
	to RTFM, and when to be happy.

	if { CONDITION } ... uses a different PARSER. The
	if command is invoked with some text ' CONDITION '
	that has had the minimum of PARSE processing.

	$var is still the text "$var" and [backquoted call argv]
	also gets the square brackets passed through as plain text.

	The if command, receives' CONDITION ' which it evaluates using
	the expression evaluator, which parses using the expr PARSER,
	then evaluates, to something that is supposed to be a bool



	.code if {condition} {code_one} else {code_two}

	If you forget to quote the {condition} or {code}, that is expanded
	before the "if" command is called, and passed as parameter text.

	All the standard if while foreach ... functions can be replaced by
	your own user defined ones (this can confuse security), and then your
	code, like the original, would need to expand $VAR in the callers
	context. For an easy life, always use {brace_quoting} and the result 
	is what you expect, but you can choose not to, and the text will be
	expanded twice. 

	There is a builtin compiler (to tcl byte code) which does that
	analysis, and retains the logic of what it found, for the next call.
	It "upgrades" the text values in-situ, which it can do, if {quoted},
	but might not be able to, is not the same quoted {program text}
	every time.

	.code while $still_looking { ... ; set still_looking 0; ... }

		This will expand $still_looking once.
		If it is true, it will loop forever.

	.code while {$still_looking} { ... ; set still_looking 0; ... }

		This is what you want.
		It expands $still_looking every loop
	
	The mechanisms for evaluating variables and code, in the parent
	callers context, is very useful. see upvar 

	There is a third evaluation style, EXPR CODE and now DATA
	It is very similar, and again it is the called function that
	does NOT do an extra eval on the DATA, but chooses to see EOLN
	as just another GAP between WORDS. CODE sees LINES_of_WORDS

	CODE uses LINES of WORDS

		where LINE of WORDS is COMMAND ARG ARG ARG
	
	EXPR uses tightly parsed words

	.code	if { $a < $b } {then_code} {else_code}

	DATA list uses WORDS 

	.code {
		set mylist {
			your
			word list
			here
		}
	}

	That produces 1 list of 4 words, this produces 3 words,
	where the middle word, is itself {TEXT} that will prod

	.code {
		set mylist {
			your
			{ word list }
			here
		}
	}

		actually that sets mylist to the text {...},
		but as soon as you lappend it is interpreted as WORDS.
	
	The outer {braces} are always processed by the callers parser

 }



}
