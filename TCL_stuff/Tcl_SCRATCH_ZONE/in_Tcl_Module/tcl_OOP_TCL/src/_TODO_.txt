
REDO

	bool set_PTR2_from_CPU_WORD( // caller clears previous value ? set_NULL
		Tcl_Obj * Tcl_Obj_SELF,	//
		CPU_WORD_int_t CPU_WORD_int_VALUE
	);

	bool set_PTR2_from_PTR_VOID( 
		Tcl_Obj * Tcl_Obj_SELF,	//
		caddr_t PTR_VALUE
	);

	bool set_PTR2_from_Tcl_OBJ( 
		Tcl_Obj * Tcl_Obj_SELF,	//
		Tcl_Obj * TCL_VALUE	// does ref_incr // asif_SMART_PTR
	);

	... etc all of them

	RETURN PASS()
	RETURN PASS_PASSED() // ie the minimu, return true;
	RETURN FAIL_FAILED() // ie the minimu, return false; // ASIF reported

	// ASIF %s // ASIF_KNOW %s // ASIF_DONE %s // ASIF_TODO %s QUEUED


	// cant think how I left it mid edit
	// cant think now what it was - maybe the ABOVE will be scope API

REDO
	TCL::TCL_OBJ // ie derived from caddr_t but as single field struct
	TCL::TCL_PTR // ie derived from caddr_t

	PY::PY_OBJ
	PY::PY_PTR

	CSS::CSS_OBJ // ie derived from caddr_t but as single field struct
	CSS::CSS_PTR // ie derived from caddr_t

	API of all 3 match a TEMPLATE
	Switch between the three, for how the API was DECL invoked

	CXX as a BASE_CLASS can do that (somehow) it gets GEN to write it

		ref_incr()
		ref_decr()
		ref_incr_then_decr()
	
	Calling scripts can use "OBJ_PTR.ref_incr()"

		GEN MACRO -> TEXT
		GEN CODE { TEXT }
	
	WORST_CASE_SCENARIO

		OBJ is WRAP provided by CT_RT, a SHOE

		SHOEBOX_OBJ is actually a VTBL sturct and a PTR

		 TCL.STR0 == "_FFFF"
		 TCL_PTR1 == SPEC_USED_PAIR // ie SPEC and DECL CODE_POINT

		 	this is not efficient
			but there are so few (one per class)
			it does not matter
			and only one PTR is needed
			and it obeys SAFE_CODE_USED for HOLDER_of_PTR

			but when not worst case scenario, C++ flies
			GEN C flies
	
		WORST CASE
		FIRST CASE

			The CT_RT runs an interpreter
			Each class gets a SHOE
			Each class.SPEC_ALIAS gets a SHOE
			A_SHOE can add dgb_ALIAS_one()
			A_SHOE can add dgb_ALIAS_two()

			This does SSA, 
			TRACK_and_TRACE
			CODE_USED - ASIF_EVAL is EVAL knowing ARGS will change

			The result of EVAL SCRIPT using A_SHOE VALUES

				GEN can actually do:
				RERUN EVAL under GEN_C for ARG2_is_STR0
				RERUN EVAL under GEN_C for ARG2_is_MATCH
				RERUN EVAL under GEN_C for ARG2_is_NULL

			CT_RT can INTERP as part of the COMPILATION process

				COMPILE AS_IF EVAL - but in CT_RT MODE_GEN_C

					GEN_C 
					GEN_CXX 
					GEN_ES6
					GEN_ARGV_SCRIPT
					GEN_DIAG

				COMPILE now for later

					NOW knows SPEC OPTIONS 
					LATER uses code that GEN provided
					LATER might use get_from_interp

		SECOND CASE

			manage CODE_GROW for range of TEST_DATA

				single pathway becomes SWITCH_CASE_S

				nfs_mount_ROOT breaks pattern of FS_layout

				VFS_GEN is mostly on_demand
				VFS_EXPLORE done by CT_RT
				VFS_EXPLORE_STEP_OPTS done by CT_RT
############
	
	trace_var
	bind_C_var	u32 i32 u64 i64 f32 f64 WORD_u64_WORD
	script_invoke

		funcname A R G S ;# funcname == func_name_of_ARGV_0 ARGV[0]
	
	MATCH script fragment ;# within COMMENT ;# witin SCRIPT

		MULTI VIEW
	
	lookup {

		func_link == "[ func_name_of_ARGV_0 ARGV[0] ]"

	 CODE_LABEL:

		table = link to $table // compiled CT AUTO_EXPORT_TABLE
		func_name_of_ARGV_0 // ==  SELF // == lookup $0 table
		ARGV == $ARGV // dialect $var as VARNAME // IS_ARGV_VECTOR
	 	ARGV_0 = ARGV[ 0 ]

	
	}

#################

	mki.tcl	
	OBJ_ARGV.txt		scribbles
	OBJ_tokeniser.txt
	_TODO_.txt
	tcl_Optical.txt

	TCL.h		#include <tcl.h> // within IFNDEF

	TCL_STUBS.h	namespace and types

	tcl_oop_tcl.cxx
	tcl_oop_tcl.h
			DECL LIBR for load library
			initialises module
			DECL API OBJ_OBJ

	OBJ_module.cxx
	OBJ_module.h
			Module * clientData 
			 static LITERAL_MATCHER match_%s( interp, "%s" )

				 match_NAME( interp, "NAME" )
	TCL_HELP.cxx
	TCL_HELP.h
			these to be moved to _LIST _DICT _PLUS _PTR

	TCL_PTR.cxx
	TCL_PTR.h	Tcl_Obj * PTR;

			ref_incr 
			get_str
			get_PTR2
			set_PTR2
			get_type_name

	TCL_REF.cxx
	TCL_REF.h
			REF = PTR += ref_count

	TCL_DICT.cxx
	TCL_DICT.h
			TCL_DICT DICT
			.dict 
			.GET( interp, key, RET_VAR )
			.SET( interp, key, VAL )
			.DEL( interp, key )
			.NN( interp, N_var )
			.array_get( interp, RET_VAR_LIST )
			.array_set( interp, VAL_LIST )

	TCL_HASH.cxx
	TCL_HASH.h
			// NO // using DICT instead
			// REVIEW // LATER

	TCL_LIST.cxx
	TCL_LIST.h
			NN
			GET array_get 
			SET array_set
			ADD( interp, &ret_pos, ITEM )
			GET_LIST_COPY

	TCL_MATCHER.cxx
	TCL_MATCHER.h
			LITERAL_MATCHER match_NAME( interp, NAME )

	TCL_TYPE.cxx
	TCL_TYPE.h
	TCL_TYPE.txt
			OLD attempt - used STR0 type_name is_own_type

	TCL_ObjType_PLUS.cxx
	TCL_ObjType_PLUS.h

			BASE class of our various _PLUS types
			VTBL means a trick is needed to convery
			obj => PLUS_TYPE

	TCL_ObjType_PLUS & PLUS

		PLUS = get_PLUS_from_obj( obj ) || NULL

		PLUS.TCL_set_PTR2_incr( obj, P2 )
		PLUS.TCL_set_PTR2_no_incr( obj, P2 )
	 -SETUP-
	 	Register_ObjType()
		set_funcs_NULL() // standard Tcl_ObjType_stuff
		set_funcs_BASE() // standard Tcl_ObjType_stuff





#########################


	TODO	NO_VAL

		SCRIPT moves all CT ppoints to NO_VALS
		ID's of VARS holding VAL
		ID's of VALS in STATE -mid-expr-

		When VAL is actually required,
		GET and CACHE
		when not, leave EXPR as PXPR
		when if(val=="val") leave as expr for RT ## AND_OR compile
	


