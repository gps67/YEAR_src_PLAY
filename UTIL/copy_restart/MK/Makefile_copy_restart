#!/usr/bin/make -f

# where is tclsh rooted and where are its include files


	CXX = g++
	OPTIM += -g
#	OPTIM += -O2
	fPIC = -fPIC
#	OPTIM += $(fPIC)
	INCLS += -I./
	INCLS += -I../
	INCLS += -I../src/

	PKGS += libs_apps_base1
#	PKGS += libs_apps_base2

	DEFS = 

	# we are in $(S)/obj/
	S=..

	# MK_ file include MK_LISTS_ which uses LIST_

	LIST_VPATH += $S/src
	LIST_VPATH += $S/src_PLUS

#	VPATH+=$S$(foreach sub,$(LIST_VPATH),!:$(sub))
#	VPATH+=$S$(foreach sub,$(LIST_VPATH),:$S/$(sub))
#	VPATH +=$S
#	VPATH +=$S/src
#	VPATH +=$S/src/src_PLUS

	# to build with libs_apps -lbase1
	include ../MK/MK_with_libs_apps

	# PROG1.elf is being built
	PROG1=copy_restart

	# CURRENTLY NOT BUILDING A MODULE.so
	Module=libr_unused

	# should NOT have the MAIN in the list - for use as Module.so ?
#	PROG_OBJS += $(PROG1).o 

	# the list of .o files in the project
	PROG_OBJS += copy_file_dir.o
	PROG_OBJS += copy_tree.o
	PROG_OBJS += dir_reader_sorted.o
	# move to libs_apps base2 ssl1
	PROG_OBJS += sha_md.o

	# OK # OBJS # used by MK_SUFFIXES # to build .exec or .elf
	# OBJS must not contain PROG.o
	# OBJS is used for ALL PROGS which is troublesome
	OBJS = $(PROG_OBJS)

	PROG_EXE=$(PROG1).exec

	ARG_FILE=/home/gps/G/RIPS/eg_rip_DVD_here/iso/THE_DVD_DISC_1.iso
	ARG_DIR=/nfs/NAS_ln_s/NAS3_a2_DVDS/iso
	ARG_SRC_DIR=/home/gps/YEAR/RIPS/eg_rip_CD_here/audio/mp3_V4/angelique_kidjo
	ARG_DST_DIR=/tmp

	ARGS=$(ARG_SRC_DIR) $(ARG_DST_DIR)
#	ARGS=$(ARG_FILE) $(ARG_DIR)

# // edit any .h // recompile everything

	PROG_HDRS += $(PROG1).h

dgb: $(PROG_EXE)
	# VPATH $(VPATH)
	INGDB=1 T gdb -tui --cd $(PWD) --command ../.gdbinit_$(PROG1) --args $(PROG_EXE) $(ARGS)

#
#
#	./$(PROG_EXE) $(ARGS) 2>&1 

# each of the .o depend on all of the .h
$(PROG_OBJS): $(PROG_HDRS)

exe: $(PROG_EXE)
$(PROG_EXE):  $(PROG_OBJS)

XXXX$(PROG_EXE):  $(PROG_OBJS)
	# LIBS $(LIBS)
	# LINKS $(LINKS)
	# PKGS $(PKGS)
	g++ -g -o $@ $(PROG_OBJS) $(LINKS)

$(Module).so:  $(PROG_OBJS)
	# LINKS adds the libs_apps .so 
	# LINKS adds the E6320 .so // {`uname -n`} // MATCH is regexp_exact
	# LINKS adds the FEATURE .so // {ANYSTR} // MATCH is regexp_exact // SP
	# no SP ADDED to { ANYSTR } ie {ANYSTR} not ...others...
	# currently there is no lib_FEATURE.so # TRY LIBR AUTO_LOAD // .elf
	# somewhere is CXX feature to direct LD_LOADER SEARCH_PATH
	# add useful DIR to LIST # DIALECT += LOCAL // AUTO_LOAD
	# SESSION registers LOAD_MODULE into this SANDPIT == "{ pid %d }"
	# NEED METHOD CODE = LOOKUP MATCH // RUN CODE ARGS // CODE == { SCRIPT }
	# SCRIPT DATA comes into being as PARAMETER of " // CODE == { SCRIP }"
	# SCRIPT += COMPILED_CXX // using "safe_C_CODE" // not safe
	# ARGS += { argc argv } # but now { OBJ_t * obj } not { char * expr }
	# VIEW add SEMI_COLON or SIMPLIFY # FILTER OMIT_or_EMIT #
	# LOAD CODE += COMPILED_SCRIPT # CXX += { Item_t item CMNT CODE_POINT }
	# FAST FILTER FLEXIBLE SCRIPTABLE SCRIPT # CODE_POINT HERE #
	# copy_restart #
	# move_tree #
	# libs_apps_extension # ARGV_DECODER # ZZ
	# // not safe but is in sandpit
	# LINKS -Wl,--rpath=/home/gps/YEAR/src/PLAY/libs_apps/build_LGX_E6320
	# libs_apps/build_LGX_E6320 # E6320 == "hostname" // GROUP == "WLAN"
	##
	# LINKS does not refer to libtcl.so that comes from loading EXE
	g++ -g -shared -o $@ $(PROG_OBJS) $(LINKS)

clean:
	rm -f $(PROG_EXE) $(PROG_OBJS) fa fb
