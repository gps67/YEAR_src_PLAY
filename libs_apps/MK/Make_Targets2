# Make_Targets2

##	PROG1=accts
##	PROG1b=accts_nwa
##	PROG2=sar_plot
##	PROG3=gtk_text
##	PROG4=sar_parse
##	PROG5=tv_rem
##	PROG6=accts_js
##	PROG7=wclient
##	PROG8=tv_vol_80

##	LIB11=base
##	LIB21=base2
##	LIB33=gtk_text
##	LIB34=media
##	LIB35=accts_gtk
##	LIB36=sar_plot_post

#	The first target in the first included makefile is the default

# info make # Automatic Variables
# $? all the prerequisites that are newer than the target
# $^ all the prerequisites

# default: test1
# default: test2
default: test3
RUN_INCL_PATH=$(TOP)/_run_dox/_incl_path

# The DEPS file tells make which changed header effects which object
# The first time, it will make everything anyway, and make DEPS for you

# LINK_SO_FROM=g++ -shared $(LD_RPATHS) 
#
# HOWTO REPLACE % IN THESE INVOCATIONS ?
# 

# link _INTO_ lib_x cant refer to X itself
# link _WITH_ lib_x does refer to X itself

LINKLIB11=`$(PKG_CONFIG) _into_base1 $(PKGS) --libs`
LINKLIB21=`$(PKG_CONFIG) _into_base2 libs_apps_base1 --libs`
LINKLIB23=`$(PKG_CONFIG) _into_base2_gtk libs_apps_base1 --libs`
LINKLIB33=`$(PKG_CONFIG) libs_apps_base2 --libs`
LINKLIB34=`$(PKG_CONFIG) libs_apps_base2 --libs`
LINKLIB35=`$(PKG_CONFIG) libs_apps_base2 --libs`
LINKLIB36=`$(PKG_CONFIG) libs_apps_base2 --libs`

WITHLIB11=`$(PKG_CONFIG) libs_apps_base1 --libs`
WITHLIB21=`$(PKG_CONFIG) libs_apps_base2 --libs`
WITHLIB23=`$(PKG_CONFIG) libs_apps_base2_gtk --libs`
WITHLIB33=`$(PKG_CONFIG) libs_apps_gtk_text --libs`
WITHLIB34=`$(PKG_CONFIG) libs_apps_media --libs`
WITHLIB35=`$(PKG_CONFIG) libs_apps_accts_gtk --libs`
WITHLIB36=`$(PKG_CONFIG) libs_apps_sar_plot_post --libs`
WITHLIB3635=`$(PKG_CONFIG) libs_apps_accts_gtk libs_apps_sar_plot_post --libs`

# INCLS += `$(PKG_CONFIG) _into_base2 --cflags`
INCLS += `$(PKG_CONFIG) _into_base2_gtk $(PKGS) --cflags`
LINKS += `$(PKG_CONFIG) _into_base2_gtk $(PKGS) --libs`

# FIRST LINE CLEARS IT, sets it to the C++ compiler/linker
LINK_SO_FROM  = $(CXX)
LINK_SO_FROM += -o $*.$(DLL)
LINK_SO_FROM += -shared
LINK_SO_FROM += $(RPATHS) 

# names of vars

	# I think _implib.a is an older way of doing DLL's revisit?

	IMP11 = lib$(LIB11)_implib.a 
	IMP21 = lib$(LIB21)_implib.a 
	IMP23 = lib$(LIB23)_implib.a 
	IMP33 = lib$(LIB33)_implib.a 
	IMP34 = lib$(LIB34)_implib.a 
	IMP35 = lib$(LIB35)_implib.a 
	IMP36 = lib$(LIB36)_implib.a 

	DLL11 = lib$(LIB11).$(DLL)
	DLL21 = lib$(LIB21).$(DLL)
	DLL23 = lib$(LIB23).$(DLL)
	DLL33 = lib$(LIB33).$(DLL)
	DLL34 = lib$(LIB34).$(DLL)
	DLL35 = lib$(LIB35).$(DLL)
	DLL36 = lib$(LIB36).$(DLL)

	# lib archive libNAME.a
	LAR11 = lib$(LIB11).a
	LAR21 = lib$(LIB21).a
	LAR23 = lib$(LIB23).a
	LAR33 = lib$(LIB33).a
	LAR34 = lib$(LIB34).a
	LAR35 = lib$(LIB35).a
	LAR36 = lib$(LIB36).a


# link one DLL against another:

$(IMP11) : $(DLL11)
	#

$(IMP21) : $(DLL21)
	#

$(IMP23) : $(DLL23)
	#

$(IMP33) : $(DLL33)
	#

$(IMP34) : $(DLL34)
	#

$(IMP35) : $(DLL35)
	#

$(IMP36) : $(DLL36)
	#

ifdef WIN32
#
# LINK_SO_FROM
#
	# link *.o into libname.dll
# with 
# ALSO #
# http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/gnu-linker/win32.html
# http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/gnu-linker/invocation.html#OPTIONS
#
#

#
# $(LHS_TARGET):
#
#	$* is expanded as stem%
#	where stem% is resolved filename, value of $(LHS_TARGET)
#	# { _elf_object, _token_target }
#
#	aka $(DLL11): but getting that isnt obvious
#

#
# output file 
#
	LINK_SO_FROM += -o $*.$(DLL)
#
# WIN32 DLL build outputs .def .lib
#
	LINK_SO_FROM += -shared -Wl,--output-def=$*.def
	LINK_SO_FROM += -Wl,--out-implib=$*_implib.a
	#
#
# WIN32 DLL build options
#
	# when not bothing with __declspec(dll??port)
	# simply export everything
	# http://oldwiki.mingw.org/index.php/sample DLL
	# SYNTAX ERROR # LINK_SO_FROM += -no-undefined
	LINK_SO_FROM += -export-all-symbols
# OFF #	LINK_SO_FROM += -enable-auto-import # DEFAULT ON
	LINK_SO_FROM += --enable-runtime-pseudo-reloc
	LINK_SO_FROM += -allow-shlib-undefined
	LINK_SO_FROM += -L.
	#
	# The DLL's need to see other DLL symbol lists
	# that means adding -lz to the DLL like an EXE
	#
#	LINK_SO_TAIL += `$(PKG_CONFIG) --libs gtk+-2.0`
	LINK_SO_TAIL += -lz
	LINK_SO_TAIL += -lgdi32
	LINK_SO_TAIL += -lws2_32
	#

else
	LINK_SO_FROM += -L.
#	LINK_SO_TAIL += `$(PKG_CONFIG) --libs gtk+-2.0`
endif


$(DEPS) deps: 
	@make $(RUN_INCL_PATH)
	$(CXX) -MM $(INCLS) $(OPTIM) $(DEFS) $S/*/*/*xx  > $(DEPS)
	

$(PROG1_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG2_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG3_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG4_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG5_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG6_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG7_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG8_EXE): $(DEPS) $(makes) $M/Makefile
$(PROG9_EXE): $(DEPS) $(makes) $M/Makefile

program1: $(PROG1_EXE)
program2: $(PROG2_EXE)
program3: $(PROG3_EXE)
program4: $(PROG4_EXE)
program5: $(PROG5_EXE) 
program6: $(PROG6_EXE)
program7: $(PROG7_EXE)
program8: $(PROG8_EXE)
program9: $(PROG9_EXE)

$(LAR11): $(OBJS_lib11)
$(LAR21): $(OBJS_lib21)
$(LAR23): $(OBJS_lib23)
$(LAR33): $(OBJS_lib33)
$(LAR34): $(OBJS_lib34)
$(LAR35): $(OBJS_lib35)
$(LAR36): $(OBJS_lib36)

$(DLL11): $(OBJS_lib11)
$(DLL21): $(OBJS_lib21)
$(DLL23): $(OBJS_lib23)
$(DLL33): $(OBJS_lib33)
$(DLL34): $(OBJS_lib34)
$(DLL35): $(OBJS_lib35)
$(DLL36): $(OBJS_lib36)

# tried trick with -whole archive
# but maybe produce static .os for static linking ?
#
# $(DLL11): $(LAR11)
# $(DLL21): $(LAR21)
# $(DLL33): $(LAR33)
# $(DLL34): $(LAR34)
# $(DLL35): $(LAR35)
# $(DLL36): $(LAR36)

ifeq (1,1)
# This is good for normal use
# but interdependece between DLLS means relinking all
# which is slow 
# Ditto for relinking all exe's after a DLL has changed ....
# or at least dont install EXE's! 
#
$(DLL21): $(DLL11) 
$(DLL23): $(DLL11) 
$(DLL33): $(DLL11)
$(DLL34): $(DLL11)
$(DLL35): $(DLL11)
$(DLL36): $(DLL11)

$(DLL23): $(DLL21) 
$(DLL33): $(DLL23)
$(DLL34): $(DLL23)
$(DLL35): $(DLL23)
$(DLL36): $(DLL23)

$(DLL21): $(IMP_js)
$(DLL35): $(IMP_js)
endif

# ditto # no need to relink EXE because DLL changed
# however do need to rebuild DLL that EXE uses
# WANT syntax to make $(DLL21) unconditionally
# WANT make to be quick
#
# NB if the above is switched ON the following is already covered
# by DLL35 depends on DLL21 depends on DLL11
#
ifeq (1,0)
$(PROG1_EXE): $(DLL21)
$(PROG1_EXE): $(PROG1).o $(DLL35) $(DLL11) $(DLL21)
$(PROG2_EXE): $(PROG2).o $(DLL36) $(DLL21) 
$(PROG3_EXE): $(PROG3).o $(DLL33) $(DLL11) $(DLL21)
$(PROG4_EXE): $(PROG4).o $(DLL36) $(DLL11) $(DLL21)
endif

shared: $(LIST_LIB_SO)

# LIB36 must appear before lib1, before LIBS, 
# but LIB36 can include OWN ref to lib1 - auto load l1?

# man gcc says :
# gcc -nostdlib <files>... ‘gcc -print-libgcc-file-name‘
#


$(PROG1_EXE): $(PROG1).o $(DLL35)
	#
	# PROG1 ACCTS
	# linking $@
	#
	$(CXX) $(OPTIM) -o $@ $(PROG1).o $(WITHLIB35) $(WITHLIB23)
	# TODO pit LIB23 as dependent of LIB35

$(PROG2_EXE): $(PROG2).o $(DLL36)
	#
	# PROG2 SAR_PLOT
	# linking $@
	#
	$(CXX) $(OPTIM) -o $@ $(PROG2).o $(WITHLIB36) $(WITHLIB23)

$(PROG3_EXE): $(PROG3).o $(DLL33)
	#
	# PROG3 GTK_TEXT
	# linking $@
	#
	# should not need # # $(WITHLIB23)
	# LIB 23 is text_gtk
	# LIB 33 is sar_plot_post
	$(CXX) $(OPTIM) -o $@ $(PROG3).o $(WITHLIB33)  # $(WITHLIB23)

$(PROG4_EXE): $(PROG4).o $(DLL36)
	#
	# PROG4 sar_parse
	# linking $(PROG4_EXE) 
	#
	# there was an error with libbase2.so being moved to ./lib/.
	# and being used to link against, when make lots fixed
	# eko $(CXX) $(OPTIM) -o $@ $(PROG4).o $(WITHLIB36) 
	#
	$(CXX) $(OPTIM) -o $@ $(PROG4).o $(WITHLIB36) $(WITHLIB23)



sshhhh:
	P PKG_CONFIG_PATH

$(PROG5_EXE): $(PROG5).o $(DLL34) $(DLL23) $(DLL21) $(DLL11)
	#
	# tv-rem
	# linking $@
	#
	@# sequence matters, X11R6/lib/freetype is not like libs/lib/libfreetype
	@# other libs have sequence needs to resolve usages
	$(CXX) $(OPTIM) -o $@ $(PROG5).o $(OBJS) $(WITHLIB34) $(WITHLIB23) $(WITHLIB21) $(WITHLIB11) $(LIBS) $(LX11)
	-cp -p $@ /home/gps/bin2/$@_
	-cp -p $@ /home/gps/bin2/

$(PROG6_EXE): $(PROG6).o $(DLL36) $(DLL35)
	#
	# $@
	# linking js_many
	#
	$(CXX) $(OPTIM) -o $@ $(PROG6).o $(OBJS) $(WITHLIB3635) $(LIBS)

#		$(CXX) $(OPTIM) -o $@ $(PROG6).o $(OBJS) $(WITHLIB23) $(LIBS)

$(PROG7_EXE): $(PROG7).o $(DLL33) $(DLL11) $(DLL21)
	#
	# $@
	# linking wclient
	#
	$(CXX) $(OPTIM) -o $@ $(PROG7).o $(OBJS) -L. $(WITHLIB33) $(WITHLIB21) $(WITHLIB11) $(LIBS) $(LX11)

$(PROG8_EXE): $(PROG8).o $(DLL35) $(DLL34) $(DLL33) $(DLL11) $(DLL21)
	#
	# DLL35 $(DLL35)
	# DLL34 $(DLL34)
	# prog8 is play_code
	# $@
	#
	$(CXX) $(OPTIM) -o $@ $(PROG8).o $(OBJS) -L. $(WITHLIB21) -l$(LIB33) -l$(LIB35) -l$(LIB21) -l$(LIB11) $(LIBS)

$(PROG9_EXE): $(PROG9).o $(DLL35) $(DLL34) $(DLL33) $(DLL11) $(DLL21)
	#
	# $@
	# linking PROG9 tv_vol
	#
	$(CXX) $(OPTIM) -o $@ $(PROG9).o $(OBJS) $(WITHLIB34) $(WITHLIB21) $(WITHLIB11) $(LIBS) $(LX11)
	#
	@# $(CXX) $(OPTIM) -static -o $@ $(PROG9).o $(OBJS) -L. -l$(LIB34) -l$(LIB11) e_print.o
	-cp -p $@ $@_
	-cp -p $@ /home/gps/bin2/$@_
	-cp -p $@ /home/gps/bin2/

# info make, How to Use Variables, Automatic Variables

# $@ TARGET (not all TARGTS if multiple)
# $% - bar.o from TARGET: foo.a(bar.o) (See Automatic Variables)
# $< - first prerequisite
# $^ - names of all the prerequisites (with repeats removed)
# $+ - all prerequisites (in the same order) (with repeats)
# $? - the prerequisites which are newer (were?)
# $* - STEM ?? dir/foo from dir/a.foo.b via a.%.b ??

# $(@D) - dir part of $@
# $(@F) - file part of $@


# ar - c - create
# ar - u - update (timestamp wins)
# ar - r - replace/insert
# ar - s - symbols (like ranlib)

$(LAR11): $(OBJS_lib11)
	$(AR) -cuUrs $@ $?

$(LAR21): $(OBJS_lib21)
	$(AR) -cuUrs $@ $?

$(LAR33): $(OBJS_lib33)
	$(AR) -cuUrs $@ $?

$(LAR34): $(OBJS_lib34)
	$(AR) -cuUrs $@ $?

$(LAR35): $(OBJS_lib35)
	$(AR) -cuUrs $@ $?

$(LAR36): $(OBJS_lib36)
	$(AR) -cuUrs $@ $?


ifeq (1,1)

shh:
#	$(LINK_SO_FROM) $^ $(LINKS) $(LINK_SO_TAIL) # BASE


$(DLL11): $(OBJS_lib11)
	#
	# DLL11 $@
	#
	pwd
	#
	$(LINK_SO_FROM) $(OBJS_lib11) $(LINKLIB11) $(LINK_SO_TAIL) # BASE
	ls -l $@

## $(DLL21): $(OBJS_lib21)
$(DLL21):
	#
	# DLL21 $@
	#
	$(LINK_SO_FROM) $(OBJS_lib21) $(LINKLIB21) $(LINK_SO_TAIL) # BASE2

## $(DLL21): $(OBJS_lib21)
$(DLL23):
	#
	# DLL23 $@ - gtk
	#
	$(LINK_SO_FROM) $(OBJS_lib23) $(LINKLIB23) $(LINK_SO_TAIL) # BASE2_gtk

$(DLL33): $(OBJS_lib33)
	#
	# DLL-2-3 $@
	#
	$(LINK_SO_FROM) $(OBJS_lib33) $(LINKLIB33) $(LINKS) $(LINK_SO_TAIL) # gtk_text

$(DLL34): $(OBJS_lib34)
	#
	# DLL-2-4 $@
	#
	$(LINK_SO_FROM) $(OBJS_lib34) $(LINKLIB34) $(LINKS) $(LINK_SO_TAIL) # MEDIA

$(DLL35): $(OBJS_lib35)
	#
	# DLL-2-5 $@
	#
	$(LINK_SO_FROM) $(OBJS_lib35) $(LINKLIB35) $(LINKS) $(LINK_SO_TAIL) # ACCTS_GTK

#
# -lbase_implib.a
#
$(DLL36): $(OBJS_lib36)
	$(LINK_SO_FROM) $(OBJS_lib36) $(LINKLIB36) $(LINKS) $(LINK_SO_TAIL) # SAR_PLOT_POST

endif



relink: clean_lib clean_exe $(RUN_INCL_PATH)

clean_rpt:
	$(RM_rf)  $(OBJS_accts_rpt) accts.o

clean_lib:
	# causes re-link of .a
	$(RM_rf)  $(LIST_LIB_A) 
	$(RM_rf)  $(LIST_LIB_SO) 
	$(RM_rf)  lib*implib.a
	$(RM_rf)  lib*.def


clean_lib_11:
	$(RM_rf)  $(OBJS_lib11) 
	$(RM_rf)  $(LAR11) 
	$(RM_rf)  $(DLL11)

clean_lib_21:
	$(RM_rf)  $(OBJS_lib21)
	$(RM_rf)  $(LAR21) 
	$(RM_rf)  $(DLL21) 

clean_lib_23:
	$(RM_rf)  $(OBJS_lib23)
	$(RM_rf)  $(LAR23) 
	$(RM_rf)  $(DLL23) 

clean_lib_33:
	$(RM_rf)  $(OBJS_lib33)
	$(RM_rf)  $(LAR33) 
	$(RM_rf)  $(DLL33)

clean_lib_34:
	$(RM_rf)  $(OBJS_lib34)
	$(RM_rf)  $(LAR34) 
	$(RM_rf)  $(DLL34)

clean_lib_35:
	$(RM_rf)  $(OBJS_lib35)
	$(RM_rf)  $(LAR35) 
	$(RM_rf)  $(DLL35)

clean_lib_36:
	$(RM_rf)  $(OBJS_lib36)
	$(RM_rf)  $(LAR36) 
	$(RM_rf)  $(DLL36)

clean_lib_all: clean_lib_11 clean_lib_23 clean_lib_21 clean_lib_33 clean_lib_34 clean_lib_35 clean_lib_36

clean_exe: clean_lib 
	# causes re-link of .a and .exe
	$(RM_rf)  $(PROG1_EXE)
	$(RM_rf)  $(PROG2_EXE)
	$(RM_rf)  $(PROG3_EXE)
	$(RM_rf)  $(PROG4_EXE)
	$(RM_rf)  $(PROG5_EXE)
	$(RM_rf)  $(PROG6_EXE)
	$(RM_rf)  $(PROG7_EXE)
	$(RM_rf)  $(PROG8_EXE)
	$(RM_rf)  $(PROG9_EXE)
	$(RM_rf)  tv_vol_

clean_o:
	$(RM_rf)  $(PROG1).o $(PROG1_EXE)
	$(RM_rf)  $(PROG2).o $(PROG2_EXE)
	$(RM_rf)  $(PROG3).o $(PROG3_EXE)
	$(RM_rf)  $(PROG4).o $(PROG4_EXE)
	$(RM_rf)  $(PROG5).o $(PROG5_EXE)
	$(RM_rf)  $(PROG6).o $(PROG6_EXE)
	$(RM_rf)  $(PROG7).o $(PROG7_EXE)
	$(RM_rf)  $(PROG8).o $(PROG8_EXE)
	$(RM_rf)  $(PROG9).o $(PROG9_EXE)

clean0: clean_lib clean_exe clean_o clean_lib_all
	$(RM_rf) $(OBJS)
	@# $(RM_rf)  $(DEPS)
	$(RM_rf)  fa fa1 fb out1 out1.gz without_pdf.o
	@# @# make -f $(TOP)/MK/Makefile deps


# this is for doxygen
# rebuit when .deps is (occasionally)

run_incl_path: $(RUN_INCL_PATH)

# TOO MANY REBUILDS# $(RUN_INCL_PATH): $(makes)
$(RUN_INCL_PATH):
	-echo $$CPLUS_INCLUDE_PATH >$@
	@# Process $(RUN_INCL_PATH) with MK_doxies

show:
	#
	# TGT=$(TGT)
	#
	# LINKS='$(LINKS)'
	#
	# DEFS='$(DEFS)'
	#
	# PKG_CONFIG_LIST='$(PKG_CONFIG_LIST)'
	#
	# PKGS='$(PKGS)'
	#
	# P PKG_CONFIG_PATH
	#
	@P PKG_CONFIG_PATH
	#
	# env | grep PKG
	#
	@env | grep PKG
	#
	echo $(shell P PKG_CONFIG_PATH)
	#
	# pwd
	#
	@pwd
	#
	# PKGS --cflags
	#
	$(PKG_CONFIG) $(PKGS) --cflags
	#
	# PKGS --libs
	#
	$(PKG_CONFIG) $(PKGS) --libs
	#
	# INCLS=$(INCLS)
	#
	# LINKS=$(LINKS)
	#

deadd:
	$(PKG_CONFIG) libs_apps_base libs_apps_base2 libs_apps_uses_ssl --libs



.SUFFIXES: .cxx .c .o .a .so .dll

%.dll:
	# using this rule
	$(LINK_SO_FROM) -o $@ $^ # THIS RULE 1010USED
	# but where are the list of deps



#
#	# $(LINK_SO_FROM %, $^) -o $@ $^ # THIS RULE 1010USED !!

.c.o:
	gcc $(OPTIM) $(INCLS) $(DEFS) -c $<

.aa.aa:
	gcc $(OPTIM) $(INCLS) $(DEFS) -c $<

#	sh -c 'echo $$CPLUS_INCLUDE_PATH ; echo '$$HOME''

.cxx.o:
	$(CXX) $(OPTIM) $(INCLS) $(DEFS) -c $< # $(TGT)


#	# 
#	# # untested - does this do the right things ?
#	# # NO IT IS PARSED OK BUT HAS NO EFFECT
#	# %.o: %.h
#	# 
#	# # DITTO NO
#	# .o.h:
#	# 
