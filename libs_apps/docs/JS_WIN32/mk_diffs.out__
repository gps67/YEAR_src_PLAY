
#############################################################
# config.mk - MODIFIED
#############################################################

--- src/config.mk_	2008-03-12 14:36:06.000000000 +0000
+++ src/config.mk	2009-07-24 18:35:18.000000000 +0100
@@ -43,8 +43,19 @@
 DIST = $(DEPTH)/../../dist
 endif
 
+IS_GRAHAM=1
+ifdef IS_GRAHAM
+OS_ARCH         := WIN32
+OS_CONFIG       := WIN32
+OS_RELEASE      :=# $(shell uname -r)_$(OS_CPUARCH)
+HOST_BIN_SUFFIX :=.exe
+PROGRAM = $(OBJDIR)/js.exe
+# ALSO SO_SUFFIX in config/WIN32.mk
+else
+############################### ...
+
 # Set os+release dependent make variables
-OS_ARCH         := $(subst /,_,$(shell uname -s | sed /\ /s//_/))
+# OS_ARCH         := $(subst /,_,$(shell uname -s | sed /\ /s//_/))
 
 # Attempt to differentiate between SunOS 5.4 and x86 5.4
 OS_CPUARCH      := $(shell uname -m)
@@ -104,6 +115,8 @@
 endif
 endif
 endif
+############################### ...
+endif
 
 ASFLAGS         =
 DEFINES         =
@@ -139,7 +152,8 @@
 OBJDIR_TAG = _DBG
 endif
 
-SO_SUFFIX = so
+# SO_SUFFIX = so
+SO_SUFFIX = dll
 
 NS_USE_NATIVE = 1
 

#############################################################
# js.c - MODIFIED
#############################################################

--- src/js.c_	2008-04-11 23:24:55.000000000 +0100
+++ src/js.c	2009-07-25 01:03:56.000000000 +0100
@@ -851,7 +851,8 @@
 static JSBool
 GCZeal(JSContext *cx, uintN argc, jsval *vp)
 {
-    uintN zeal;
+    // uintN zeal;
+    uint32 zeal;
 
     if (!JS_ValueToECMAUint32(cx, vp[2], &zeal))
         return JS_FALSE;
@@ -2038,7 +2039,8 @@
 static JSBool
 TestUTF8(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
 {
-    intN mode = 1;
+    // GPS // intN mode = 1; // LURK UNDO
+    int32 mode = 1;
     jschar chars[20];
     size_t charsLength = 5;
     char bytes[20];

#############################################################
# prmjtime.c - MODIFIED
#############################################################

--- src/prmjtime.c_	2008-04-25 19:40:05.000000000 +0100
+++ src/prmjtime.c	2009-07-24 16:09:48.000000000 +0100
@@ -196,12 +196,12 @@
 
         /* By wrapping a timeBegin/EndPeriod pair of calls around this loop,
            the loop seems to take much less time (1 ms vs 15ms) on Vista. */
-        timeBeginPeriod(1);
+//        timeBeginPeriod(1);
         GetSystemTimeAsFileTime(&ftStart);
         do {
             GetSystemTimeAsFileTime(&ft);
         } while (memcmp(&ftStart,&ft, sizeof(ft)) == 0);
-        timeEndPeriod(1);
+//        timeEndPeriod(1);
 
         /*
         calibrationDelta = (FILETIME2INT64(ft) - FILETIME2INT64(ftStart))/10;

#############################################################
# Makefile.ref - MODIFIED
#############################################################

--- src/Makefile.ref_	2009-02-25 13:24:29.000000000 +0000
+++ src/Makefile.ref	2009-07-24 18:37:46.000000000 +0100
@@ -265,7 +265,7 @@
 else
 LIBRARY = $(OBJDIR)/libjs.a
 SHARED_LIBRARY = $(OBJDIR)/libjs.$(SO_SUFFIX)
-PROGRAM = $(OBJDIR)/js
+PROGRAM = $(OBJDIR)/js$(HOST_BIN_SUFFIX)
 endif
 
 include rules.mk

#############################################################
# config/WIN32.mk - NEW FILE
#############################################################


# -*- Mode: makefile -*-
#
# Hacked together by Adam Rogers [adam (at) jargon (dot) ca] from
# Linux_All.mk and WINNT5.1.mk to enable building using GNU tools
# under MinGW on a Win32 platform. [September 6 2008]
#


#
# Config for all versions of Linux - CROSS TO WIN32 .exe and .dll
#

CC = gcc
CCC = g++
LD = g++
CFLAGS += -Wall -Wno-format

OS_CFLAGS = -D_X86_=1 -DXP_WIN -DXP_WIN32 -DWIN32 -D_WINDOWS -D_WIN32 -DWINVER=0x500 -D_WIN32_WINNT=0x500 -D_MINGW -DEXPORT_JS_API

ifdef BUILD_IDG
OS_CFLAGS += -DBUILD_IDG
endif

ifdef BUILD_OPT
OS_CFLAGS += -s
endif

JSDLL_CFLAGS = -DEXPORT_JS_API
PREBUILT_CPUCFG = 1

LIB_LINK_FLAGS= --add-stdcall-alias -L./fdlibm/$(OBJDIR) -lfdm
EXE_LINK_FLAGS= 

# LIB_LINK_FLAGS=-lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -luuid -lwinmm
# EXE_LINK_FLAGS=-lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -luuid

DEFFILE=$(OBJDIR)/libjs.def
STATICLIB=$(OBJDIR)/libjs_implib.a
XMKSHLIBOPTS += -Wl,--output-def=$(DEFFILE) -Wl,--out-implib=$(STATICLIB)


RANLIB = ranlib
MKSHLIB = $(LD) -shared $(XMKSHLIBOPTS)

#.c.o:
#      $(CC) -c -MD $*.d $(CFLAGS) $<

CPU_ARCH = $(shell uname -m)
# don't filter in x86-64 architecture
ifneq (x86_64,$(CPU_ARCH))
ifeq (86,$(findstring 86,$(CPU_ARCH)))
CPU_ARCH = x86
# OS_CFLAGS+= -DX86_WINDOWS

ifeq (gcc, $(CC))
# if using gcc on x86, check version for opt bug 
# (http://bugzilla.mozilla.org/show_bug.cgi?id=24892)
GCC_VERSION := $(shell gcc -v 2>&1 | grep version | awk '{ print $$3 }')
GCC_LIST:=$(sort 2.91.66 $(GCC_VERSION) )

ifeq (2.91.66, $(firstword $(GCC_LIST)))
CFLAGS+= -DGCC_OPT_BUG
endif
endif
endif
endif

GFX_ARCH = win32

OS_LIBS = -lm -lc

ASFLAGS += -x assembler-with-cpp


ifeq ($(CPU_ARCH),alpha)

# Ask the C compiler on alpha linux to let us work with denormalized
# double values, which are required by the ECMA spec.

OS_CFLAGS += -mieee
endif

# Use the editline library to provide line-editing support.
ifdef JS_EDITLINE
JS_EDITLINE = 1
endif

ifeq ($(CPU_ARCH),x86_64)
# Use VA_COPY() standard macro on x86-64
# FIXME: better use it everywhere
OS_CFLAGS += -DHAVE_VA_COPY -DVA_COPY=va_copy
endif

ifeq ($(CPU_ARCH),x86_64)
# We need PIC code for shared libraries
# FIXME: better patch rules.mk & fdlibm/Makefile*
## NO NEED ON WIN32 # OS_CFLAGS += -DPIC -fPIC
endif


#############################################################
# EOF #
#############################################################

cp -p src/config/WIN32.mk ...
cp -p src/M ...
cp -p src/M.out_ ...
