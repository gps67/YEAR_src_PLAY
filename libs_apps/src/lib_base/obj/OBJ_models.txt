OBJ_models.txt

	NBYTES_t * OBJ = PTR // VAR == PTR // VALUE = OBJ_t a_struct

	TWO API SIDES

		OBJ refers to 
		VAR_NAME
		VAR_SPEC
		VAR_VALUE

		EXPR referes to 
		EXPR OPCODE // CODE_POINT // XPOS // where VAR is DECL MENTION HERE
		EXPR ITEM = ARRAY[idx] // ITEM[item] // AUTO_VAR // AVAIL // ALIAS //

		MINI_MACHINE has API to update (or readonly) (or cache) (or or)
		CODE_POINT == "OPCODE" // AUTO_ALIAS "CODE_POINT" due to USED
		A_VAR == VAR_POOL.VAR_varname.looked_up_to_PTR
		A_VAR.PTR == "PTR" // AUTO_REGISTER_VAR_NAME PTR // LEX MATCH
		// LEX MATCH exact cident99 STR0 // <-- that is AUTO_LIST // ALMOST
		// LEX MATCH TEMPLATE USAGE
		// LEX is STRUCT is CXX_STRUCT plus USED VAR_NAME NAME_POOL("ITEM")
		// ITEM == "%s" // STR0_t STR0 = EA_from_EXPR(ARGS) // SCRIPT
		// EXPR == "SCRIPT_EXPR" // MATCH SPELLING then CALL EXPR // SESS
		// SESS += a mentioned LOCN with LIBR // "LOCN" // 
		// PHRASE += OPCODE lhs rhs // CMNT // XPOS // CODE_POINT //
		// += OPCODE lhs rhs // CMNT // XPOS // CODE_POINT // SCRIPT //

		ls_JSON FILE NAME STAT INFO // INFO = lookup NAME // STR0 //

		/*
			This is an ATOMIC DECL of IBJ_IDX 

			MINI_MACHINE uses u8_idx // u24_idx // i23_idx_expr
			DECODE i23

			if IDX < 0 goto "is_MINUS"
			if IDX == 0 goto "is_ZERO"
			KNOW IDX > 0 goto "is_PLUS"

			OPTION treat ZERO as PLUS via ZERO_or_PLUS

			ZERO_or_PLUS ZERO PLUS reachable MINUS
			// on_MINUS_EVENT("SCRIPT") // CXX_vs_ARGV_of_STR0
			// on_ANYSTR NBYTES TOKEN = LOOKUP("SCRIPT")
			// on_ANYSTR NBYTES TOKEN = LOOKUP("OBJECT")
			// on_ANYSTR NBYTES TOKEN = LOOKUP("FIELD")
			// on_ANYSTR NBYTES TOKEN = LOOKUP("FUNCTION")
			// on_ANYSTR NBYTES TOKEN = LOOKUP("VALUE")
			// on_ANYSTR NBYTES TOKEN = LOOKUP("NBYTES")
			// on_ANYSTR NBYTES TOKEN = LOOKUP("DATA")


			compiler is writing down it's workings
			uses TABLE = ROM_FIXED_LAYOUT obj = lookup "obj"
			uses SCRIPT DATA = TABLE LAYOUT obj = lookup "obj"
			uses ALIAS to MATCH "STR0"
			// IMPLEMENT STR0 with "STR0" // LEX NAME %s STR0
			// "{ STR0_t STR0 = (AUTO_TYPE %s }" // == PTR _VALUE
			OPTION treat ZERO as PLUS via

				MATCH "OPTION treat ZERO as PLUS"

				KNOW "KNOW idx started counting at ZERO"
				KNOW "idx_t idx = N ++" // CMNT AUTO KNOW CMNT
				KNOW "idx_t idx = /* ALLOC */ N ++"

			USAGE " OBJ_t * OBJ = PTR // CMNT "

			MATCH USAGE " OBJ_t * OBJ = PTR // CMNT "
			PSG PTR = EXPR ARGS

			list_of_vars += STRUCTURE { HERE }
			VAR_NAME == "SPELLING"
			OBJ_NAME == "VAR_NAME" // MENTION into MINI_MACHINE
			IDX_NAME == get_IDX_from_NAME STR0 // CHECK ANYSTR //

			STRILL two usages of STR0
			STR0 is VAR_NAME // OBJ_NAME // GETTER_API_BIND_VAR 
			STR0 is VAR_VALUE // 

			STR0 is CSR in STREAM
			STR0 is CSR in MULTI_LINE_BUFFER
			STR0 is XPOS STR0_from_PARSE_XPOS // VAR_NAME // CIDENT //

			STR0 is as_found_in_LOCAL_VOCAB
			STR0 is as_found_in_CALLERS_VOCAB
			STR0 is as_found_in_VAR_POOL["VOCAB"]

			IDX_t IDX; // within u24_BITFIELD // check BOUNDS 
			// check BOUNDS on ALLOC // CT KNOW TOKEN == "TOKEN"
			// TOKEN == "CIDENT" _t
			// TOKEN == "FILENAME" _t
			// local_vocab_alias %s STR0 SELF THIS STRUCT EA0 PTR
			// %s == "{ OPCODE lhs rhs }" += CODE_POINT CMNT XPOS


		*/

		EXPR lhs
		EXPR rhs

		LIBR alloc FIELD_NAME FIELD_IDX phrase_book libr item
		LIBR alloc FIELD_NAME FIELD_IDX phrase_book XPOS libr item this self here 
		LOCN += NEW HERE on first MENTION
		HERE += lhs rhs CMNT CODE_POINT PSG_TEMPLATE PSG_DATA ARGV_t
		HERE += LOCN // HERE // SELF // LIBR // VAR_POOL("ITEM") // PSG



// COMPILE code in CMNTS // strict MINI_MACHINE //

	run CXX as ASM on MINI_MACHINE permit some UDEF EXPR

		SCRIPT += CXX
		CXX += MINI_MACHINE

		uses refcounted_objects via EA_EXPR
		uses ITEM_t * PTR
		uses BASE_CLASS_obj0 // OPTION REFCOUNT_API("API+=PTR")
		uses PTR = RT EXPR "{ u16_OPCODE u48_PTR }"
		// "ANYSTR" // BIND SOURCE to DEST // CODE_POINT == "CODE_POINT"

		uses EA_EXPR( u64_WORD )
		DECODE += u16_OPCODE
		DECODE += u48_PAYLOAD // u48_payload = u64_WORD >> 16 //

		u16_AB OPCODE_AB
		u16_CD VARNAME_idx "{ u16_IDX }"
		u32_WORD 

		u16_AB OPCODE_AB
		u16_CD VARNAME_idx "{ u16_IDX }"
		u32_ABCD # SHIFTED HALF WORD # WORKS_WELL #

		u16_AB OPCODE_AB
		u16_CD VARNAME_idx "{ u16_IDX }"
		u16_OFFS_of_STR_in_POOL
		u16_OFFS_of_STR_in_POOL

		u16_AB OPCODE_AB
		u16_OFFS_of_STR_in_POOL "{ u16_IDX }"
		u16_OFFS_of_STR_in_POOL VAR
		u16_OFFS_of_STR_in_POOL VALUE or EXPR or API

		u64_WORD_DECODED 
		u16_OFFS_of_STR_in_POOL "{ opcode_AB }"
		u16_OFFS_of_STR_in_POOL "{ u16_IDX }"
		u16_OFFS_of_STR_in_POOL "{ VAR }"
		u16_OFFS_of_STR_in_POOL "{ VALUE }"  or EXPR or API
		u16_OFFS_of_STR_in_POOL "{ EXPR }"
		u16_OFFS_of_STR_in_POOL "{ PSG }" // grow your DIALECT HERE //
		u16_OFFS_of_STR_in_POOL "{ API }"

		OPCODE gets compiled, run, GEN

		RUNTIME uses a wierd symbolic lookup system NAME = ANYSTR
		RUNTIME provides IDX_from_STR0_VAR_VAL_NAME_expr
		RUNTIME stays in an u16 world (can X8 BOUNCE_VAR 
		OPCODE does a lot of DECODING then PACKING using MINI_MACHINE

obj_ref0
	obj_ref0 * obj; is a (ptr to a) refcounted object
	obj_ref_js * obj; is usable as a js object in a script (expensive peers)
	obj_ref_py * obj; is an experiment to fix the cracks
	typedef obj_ref_XXX obj_ref; // in zone of code

blk1	
	blk1 expandablechunkofmem;
	hmmm pointer to pointer - maybe fix code ? usage?
	hmmm overallocated - maybe trim when flag set in header, and first alloc
	hmmm callback - please reallocate blk1, trim_to_fit (when convenient)

buffer1
buffer2
	blk1 with added printf, probably utf8, maybe ASCII or <TODO>
	want 64 bytes pre-allocated, then jump to extra u8 * buf_b;
	want CODE_POINT to hang on to allocated buf_b (via buffer2)
	want DATA_PREEN_WAVE to detatch from CODE_POINT, maybe stats ?
		if detected_multi_instances ... start with MSS_guess
		if detected_solo_instances ...
		if detected_MSS_page_prealloc ...

	hmmm currently LIST/VECTORS overallocate, OK for temps, bad for tree
	want allocate near other parts of same task,
	want manage OFFS_OF_ITEM[i] // PACKED within ZONE, move LAST, PADDING

obj_hold<obj_ref0> obj;
	auto refcount
	slack syntax for *P
	good syntax for T * P;

PyObject_basic
	FORGET IT
	this is an experiment
	good, but clearly in need of more work
	also needs choice of multiple object models within same frame
	problem with C++ insisting that VTABLE goes at OFFS=0

obj_ref0_debug_base
	Fully working
	ignore this - it counts how many allocs/free you did
	if you need to add tracers, this might help
	if you want speed - switch it off somehow (it is otherwise unused)
	if it is going to be switched on - cant we use those pointers?
	if it is going to be switched off - we cant use those LL pointers!

RELOCATEABLE_OBJECT
	needs EA_EXPR_DECODER DECODER(u32)
	needs type_spec == EA_EXPR via import table (also STRING)

MALLOC/FREE
 NEW/DELETE
	obj_hold needs to call delete ptr;
	however, it is not clear which delete() to call
	(actually it is - its the free() used by the obj_hold.dll
	_NOT_ the free that matches the NEW() used in the other DLL)

	SO: any thing derived from obj_ref0 should use a new/alloc from here

	SEE 
		http://oldwiki.mingw.org/index.php/dlltool
		http://chadaustin.me/cppinterface.html

MIXED MODELS
	OODB has tray of objects, (not obj_ref0)
		PAGE[256] of OODB_instance_ITEM
		PAGE[256] of OODB_struct_ITEM
		OODB probably wont be obj_ref - because of ref_count
		PYTHON base has problems shifting base_addr for C++
		STRUCT objects will need a second pointer to SPEC || known

	THOUGHT for the day:
		[u4][u4] - guaranteed to fit in [u8], often sparse
		[u3][u5] - guaranteed to fit in [u8], maybe sparse
		[u8] - guaranteed to fit in [u8], maybe n=256 = 8.01 bits! (9)
		(This is where ASM knew that N!=0, hence 256, tricky)
		(That links with NULL pointer indicating N==0)

