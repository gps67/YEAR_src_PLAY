Some abbreviated notes about what post-135 does ...

class object_header

	i32	cid
	i32	size

class object

	introduces no data fields

class storage

	open, close, flush, commit, rollback

	get_root_object, find_storage(obj), 

	allocate, free

classinfo.h:

 CLASSINFO( postclass, REF(f1) REF(f2 )

	declares the default constructor:

	NAME() {
		int sp = 0;
		gc_segment* const gc_stack = storage::gc_stack;
		long const shift = storage::base_address_shift;
		if (gc_stack != NULL)
		{
			FIELD_LIST
			storage::gc_stack = & gc_stack[sp];
		} else if (shift != 0)
		{
			FIELD_LIST
		}
	}
	static void constructor(object* ptr);
	static class_descriptor self_class  ;                                        

 FIELDLIST  REF(objp1)

	if (gc_stack)
	{
		gc_stack[sp].ptr = (object**)&x; // push var obj1 to stack
		gc_stack[sp].len = 1;
		sp+=1;
	} else
		if (x != NULL)
	{
		*(char**)&x += shift;		// add shift to obj1
	}                                

 FIELDLIST  VREFS(objpary)	ONLY called in constructor()

	similar for array of ADJACENT pointers


 REGISTER(CLASSNAME)

	// create a function that initialises ptr in-situ
	void CLASSNAME::constructor(object* ptr)
	{
		new (ptr)  CLASSNAME;
	}

	// create a variable that desribes class
	class_descriptor CLASSNAME::self_class(
		#CLASSNAME,
		sizeof(CLASSNAME),
		&CLASSNAME::constructor
	)  /* ; */
                   
REGISTER_WITH_VARIABLE_ARRAY_OF_OBJECTS(NAME, ARRAY_TYPE, ARRAY)        

	void NAME::constructor(object* ptr) {                                       
		/*
			initialise the object at location ptr
			WITHOUT OVERWRITING MEMORY except pointers
			WITH ARRAY[0]() auto called but not [1] ...
		*/
		NAME* p = new (ptr) NAME;                                               
		/*
			point to end of array
			SIZE is already known
		*/
		ARRAY_TYPE* end =
			(ARRAY_TYPE*)(
				   (char*) p
				+ ((object_header*)p - 1)->size
			);
		ARRAY_TYPE* start = p->ARRAY;                                           
		while (++start < end) {                                                 
			new (start) ARRAY_TYPE;                                             
		}                                                                       
	}                                                                           
	class_descriptor NAME::self_class(
		#NAME,
		sizeof(NAME),
		&NAME::constructor
	)  ;
									

C++ OPERATOR NEW

invoke:
	NAME * p = new ( class, sto ) NAME ( app_args );

void * operator new (
	size_t nbytes,		// added by c++
	class_descriptor& desc,
	storage& sp,        
	size_t varying_size = 0
)
{
	void * p = ... alloc ...
	return p;
}

//////


void operator new (
        size_t // nbytes,          // added by c++, unused
        object * ptr
)
{
	return ptr;
}

?? HOW DOES C++ know when to call this delete ... ??  It doesnt - 
SEE: http://www.parashift.com/c++-faq-lite/dtors.html
BUT: class SPECIFICBASE { .. operator delete() ... applies to class

void operator delete( void * p )
{
	object * ptr = (object *) p;
	if( ptr ) {
		... free ptr ...
	}
}

/////////////

always call mk_XXX which calls new (stro) Type( args ) for you

always use non-default constructors for sub-fields, as the
default constructor() is semi-reserved for load-time.
Any parameter is OK, just use it.

